<!--
// --------------------------------------------------------------------------
//  Gurux Ltd
//
//
//
// Filename:        $HeadURL$
//
// Version:         $Revision$,
//                  $Date$
//                  $Author$
//
// Copyright (c) Gurux Ltd
//
//---------------------------------------------------------------------------
//
//  DESCRIPTION
//
// This file is a part of Gurux Device Framework.
//
// Gurux Device Framework is Open Source software; you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2 of the License.
// Gurux Device Framework is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// This code is licensed under the GNU General Public License v2.
// Full text may be retrieved at http://www.gnu.org/licenses/gpl-2.0.txt
//---------------------------------------------------------------------------
-->
@using Microsoft.Extensions.Logging

@inject IGXCookieStorage cookieStorage
@inject ILogger<InputEmail> Logger

@inherits Microsoft.AspNetCore.Components.Forms.InputText
<input type="email" value="@CurrentValue"
       class="@CssClass"
       @attributes="AdditionalAttributes"
       onchange="@((ChangeEventArgs __e) => UpdateValue(__e.Value))" />

@code {
    /// <summary>
    /// ID is used to save cookie value.
    /// </summary>
    [Parameter]
    public string? Id
    {
        get;
        set;
    }

    /// <summary>
    /// Whether to store the value in a cookie.
    /// </summary>
    /// <seealso cref="Id"/>see
    [Parameter]
    public bool Save { get; set; } = true;

    private async Task UpdateValue(object? value)
    {
        string? str = Convert.ToString(value);
        if (Value != str)
        {
            Value = str;
            if (ValueChanged.HasDelegate)
            {
                await ValueChanged.InvokeAsync(Value);
            }
            try
            {
                if (Save && !string.IsNullOrEmpty(Id))
                {
                    await cookieStorage.SetValueAsync(Id, Convert.ToString(Value));
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex.Message);
            }
        }
    }

    /// <summary>
    /// Update default cookie value.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Save && !string.IsNullOrEmpty(Id))
            {
                Value = await cookieStorage.GetValueAsync(Id);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }
}