<!--
// --------------------------------------------------------------------------
//  Gurux Ltd
//
//
//
// Filename:        $HeadURL$
//
// Version:         $Revision$,
//                  $Date$
//                  $Author$
//
// Copyright (c) Gurux Ltd
//
//---------------------------------------------------------------------------
//
//  DESCRIPTION
//
// This file is a part of Gurux Device Framework.
//
// Gurux Device Framework is Open Source software; you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2 of the License.
// Gurux Device Framework is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// This code is licensed under the GNU General Public License v2.
// Full text may be retrieved at http://www.gnu.org/licenses/gpl-2.0.txt
//---------------------------------------------------------------------------
-->

@namespace Gurux.DLMS.AMI.Components.Table
@using Gurux.DLMS.AMI.Client.Helpers;
@using Gurux.DLMS.AMI.Components.Enums

@inherits ComponentBase
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier


@if (!_hidden)
{
    <td style="@CssStyle" class="@GetCssClass()" @attributes="@AdditionalAttributes">
        @if (Parent != null && Parent.CanEdit)
        {
            <a href="@Link" onclick="@(() => OnSelect())">
                @ChildContent
            </a>
        }
        else
        {
            @ChildContent
        }
    </td>
}

@code
{
    /// <summary>
    /// Id.
    /// </summary>
    [Parameter]
    public string? Id { get; set; }

    /// <summary>
    /// Parent table.
    /// </summary>
    [CascadingParameter]
    private IGXTable? Parent { get; set; }


    private bool CanEdit
    {
        get
        {
            if (Parent == null)
            {
                return true;
            }
            return Parent.CanEdit;
        }
    }

    /// <summary>
    /// href link.
    /// </summary>
    [Parameter]
    public string? Link { get; set; }

    [Parameter]
    public object? Target { get; set; }

    /// <summary>
    /// Gets or sets the item template for the list.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// CSS style.
    /// </summary>
    [Parameter]
    public string? CssStyle { get; set; }

    /// <summary>
    /// CSS class.
    /// </summary>
    [Parameter]
    public string? CssClass { get; set; }

    /// <summary>
    /// Responsive determines the order
    /// in which the contents are hidden if they do not fit the screen.
    /// </summary>
    [Parameter]
    public Visibility Visibility { get; set; } = Visibility.All;

    /// <summary>
    /// Is hidden.
    /// </summary>
    bool _hidden;

    private string? GetCssClass()
    {
        return Th.GetCssClass(Visibility, CssClass);
    }

    /// <summary>
    /// Additional attributes.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// New target is selected.
    /// </summary>
    private void OnSelect()
    {
        if (Target != null)
        {
            Parent?.SelectCell(Target);
        }
        if (!string.IsNullOrEmpty(Link))
        {
            Notifier?.ChangePage(NavigationManager.Uri);
            GXHelpers.NavigateTo(NavigationManager, Notifier, Link);
        }
    }

    /// <summary>
    /// Initialize context menu.
    /// </summary>
    protected override void OnInitialized()
    {
        if (Parent == null)
        {
            throw new ArgumentNullException(nameof(Parent), "Th must exist within a GXTable");
        }
        _hidden = Parent.IsHidden(Id);
        base.OnInitialized();
    }
}