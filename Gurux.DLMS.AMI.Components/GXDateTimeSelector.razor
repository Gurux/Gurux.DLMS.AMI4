<!--
// --------------------------------------------------------------------------
//  Gurux Ltd
//
//
//
// Filename:        $HeadURL$
//
// Version:         $Revision$,
//                  $Date$
//                  $Author$
//
// Copyright (c) Gurux Ltd
//
//---------------------------------------------------------------------------
//
//  DESCRIPTION
//
// This file is a part of Gurux Device Framework.
//
// Gurux Device Framework is Open Source software; you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2 of the License.
// Gurux Device Framework is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// This code is licensed under the GNU General Public License v2.
// Full text may be retrieved at http://www.gnu.org/licenses/gpl-2.0.txt
//---------------------------------------------------------------------------
-->
@using System.Diagnostics.CodeAnalysis
@using System.Globalization
@using Microsoft.Extensions.Logging

@typeparam TItem

@inject IGXCookieStorage cookieStorage
@inject ILogger<GXDateTimeSelector<TItem>> Logger

<CascadingValue Value="this">
    <input id="@Id"
           type="datetime-local"
           value="@ValueToString()"
           placeholder="@Placeholder"
           class="@CssClass"
           attributes="@AdditionalAttributes"
           onreset="@(() => Reset())"
           onchange="@((ChangeEventArgs e) => UpdateDateTime(e.Value))"
           "@IsRequired()" />
</CascadingValue>

@code
{
    const string Format = "yyyy-MM-ddTHH:mm:ss";

    /// <summary>
    /// ID is used to save cookie value.
    /// </summary>
    [Parameter]
    public string? Id
    {
        get;
        set;
    }

    /// <summary>
    /// Whether to store the value in a cookie.
    /// </summary>
    /// <seealso cref="Id"/>see
    [Parameter]
    public bool Save { get; set; } = true;

    /// <summary>
    /// Is datetime value required.
    /// </summary>
    [Parameter]
    public bool Required
    {
        get;
        set;
    }

    /// <summary>
    /// Constructor.
    /// </summary>
    public GXDateTimeSelector()
    {
        Type type = Nullable.GetUnderlyingType(typeof(TItem)) ?? typeof(TItem);
        if (type != typeof(DateTime) && type != typeof(DateTimeOffset) && type != typeof(DateOnly) && type != typeof(TimeOnly))
        {
            throw new InvalidOperationException($"Unsupported {GetType()} type param '{type}'.");
        }
    }

    private string? IsRequired()
    {
        return Required ? " required" : null;
    }


    /// <summary>
    /// Datetime value.
    /// </summary>
    [Parameter]
    public TItem? Value
    {
        get;
        set;
    }

    ///Reset value.
    private void Reset()
    {
        UpdateDateTime(null);
    }

    /// <summary>
    /// Notified when the selected value is changed.
    /// </summary>
    [Parameter]
    public EventCallback<TItem?> ValueChanged
    {
        get;
        set;
    }

    private string? ValueToString()
    {
        if (Value is DateTime dt)
        {
            return BindConverter.FormatValue(dt,
                Format,
                CultureInfo.InvariantCulture);
        }

        if (Value is DateTimeOffset dto)
        {
            return BindConverter.FormatValue(dto,
                Format,
                CultureInfo.InvariantCulture);
        }

        if (Value is DateOnly d)
        {
            return BindConverter.FormatValue(d,
                Format,
                CultureInfo.InvariantCulture);
        }

        if (Value is TimeOnly tt)
        {
            return BindConverter.FormatValue(tt,
                Format,
                CultureInfo.InvariantCulture);
        }
        return string.Empty;
    }

    [Parameter]
    public string? CssClass
    {
        get;
        set;
    } = "form-control";

    /// <summary>
    /// Placeholder text.
    /// </summary>
    [Parameter]
    public string? Placeholder { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    private void UpdateDateTime(object? value)
    {
        if (value is string str &&
        !string.IsNullOrEmpty(str))
        {
            Value = default;
            TItem result;
            if (!BindConverter.TryConvertTo<TItem>(value, CultureInfo.InvariantCulture, out result))
            {
                throw new Exception("Invalid date time.");
            }
            bool change = Value?.GetHashCode() != result?.GetHashCode();
            Value = result;
            if (change)
            {
                if (ValueChanged.HasDelegate)
                {
                    ValueChanged.InvokeAsync(Value);
                }
            }
        }
        else
        {
            bool change = Value != null;
            Value = default;
            if (change)
            {
                if (ValueChanged.HasDelegate)
                {
                    ValueChanged.InvokeAsync(Value);
                }
            }
        }
        try
        {
            if (Save && !string.IsNullOrEmpty(Id))
            {
                cookieStorage.SetValueAsync(Id, ValueToString());
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }

    /// <summary>
    /// Update default cookie value.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Save && !string.IsNullOrEmpty(Id))
            {
                string? str = await cookieStorage.GetValueAsync(Id);
                UpdateDateTime(str);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }
}