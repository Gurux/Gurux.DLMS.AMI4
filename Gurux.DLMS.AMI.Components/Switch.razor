<!--
// --------------------------------------------------------------------------
//  Gurux Ltd
//
//
//
// Filename:        $HeadURL$
//
// Version:         $Revision$,
//                  $Date$
//                  $Author$
//
// Copyright (c) Gurux Ltd
//
//---------------------------------------------------------------------------
//
//  DESCRIPTION
//
// This file is a part of Gurux Device Framework.
//
// Gurux Device Framework is Open Source software; you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2 of the License.
// Gurux Device Framework is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// This code is licensed under the GNU General Public License v2.
// Full text may be retrieved at http://www.gnu.org/licenses/gpl-2.0.txt
//---------------------------------------------------------------------------
-->
@using Microsoft.Extensions.Logging

@inject IGXCookieStorage cookieStorage
@inject ILogger<Switch> Logger

<CascadingValue Value="this">
    <div class="form-inline">
        @if (!string.IsNullOrEmpty(PreText))
        {
            <label>@PreText</label>
        }
        <div class="form-check form-switch">
            <input id="@Id" class="form-check-input"
                   type="checkbox"
                   checked="@IsChecked()"
                   disabled="@IsDisabled()"
                   onchange="@(async (ChangeEventArgs e) => await UpdateCheck(Convert.ToBoolean(e.Value)))">
            @if (!string.IsNullOrEmpty(Text))
            {
                <label>@Text</label>
            }
            @ChildContent
        </div>
    </div>
</CascadingValue>

@code {
    /// <summary>
    /// ID is used to save cookie value.
    /// </summary>
    [Parameter]
    public string? Id
    {
        get;
        set;
    }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Switch pre-text.
    /// </summary>
    [Parameter]
    public string? PreText { get; set; }

    /// <summary>
    /// Switch text.
    /// </summary>
    [Parameter]
    public string? Text { get; set; }


    /// <summary>
    /// Is switch disabled
    /// </summary>
    [Parameter]
    public bool Disabled { get; set; }

    /// <summary>
    /// Is switch checked
    /// </summary>
    [Parameter]
    public bool Value { get; set; }


    private string? IsChecked()
    {
        return Value ? "checked" : null;
    }

    private string? IsDisabled()
    {
        return Disabled ? "disabled" : null;
    }

    private async Task UpdateCheck(bool value)
    {
        if (Value != value)
        {
            Value = value;
            if (ValueChanged.HasDelegate)
            {
                await ValueChanged.InvokeAsync(value);
            }
            if (OnChange != null)
            {
                OnChange(value);
            }
            try
            {
                if (!string.IsNullOrEmpty(Id))
                {
                    await cookieStorage.SetValueAsync(Id, Convert.ToString(Value));
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex.Message);
            }
        }
    }

    /// <summary>
    /// Receive notification when user changes the value.
    /// </summary>
    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    /// <summary>
    /// Receive notification when user changes the value.
    /// </summary>
    [Parameter]
    public Action<bool>? OnChange { get; set; }

    /// <summary>
    /// Update default cookie value.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!string.IsNullOrEmpty(Id))
            {
                string? value = await cookieStorage.GetValueAsync(Id);
                if (!string.IsNullOrEmpty(value))
                {
                    Value = bool.Parse(value);
                    if (ValueChanged.HasDelegate)
                    {
                        await ValueChanged.InvokeAsync(Value);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex.Message);
        }
    }
}