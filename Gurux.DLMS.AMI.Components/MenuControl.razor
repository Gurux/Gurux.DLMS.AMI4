<!--
// --------------------------------------------------------------------------
//  Gurux Ltd
//
//
//
// Filename:        $HeadURL$
//
// Version:         $Revision$,
//                  $Date$
//                  $Author$
//
// Copyright (c) Gurux Ltd
//
//---------------------------------------------------------------------------
//
//  DESCRIPTION
//
// This file is a part of Gurux Device Framework.
//
// Gurux Device Framework is Open Source software; you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2 of the License.
// Gurux Device Framework is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// This code is licensed under the GNU General Public License v2.
// Full text may be retrieved at http://www.gnu.org/licenses/gpl-2.0.txt
//---------------------------------------------------------------------------
-->

<CascadingValue Value="this">
    <div class="btn-group" role="group" style="@GetStyle()">
        @foreach (MenuItem it in Items)
        {
            <button type="button" class="btn button" disabled="@it.ReadOnly" style="@GetButtonStyle()" onclick=@it.OnClick>
                @if (it.Icon != null)
                {
                    <div class="@it.Icon"></div>
                }
                &nbsp;@it.Text
            </button>
        }
    </div>
    @ChildContent
</CascadingValue>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Is button shown on the right corner.
    /// </summary>
    [Parameter]
    public bool RightCorner { get; set; }

    /// <summary>
    /// Is button shown on the bottom.
    /// </summary>
    [Parameter]
    public bool Bottom { get; set; }

    /// <summary>
    /// CSS style.
    /// </summary>
    [Parameter]
    public string? CssStyle { get; set; }

    private string @GetButtonStyle()
    {
        if (!string.IsNullOrEmpty(CssStyle))
        {
            return CssStyle;
        }
        if (RightCorner)
        {
            return "background-color: dodgerblue;";
        }
        return "";
    }
    private string? GetStyle()
    {
        if (RightCorner)
        {
            if (Bottom)
            {
                return "position: fixed;bottom: 20px;right: 20px;";
            }
            return "float: right;";
        }
        if (Bottom)
        {
            return "position: absolute; bottom:0;";
        }
        return null;
    }

    /// <summary>
    /// Menu items.
    /// </summary>
    [Parameter]
    public List<MenuItem>? MenuItems { get; set; }

    List<MenuItem> Items = new List<MenuItem>();

    /// <summary>
    /// Add new menu item.
    /// </summary>
    /// <param name="item">Menu item</param>
    internal void AddMenuItem(MenuItem item)
    {
        Items.Add(item);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        if (MenuItems != null && MenuItems.Count != 0)
        {
            Items.AddRange(MenuItems);
            StateHasChanged();
        }
    }
}