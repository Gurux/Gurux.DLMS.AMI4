<!--
// --------------------------------------------------------------------------
//  Gurux Ltd
//
//
//
// Filename:        $HeadURL$
//
// Version:         $Revision$,
//                  $Date$
//                  $Author$
//
// Copyright (c) Gurux Ltd
//
//---------------------------------------------------------------------------
//
//  DESCRIPTION
//
// This file is a part of Gurux Device Framework.
//
// Gurux Device Framework is Open Source software; you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2 of the License.
// Gurux Device Framework is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// This code is licensed under the GNU General Public License v2.
// Full text may be retrieved at http://www.gnu.org/licenses/gpl-2.0.txt
//---------------------------------------------------------------------------
-->

@using System.Diagnostics.CodeAnalysis
@using System.Globalization;

<div class="row">
    <div class="input-group col-md-4">
        <input class="form-control py-2 border-right-0 border"
               type="search"
               value="@Value"
               onsearch="@(() => OnSearch())"
               placeholder="@Placeholder"
               oninput="@((ChangeEventArgs __e) => Value = Convert.ToString(__e.Value))" />
        <span class="input-group-append">
            <button class="btn btn-outline-secondary border-left-0 border" type="button"
                    onclick="@(() => OnSearch())">
                <i class="oi oi-magnifying-glass"></i>
            </button>
        </span>
    </div>
</div>
@code {
    public delegate Task SearchDelegate(string? value);


    [Parameter]
    public string? CssClass { get; set; }

    [Parameter]
    public string? Placeholder { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    public string? Value { get; set; }

    /// <summary>
    /// Action that is executed when the user press the search button.
    /// </summary>
    [Parameter]
    public Action<string?>? OnClick { get; set; }

    /// <summary>
    /// Action that is executed when the user press the search button.
    /// </summary>
    [Parameter]
    public SearchDelegate? OnClickAsync { get; set; }

    private void OnSearch()
    {
        if (OnClick != null)
        {
            OnClick(Value);
        }
        else if (OnClickAsync != null)
        {
            OnClickAsync(Value);
        }
    }
}