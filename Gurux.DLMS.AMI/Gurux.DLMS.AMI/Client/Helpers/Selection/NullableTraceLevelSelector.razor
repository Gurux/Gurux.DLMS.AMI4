<!--
// --------------------------------------------------------------------------
//  Gurux Ltd
//
//
//
// Filename:        $HeadURL$
//
// Version:         $Revision$,
//                  $Date$
//                  $Author$
//
// Copyright (c) Gurux Ltd
//
//---------------------------------------------------------------------------
//
//  DESCRIPTION
//
// This file is a part of Gurux Device Framework.
//
// Gurux Device Framework is Open Source software; you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2 of the License.
// Gurux Device Framework is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// This code is licensed under the GNU General Public License v2.
// Full text may be retrieved at http://www.gnu.org/licenses/gpl-2.0.txt
//---------------------------------------------------------------------------
-->

@using System.Diagnostics
@using System.Diagnostics.CodeAnalysis

@inherits InputBase<TraceLevel?>

<select class="form-select" @bind="_value">
    @foreach (var it in TraceLevels)
    {
        <option value="@it">@it</option>
    }
</select>

@code {

    private TraceLevel? _value
    {
        get
        {
            return Value;
        }
        set
        {
            if (Value != value)
            {
                Value = value;
                ValueChanged.InvokeAsync(value);
            }
        }
    }

    /// <summary>
    /// Available trace levels.
    /// </summary>
    [Parameter]
    public TraceLevel[] TraceLevels { get; set; } = new TraceLevel[]
      {
        TraceLevel.Off,
        TraceLevel.Error,
        TraceLevel.Warning,
        TraceLevel.Info,
        TraceLevel.Verbose,
      };

    protected override bool TryParseValueFromString(string? value,
     [MaybeNullWhen(false)] out TraceLevel? result,
     [NotNullWhen(false)] out string validationErrorMessage)
    {
        validationErrorMessage = "";
        try
        {
            if (value != null)
            {
                result = Enum.Parse<TraceLevel>(value);
            }
            else
            {
                result = TraceLevel.Off;
            }
        }
        catch (Exception ex)
        {
            result = TraceLevel.Off;
            validationErrorMessage = ex.Message;
            return false;
        }
        return true;
    }
}