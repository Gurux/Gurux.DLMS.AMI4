<!--
// --------------------------------------------------------------------------
//  Gurux Ltd
//
//
//
// Filename:        $HeadURL$
//
// Version:         $Revision$,
//                  $Date$
//                  $Author$
//
// Copyright (c) Gurux Ltd
//
//---------------------------------------------------------------------------
//
//  DESCRIPTION
//
// This file is a part of Gurux Device Framework.
//
// Gurux Device Framework is Open Source software; you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2 of the License.
// Gurux Device Framework is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// This code is licensed under the GNU General Public License v2.
// Full text may be retrieved at http://www.gnu.org/licenses/gpl-2.0.txt
//---------------------------------------------------------------------------
-->

@typeparam TItem

<div class="selection-container">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
</div>

@code {
    int _pageSize = 5;

    /// <summary>
    /// Page size.
    /// </summary>
    public int PageSize
    {
        get
        {
            return _pageSize;
        }
        set
        {
            if (_pageSize < 5)
            {
                _pageSize = 5;
            }
            _pageSize = value;
        }
    }

    /// <summary>
    /// How many page links there are before and after the selected page.
    /// </summary>
    [Parameter]
    public int Spread { get; set; } = 2;

    /// <summary>
    /// List where item is dragged.
    /// </summary>
    internal SelectionList<TItem>? DragSource;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// A new item has added for the list.
    /// </summary>
    [Parameter]
    public EventCallback<IEnumerable<TItem>> OnAdded { get; set; }

    /// <summary>
    /// Item has removed from the lists.
    /// </summary>
    [Parameter]
    public EventCallback<IEnumerable<TItem>> OnRemoved { get; set; }

    public List<TItem>? SourceList { get; set; }

    public TItem? Item { get; set; }

    internal async Task ItemAdded(SelectionList<TItem> target, IEnumerable<TItem> list)
    {
        await OnAdded.InvokeAsync(list);
        StateHasChanged();
    }

    internal async Task ItemRemoved(SelectionList<TItem> target, IEnumerable<TItem> list)
    {
        await OnRemoved.InvokeAsync(list);
        StateHasChanged();
    }
}
