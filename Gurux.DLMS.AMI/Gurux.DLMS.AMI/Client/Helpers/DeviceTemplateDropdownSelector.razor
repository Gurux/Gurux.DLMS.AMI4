<!--
// --------------------------------------------------------------------------
//  Gurux Ltd
//
//
//
// Filename:        $HeadURL$
//
// Version:         $Revision$,
//                  $Date$
//                  $Author$
//
// Copyright (c) Gurux Ltd
//
//---------------------------------------------------------------------------
//
//  DESCRIPTION
//
// This file is a part of Gurux Device Framework.
//
// Gurux Device Framework is Open Source software; you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2 of the License.
// Gurux Device Framework is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// This code is licensed under the GNU General Public License v2.
// Full text may be retrieved at http://www.gnu.org/licenses/gpl-2.0.txt
//---------------------------------------------------------------------------
-->

@using Gurux.DLMS.AMI.Shared.DTOs;
@using Gurux.DLMS.AMI.Shared.Enums;
@using Gurux.DLMS.AMI.Shared.Rest;
@using Gurux.DLMS.Enums;

@inject HttpClient Http
@inject IGXNotifier Notifier
<DropdownSearch Disabled="@Disabled"
                Context="item"
                ItemsProvider="GetTemplates"
@bind-Value="Value">
    <ItemContent>
        @item?.Name
    </ItemContent>
</DropdownSearch>

@code {

    /// <summary>
    /// Target device template.
    /// </summary>
    [Parameter]
    public GXDeviceTemplate? Value { get; set; }

    /// <summary>
    /// Notified when device template is updated.
    /// </summary>
    [Parameter]
    public EventCallback<GXDeviceTemplate?> ValueChanged { get; set; }

    /// <summary>
    /// Target device template filter.
    /// </summary>
    [Parameter]
    public GXDeviceTemplate? Filter { get; set; }

    /// <summary>
    /// Notified when device template filter is updated.
    /// </summary>
    [Parameter]
    public EventCallback<GXDeviceTemplate?> FilterChanged { get; set; }


    /// <summary>
    /// Is the object selector read-only.
    /// </summary>
    [Parameter]
    public bool Disabled
    {
        get;
        set;
    }

    private async ValueTask<ItemsProviderResult<GXDeviceTemplate?>> GetTemplates(GXItemsProviderRequest request)
    {
        //Don't clear status or error is lost.
        Notifier?.ProgressStart();
        try
        {
            Filter.Name = request.Filter;
            ListDeviceTemplates req = new ListDeviceTemplates()
                {
                    Index = request.StartIndex,
                    Count = request.Count,
                    Filter = Filter,
                    OrderBy = request.OrderBy,
                    Descending = request.Descending,
                    AllUsers = request.ShowAllUserData,
                };
            var ret = await Http.PostAsJson<ListDeviceTemplatesResponse>("api/DeviceTemplates/List", req, request.CancellationToken);
            //Update device for late binding.
            if (ret != null)
            {
                return new ItemsProviderResult<GXDeviceTemplate?>(ret.Templates, ret.Count);
            }
        }
        catch (TaskCanceledException)
        {
            //Let the table component handle this.
            throw;
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
        return default;
    }

    protected override void OnInitialized()
    {
        if (Filter == null)
        {
            Filter = new GXDeviceTemplate();
        }
    }
}
