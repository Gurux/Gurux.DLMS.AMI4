@namespace Gurux.DLMS.AMI.Client.Helpers.Table

@inherits ComponentBase

<th style="@CssStyle" class="@CssClass" @attributes="@AdditionalAttributes" @onclick="@SortTable">
    @ChildContent
    <span class="@(GetSortIcon())"></span>
</th>

@code 
{
    [CascadingParameter]
    private IGXTable Parent { get; set; }

    /// <summary>
    /// Gets or sets the item template for the list.
    /// </summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>
    /// Default Sort mode.
    /// </summary>
    [Parameter] 
    public SortMode SortMode { get; set; } = SortMode.None;

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public string? CssStyle { get; set; }

    [Parameter]
    public string? CssClass { get; set; } = "sort-th";

    [Parameter(CaptureUnmatchedValues = true)] 
    public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// Initialize context menu.
    /// </summary>
    protected override void OnInitialized()
    {
        if (Parent == null)
        {
            throw new ArgumentNullException(nameof(Parent), "Th must exist within a GXTable");
        }
        if (SortMode != SortMode.None)
        {
            Parent.SortMode = SortMode;
            Parent.OrderBy = Id;
        }
        base.OnInitialized();
    }

    /// <summary>
    /// Sort table with the column.
    /// </summary>
    /// <param name="column"></param>
    public void SortTable()
    {
        if (Id != Parent.OrderBy)
        {
            Parent.OrderBy = Id;
            Parent.SortMode = SortMode.Ascending;
        }
        else
        {
            Parent.SortMode = (SortMode)(((int)++Parent.SortMode) % 3);
        }
        Parent.NotifyShortChange();
    }

    public string GetSortIcon()
    {
        if (Parent.OrderBy == Id)
        {
            switch (Parent.SortMode)
            {
                case SortMode.Ascending:
                    return "fa oi oi-sort-ascending";
                case SortMode.Descending:
                    return "fa oi oi-sort-descending";
            }
        }
        return "";
    }

}