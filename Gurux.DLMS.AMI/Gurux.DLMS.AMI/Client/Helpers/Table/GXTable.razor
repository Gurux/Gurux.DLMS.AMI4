@using Gurux.DLMS.AMI.Client.Shared
@using Gurux.Common.Db
@using Gurux.DLMS.AMI.Client.Helpers.Table
@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Enums
@using Microsoft.AspNetCore.Components.Web.Virtualization

@namespace Gurux.DLMS.AMI.Client.Helpers.Table

@typeparam TItem
@implements IGXTable

@inject IGXNotifier Notifier

<CascadingValue Value="this">
    @if (Items != null)
    {
        <table class="@CssClass">
            <thead>
                @if (Filter && FilterContent != null)
                {
                    <tr>
                        @if (SelectionMode == SelectionMode.Multiple)
                        {
                            <th width="1%"></th>
                        }
                        <MenuControl>
                            <ChildContent>
                                <MenuItem Text="@Properties.Resources.Search" Icon="oi oi-magnifying-glass" OnClick="@Search" />
                            </ChildContent>
                        </MenuControl>
                        <AuthorizeView Roles=@GXRoles.ToString(GXRoles.Admin)>
                            @if (ShowRemoved)
                            {
                                <input type="checkbox"
                           @onchange="@((ChangeEventArgs __e) => Removed = @StatusTile.ToBoolean(__e.Value))" />
                                @ShowRemovedMessage
                            }
                        </AuthorizeView>
                    </tr>
                    <tr>
                        @if (SelectionMode == SelectionMode.Multiple)
                        {
                            <th width="1%"></th>
                        }
                        @FilterContent
                    </tr>
                }
                @if (HeaderContent != null)
                {
                    <tr>
                        @if (SelectionMode == SelectionMode.Multiple)
                        {
                            <th width="1%">
                                <input type="checkbox" checked="@IsAllSelected()" @onchange="@((ChangeEventArgs __e) => ToggleAllRow(Convert.ToBoolean(__e.Value)))" />
                            </th>
                        }
                        @HeaderContent
                        @if (MenuContent != null)
                        {
                            <th width="1%"></th>
                        }
                    </tr>
                }
            </thead>
            <tbody>
                @foreach (TItem it in @GetItems())
                {
                    @if (ItemContent != null)
                    {
                        <tr class=@(GetSelectedClass(it)) @onclick="@(()=>SelectRow(it))">
                            @if (SelectionMode == SelectionMode.Multiple)
                            {
                                <td>
                                    <input type="checkbox" class="table-striped" checked="@IsSelected(it)" @onchange="@((ChangeEventArgs __e) => ToggleRow(it, Convert.ToBoolean(__e.Value)))" />
                                </td>
                            }
                            @ItemContent(it)
                            @if (MenuContent != null)
                            {
                                @if (it.Equals(Active))
                                {
                                    <td>
                                        <ContextMenuController>
                                            @MenuContent
                                        </ContextMenuController>
                                    </td>
                                }
                                else
                                {
                                    <td>&nbsp;</td>
                                }
                            }
                        </tr>
                    }
                }
            </tbody>
        </table>
        <!--Add paginatation-->
        @if (Pages.Count > 1)
        {
            <ul class="pagination justify-content-center">
                <li @onclick="@(() => SelectPage(0))" style="cursor: pointer;" class="page-link" href="#">&laquo;</li>
                @foreach (int pos in Pages)
                {
                    @if (pos >= CurrentPage - Spread && pos <= CurrentPage + Spread)
                    {
                        <li onclick="@(() => SelectPage(pos))" style="cursor: pointer;" class="page-item @(CurrentPage == pos ? "active" : null)">
                            <span class="page-link" href="#">@pos</span>
                        </li>
                    }

                }
                <li @onclick="@(() => SelectPage(TotalPages))" style="cursor: pointer;" class="page-link" href="#">&raquo;</li>
            </ul>
        }
        <label>
            @Properties.Resources.Total @TotalCount
        </label>
    }
    @ChildContent
</CascadingValue>

@code {
    public delegate ValueTask<ItemsProviderResult<TREG?>> GXItemsProviderDelegate<TREG>(GXItemsProviderRequest request);


    public delegate Task SearchDelegate();

    /// <summary>
    /// User has modify the sorting.
    /// </summary>
    /// <param name="sort">Sort mode.</param>
    /// <param name="column">Sort column.</param>
    public delegate void SortChangedEventHandler(SortMode sort, string column);

    /// <summary>
    /// Are removed items shown for the admin.
    /// </summary>
    [Parameter]
    public bool ShowRemoved { get; set; } = true;

    /// <summary>
    /// All table rows are shown and paginatation is not used.
    /// </summary>
    [Parameter]
    public bool ShowAll { get; set; }

    /// <summary>
    /// Get removed items.
    /// </summary>
    public bool Removed { get; set; }

    [Parameter]
    public bool Filter { get; set; } = true;

    /// <summary>
    /// User has modify the sorting.
    /// </summary>
    [Parameter]
    public SortChangedEventHandler? SortChanged { get; set; }

    /// <summary>
    /// User has modify the sorting.
    /// </summary>
    [Parameter]
    public SearchDelegate? OnSearch { get; set; }

    /// <summary>
    /// Show removed checkbox message.
    /// </summary>
    [Parameter]
    public string ShowRemovedMessage { get; set; } = Properties.Resources.ShowRemoved;

    /// <summary>
    /// Search.
    /// </summary>
    private void Search()
    {
        if (OnSearch != null)
        {
            OnSearch();
        }
    }

    /// <summary>
    /// How many page links there are before and after the selected page.
    /// </summary>
    [Parameter]
    public int Spread { get; set; } = 2;

    private List<int> Pages = new List<int>();

    int _currentPage = 0;
    /// <summary>
    /// Focused item.
    /// </summary>
    public TItem? Active;

    /// <summary>
    /// Selected items.
    /// </summary>
    private SortedList<object, TItem> _selectedItems = new SortedList<object, TItem>();

    /// <summary>
    /// Selected items.
    /// </summary>
    public IEnumerable<TItem> SelectedItems
    {
        get
        {
            return _selectedItems.Values;
        }
    }

    /// <summary>
    /// Returns selected items or active item if there are no selected items.
    /// </summary>
    public IEnumerable<TItem> SingleOrDefault()
    {
        if (_selectedItems.Values.Any())
        {
            return _selectedItems.Values;
        }
        if (Active != null)
        {
            return new TItem[] { Active };
        }
        return new TItem[0];
    }

    /// <summary>
    /// Current page.
    /// </summary>
    [Parameter]
    public int CurrentPage
    {
        get
        {
            return _currentPage;
        }
        set
        {
            if (value < 0)
            {
                //Select the first page.
                value = 0;
            }
            else if (PageSize * value > TotalCount)
            {
                //Select the last page.
                value = TotalCount / PageSize;
            }
            _currentPage = value;
        }
    }

    int _pageSize = 10;

    /// <summary>
    /// Page size.
    /// </summary>
    public int PageSize
    {
        get
        {
            return _pageSize;
        }
        set
        {
            if (_pageSize < 10)
            {
                _pageSize = 10;
            }
            _pageSize = value;
        }
    }

    /// <summary>
    /// The total row count.
    /// </summary>
    public int TotalCount { get; private set; }

    /// The total page count.
    /// </summary>
    public int TotalPages
    {
        get
        {
            return (int)Math.Ceiling(TotalCount / (double)PageSize);
        }
    }

    /// <summary>
    /// Change pagination page.
    /// </summary>
    /// <param name="index">Page index</param>
    private async Task SelectPage(int index)
    {
        CurrentPage = index;
        await RefreshDataAsync(true);
    }

    /// <summary>
    /// Selection mode.
    /// </summary>
    [Parameter]
    public SelectionMode SelectionMode { get; set; } = SelectionMode.Single;

    private CancellationTokenSource? _cts;

    private IEnumerable<TItem>? GetItems()
    {
        if (Items != null && !string.IsNullOrEmpty(OrderBy))
        {
            if (SortMode == SortMode.Ascending)
            {
                System.Reflection.PropertyInfo? prop = typeof(TItem).GetProperty(OrderBy);
                if (prop != null)
                {
                    return Items.OrderBy(o => prop.GetValue(o, null));
                }
            }
            else if (SortMode == SortMode.Descending)
            {
                System.Reflection.PropertyInfo? prop = typeof(TItem).GetProperty(OrderBy);
                if (prop != null)
                {
                    return Items.OrderByDescending(o => prop.GetValue(o, null));
                }
            }
        }
        return Items;
    }

    public IEnumerable<TItem>? Items { get; private set; }

    /// <summary>
    /// Gets or sets the function providing items to the list.
    /// </summary>
    [Parameter]
    public GXItemsProviderDelegate<TItem>? ItemsProvider { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public string? CssClass { get; set; } = "table table-striped";

    [Parameter(CaptureUnmatchedValues = true)] public IReadOnlyDictionary<string, object>? AdditionalAttributes { get; set; }

    /// <summary>
    /// Filter content.
    /// </summary>
    [Parameter]
    public RenderFragment? FilterContent { get; set; }

    /// <summary>
    /// Menu content.
    /// </summary>
    [Parameter]
    public RenderFragment? MenuContent { get; set; }

    /// <summary>
    /// Header content.
    /// </summary>
    [Parameter]
    public RenderFragment? HeaderContent { get; set; }

    /// <summary>
    /// Gets or sets the item template for the list.
    /// </summary>
    [Parameter]
    public RenderFragment<TItem>? ChildContent { get; set; }

    /// <summary>
    /// Gets or sets the item template for the list.
    /// </summary>
    [Parameter]
    public RenderFragment<TItem>? ItemContent { get; set; }


    /// <summary>
    /// Read values async.
    /// </summary>
    /// <param name="renderOnSuccess">Is UI render after success operation.</param>
    public async Task RefreshDataAsync(bool renderOnSuccess)
    {
        _cts?.Cancel();
        _cts = new CancellationTokenSource();
        CancellationToken cancellationToken = _cts.Token;
        GXItemsProviderRequest req = new GXItemsProviderRequest(ShowAll ? 0 : CurrentPage * PageSize, ShowAll ? 0 : PageSize,
            Removed, OrderBy, SortMode == SortMode.Descending, cancellationToken);
        try
        {
            var result = await ItemsProvider(req);
            Items = result.Items;
            //Update selected items.
            List<TItem> list = new List<TItem>();
            foreach (var it in _selectedItems)
            {
                foreach (var it2 in Items)
                {
                    if (Compare(it.Value, it2))
                    {
                        list.Add(it2);
                        break;
                    }
                }
            }
            _selectedItems.Clear();
            foreach (var it in list)
            {
                object? value = it.GetType().GetProperty("Id")?.GetValue(it);
                if (value != null)
                {
                    _selectedItems.Add(value, it);
                }
            }
            //Select active item again.
            if (Active != null)
            {
                TItem active = Active;
                Active = default;
                foreach (var it in Items)
                {
                    if (Compare(Active, it))
                    {
                        Active = active;
                        break;
                    }
                }
            }

            TotalCount = result.TotalItemCount;
            Pages.Clear();
            for (int pos = 0; pos != TotalPages; ++pos)
            {
                Pages.Add(pos);
            }
            // Only apply result if the task was not canceled.
            if (!cancellationToken.IsCancellationRequested && renderOnSuccess)
            {
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            if (ex is OperationCanceledException oce && oce.CancellationToken == cancellationToken)
            {
                // Exception is ignored on cancel.
            }
            else
            {
                Notifier?.ProcessError(ex);
            }
        }
    }

    /// <summary>
    /// Sorted column.
    /// </summary>
    [Parameter]
    public string? OrderBy { get; set; }
    /// <summary>
    /// Sort mode.
    /// </summary>
    [Parameter]
    public SortMode SortMode { get; set; } = SortMode.None;

    public void NotifyShortChange()
    {
        if (SortChanged != null && !string.IsNullOrEmpty(OrderBy))
        {
            SortChanged(SortMode, OrderBy);
        }
        StateHasChanged();
    }

    protected string GetSelectedClass(TItem? active)
    {
        object? current = null, value = null;
        if (active != null)
        {
            value = active.GetType().GetProperty("Id")?.GetValue(active);
        }
        if (Active != null)
        {
            current = Active.GetType().GetProperty("Id")?.GetValue(Active);
        }
        return value != null && value.Equals(current) ? "table-info" : "table-striped";
    }

    /// <summary>
    /// User has selected the row.
    /// </summary>
    /// <param name="selected">Selected row.</param>
    protected void SelectRow(TItem selected)
    {
        Active = selected;
    }

    /// <summary>
    /// Are all rows selected.
    /// </summary>
    /// <returns>True, if all the rows are selected.</returns>
    protected string? IsAllSelected()
    {
        if (Items != null && _selectedItems.Count == Items.Count() && Items.Any())
        {
            return "checked";
        }
        return null;
    }

    /// <summary>
    /// Is row selected.
    /// </summary>
    /// <param name="selected">Selected item.</param>
    /// <returns>True, if the row is selected.</returns>
    protected string? IsSelected(TItem? selected)
    {
        bool ret = false;
        if (selected != null)
        {
            object? value = selected.GetType().GetProperty("Id")?.GetValue(selected);
            if (value != null)
            {
                ret = _selectedItems.ContainsKey(value);
            }
        }
        if (ret)
        {
            return "checked";
        }
        return null;
    }


    private static bool Compare(TItem? item1, TItem? item2)
    {
        if (item1 == null || item2 == null)
        {
            return false;
        }
        var prop = item1.GetType().GetProperty("Id");
        object? value1 = prop?.GetValue(item1);
        object? value2 = prop?.GetValue(item2);
        return value1 == null ? false : value1.Equals(value2);
    }

    /// <summary>
    /// Select or de-select all rows.
    /// </summary>
    /// <param name="selected">Selected item</param>
    protected void ToggleAllRow(bool select)
    {
        if (Items != null)
        {
            foreach (var it in Items)
            {
                object? value = it.GetType().GetProperty("Id")?.GetValue(it);
                if (value != null)
                {
                    if (!select && _selectedItems.ContainsKey(value))
                    {
                        _selectedItems.Remove(value);
                    }
                    else if (select && !_selectedItems.ContainsKey(value))
                    {
                        _selectedItems.Add(value, it);
                    }
                }
            }
        }
    }

    /// <summary>
    /// Select or de-select the row.
    /// </summary>
    /// <param name="selected">Selected item</param>
    protected void ToggleRow(TItem? selected, bool select)
    {
        if (selected != null)
        {
            object? value = selected.GetType().GetProperty("Id")?.GetValue(selected);
            if (value != null)
            {
                if (!select && _selectedItems.ContainsKey(value))
                {
                    _selectedItems.Remove(value);
                }
                else if (select && !_selectedItems.ContainsKey(value))
                {
                    _selectedItems.Add(value, selected);
                }
            }
        }
    }

    ///<summary>
    ///Read table data.
    ///</summary>
    protected override async Task OnInitializedAsync()
    {
        PageSize = Notifier.RowsPerPage;
        await RefreshDataAsync(false);
    }

    /// <inheritdoc />
    public void Dispose()
    {
        _cts?.Cancel();
    }
}