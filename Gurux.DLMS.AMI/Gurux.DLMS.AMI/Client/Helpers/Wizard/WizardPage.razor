<!--
// --------------------------------------------------------------------------
//  Gurux Ltd
//
//
//
// Filename:        $HeadURL$
//
// Version:         $Revision$,
//                  $Date$
//                  $Author$
//
// Copyright (c) Gurux Ltd
//
//---------------------------------------------------------------------------
//
//  DESCRIPTION
//
// This file is a part of Gurux Device Framework.
//
// Gurux Device Framework is Open Source software; you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2 of the License.
// Gurux Device Framework is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// This code is licensed under the GNU General Public License v2.
// Full text may be retrieved at http://www.gnu.org/licenses/gpl-2.0.txt
//---------------------------------------------------------------------------
-->

@namespace Gurux.DLMS.AMI.Components.Wizard
@using System.Diagnostics

<div style="position: relative; width: 100%; ">
    @if (Parent?.ActivePage == this)
    {
        @ChildContent
    }
</div>

@code {
    [CascadingParameter]
    private WizardControl? Parent { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    ///<summary>
    ///Wizard page name.
    ///</summary>
    [Parameter]
    public string? Name { get; set; }

    ///<summary>
    ///Wizard page description.
    ///</summary>
    [Parameter]
    public string? Description { get; set; }

    ///<summary>
    ///Icon class
    ///</summary>
    [Parameter]
    public string? Icon { get; set; }

    ///<summary>
    ///Icon ligature.
    ///</summary>
    [Parameter]
    public string? IconLigature { get; set; }

    ///<summary>
    ///Wizard page link.
    ///</summary>
    [Parameter]
    public string? Link { get; set; }

    protected override void OnInitialized()
    {
        if (Parent == null)
        {
            throw new ArgumentNullException(nameof(Parent), "WizardPage must exist within a WizardControl");
        }
        base.OnInitialized();
        Parent.AddPage(this);
    }
}