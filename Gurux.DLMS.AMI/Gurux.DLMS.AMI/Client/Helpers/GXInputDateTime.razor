<!--
// --------------------------------------------------------------------------
//  Gurux Ltd
//
//
//
// Filename:        $HeadURL$
//
// Version:         $Revision$,
//                  $Date$
//                  $Author$
//
// Copyright (c) Gurux Ltd
//
//---------------------------------------------------------------------------
//
//  DESCRIPTION
//
// This file is a part of Gurux Device Framework.
//
// Gurux Device Framework is Open Source software; you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2 of the License.
// Gurux Device Framework is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// This code is licensed under the GNU General Public License v2.
// Full text may be retrieved at http://www.gnu.org/licenses/gpl-2.0.txt
//---------------------------------------------------------------------------
-->
@using System.Diagnostics.CodeAnalysis
@using System.Globalization;
@using Gurux.DLMS

@inherits InputBase<GXDateTime>

<input class="@CssClass"
       @attributes="AdditionalAttributes"
       value="@BindConverter.FormatValue(CurrentValueAsString)"
       onchange="@((ChangeEventArgs __e) => CurrentValueAsString = Convert.ToString(__e.Value))" />
@code {
    protected override string FormatValueAsString(GXDateTime value)
    {
        return value.ToFormatString();
    }

    protected override bool TryParseValueFromString(string? value,
    [MaybeNullWhen(false)] out GXDateTime result,
        [NotNullWhen(false)] out string validationErrorMessage)
    {
        validationErrorMessage = "";
        if (value != null)
        {
            try
            {
                result = new GXDateTime(value);
            }
            catch (Exception ex)
            {
                result = new GXDateTime();
                validationErrorMessage = ex.Message;
                return false;
            }
        }
        else
        {
            result = new GXDateTime();
        }
        return true;
    }
}