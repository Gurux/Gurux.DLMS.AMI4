<!--
// --------------------------------------------------------------------------
//  Gurux Ltd
//
//
//
// Filename:        $HeadURL$
//
// Version:         $Revision$,
//                  $Date$
//                  $Author$
//
// Copyright (c) Gurux Ltd
//
//---------------------------------------------------------------------------
//
//  DESCRIPTION
//
// This file is a part of Gurux Device Framework.
//
// Gurux Device Framework is Open Source software; you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2 of the License.
// Gurux Device Framework is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// This code is licensed under the GNU General Public License v2.
// Full text may be retrieved at http://www.gnu.org/licenses/gpl-2.0.txt
//---------------------------------------------------------------------------
-->

@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.Rest
@inject HttpClient Http
@inherits ErrorBoundary
@ChildContent

@code
{
    protected override async Task OnErrorAsync(Exception exception)
    {
        try
        {
            GXUserError ue = new GXUserError(System.Diagnostics.TraceLevel.Error);
            ue.Message = exception.Message;
            ue.StackTrace = exception.StackTrace;
            AddUserError req = new AddUserError();
            req.Errors = new GXUserError[] { ue };
            await Http.PostAsJson<AddUserErrorResponse>("api/UserError/Add", req);
        }
        catch (Exception ex)
        {
            //It's OK if this fails.
        }
        await base.OnErrorAsync(exception);
    }

    public new void Recover()
    {
        base.Recover();
    }
}