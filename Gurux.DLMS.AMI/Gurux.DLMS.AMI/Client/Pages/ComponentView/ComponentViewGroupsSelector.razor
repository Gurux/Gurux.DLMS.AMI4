@using Gurux.DLMS.AMI.Client.Pages.User;
@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq

@attribute [Authorize(Roles = "Admin, ComponentViewGroup, ComponentViewGroupManager, UserGroup")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier

<SelectionContainer GetName="GetName" GetDescription="GetDescription">
    <SelectionList Title="Selected" ItemList="componentViewGroups" />
    <SelectionList Title="Available" ItemList="allComponentViewGroups" />
</SelectionContainer>

@code {
    [CascadingParameter]
    private UserGroupTab? UserGroupParent { get; set; }
    [CascadingParameter]
    private ComponentViewTab? ComponentViewParent { get; set; }

    List<GXComponentViewGroup> allComponentViewGroups = new List<GXComponentViewGroup>();
    List<GXComponentViewGroup> componentViewGroups = new List<GXComponentViewGroup>();


    public void OnUpdated(object target)
    {

    }

    public string GetName(object target)
    {
        return (target as GXComponentViewGroup).Name;
    }
    public string GetDescription(object target)
    {
        return (target as GXComponentViewGroup).Name;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            ListComponentViewGroups req = new ListComponentViewGroups()
                {
                    Filter = new GXComponentViewGroup()
                };
            if (UserGroupParent?.Active?.ComponentViewGroups != null)
            {
                //Add selected component view.
                componentViewGroups = UserGroupParent.Active.ComponentViewGroups;
            }
            else if (ComponentViewParent?.Active?.ComponentViewGroups != null)
            {
                //Add selected component view.
                componentViewGroups = ComponentViewParent.Active.ComponentViewGroups;
            }
            else
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            bool addDefaultBlocks = Notifier.Action == CrudAction.Create && !componentViewGroups.Any();
            var ret = await Http.PostAsJson<ListComponentViewGroupsResponse>("api/ComponentViewGroup/List", req);
            foreach (GXComponentViewGroup it in ret.ComponentViewGroups)
            {
                //Add default groups when new workflow is created.
                if (addDefaultBlocks && it.Default.GetValueOrDefault(false) &&
                    !componentViewGroups.Where(q => q.Id == it.Id).Any())
                {
                    componentViewGroups.Add(it);
                }
                if (!componentViewGroups.Exists(q => q.Id == it.Id))
                {
                    allComponentViewGroups.Add(it);
                }
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}

