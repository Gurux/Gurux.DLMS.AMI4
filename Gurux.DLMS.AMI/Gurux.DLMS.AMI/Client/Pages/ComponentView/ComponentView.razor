@page "/componentview"
@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.Rest
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Module
@using System.Globalization
@using Gurux.DLMS.AMI.Shared.DTOs.Enums
@using System.Text.Json

@attribute [Authorize(Roles = GXRoles.Admin + "," + GXRoles.ComponentViewManager)]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier

<EditForm Model="@_active">
    <div class="row">
        <div style="width:100%">
            <div class="form-group">
                <label>@Properties.Resources.Title</label>
                <InputText id="title" disabled="disabled" @bind-Value="_active.ClassName" class="form-control" />
            </div>
            <div class="form-group">
                <label>@Properties.Resources.Description</label>
                <InputText id="description" disabled="disabled" @bind-Value="_active.Name" class="form-control" />
            </div>
        </div>
    </div>
</EditForm>
@code {
    private object? Target = null;

    private GXComponentView? _active;
    private string SubmitText;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            //Get selected item.
            _active = (GXComponentView?)Notifier.GetData(GXPages.ComponentViews);
            if (_active == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            switch (Notifier.Action)
            {
                case CrudAction.Create:
                    SubmitText = Properties.Resources.Add;
                    break;
                case CrudAction.Update:
                    SubmitText = Properties.Resources.Edit;
                    break;
                case CrudAction.Delete:
                    SubmitText = Properties.Resources.Remove;
                    break;
                default:
                    NavigationManager.NavigateTo(Notifier.GetLastPage());
                    return;
            }
            Notifier.Clear();
            if (Notifier.Action == CrudAction.Delete)
            {
                Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Remove, Icon = "oi oi-trash", OnClick = OnSave });
            }
            else
            {
                Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Save, Icon = "oi oi-pencil", OnClick = OnSave });
            }
            Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Cancel, Icon = "oi oi-action-undo", OnClick = OnCancel });
            Notifier.UpdateButtons();
            Notifier.ChangePage(GXPages.ComponentView, _active);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    /// <summary>
    /// Save componentView.
    /// </summary>
    public async void OnSave()
    {
        try
        {
            Notifier?.ProgressStart();
            Notifier?.ClearStatus();
            if (Notifier.Action == CrudAction.Delete)
            {
                await Http.PostAsJson<RemoveComponentViewResponse>("api/ComponentView/Delete", new RemoveComponentView() { Ids = new Guid[] { _active.Id } });
            }
            else
            {
                string address;
                if (Notifier.Action == CrudAction.Create)
                {
                    address = "api/ComponentView/Add";
                }
                else
                {
                    address = "api/ComponentView/Update";
                }
                await Http.PostAsJson<UpdateComponentViewResponse>(address, new UpdateComponentView() { ComponentViews = new List<GXComponentView>() { _active } });
            }
            Notifier.RemoveLastPage();
            NavigationManager.NavigateTo(Notifier.GetLastPage());
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    /// <summary>
    /// Cancel update.
    /// </summary>
    private void OnCancel()
    {
        Notifier.RemoveLastPage();
        NavigationManager.NavigateTo(Notifier.GetLastPage());
    }
}

