@using Gurux.DLMS.AMI.Script
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.Rest
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Module
@using System.Globalization
@using System.Text
@using System.Text.Json
@using Gurux.DLMS.AMI.Script.Pages
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging
@using System.Text.Encodings.Web
@using System.Text.Unicode

@namespace Gurux.DLMS.AMI.Client.Pages.Config

@attribute [Authorize(Roles = GXRoles.Admin)]
@inject NavigationManager NavigationManager
@implements IDisposable
@inject HttpClient Http
@inject IGXNotifier Notifier
@implements IGXConfigUpdate

@if (_settings != null)
{
    <EditForm Model="@_settings">
        <div class="row">
            <div style="width:100%">
                <div class="form-group">
                    <InputSwitch Text="Site is in maintenance mode" id="maintenanceMode" @bind-Value="_settings.MaintenanceMode" />
                    <p>
                        When enabled, only admin users are able to access site to perform maintenance;<br />
                        all other visitors see the maintenance mode message configured below.<br />
                        Authorized users can log in directly via the user login page.
                    </p>
                </div>
                @if (_settings != null && Parent?.Active != null)
                {
                    <MaintenanceLocalizer @ref="MaintenanceLocalizer" Configuration="Parent.Active" Settings="_settings"></MaintenanceLocalizer>
                }
            </div>
        </div>
    </EditForm>
}

@code {
    /// <summary>
    /// Parent component.
    /// </summary>
    [Parameter]
    public Gurux.DLMS.AMI.Client.Pages.Config.Configurations? Parent { get; set; }

    MaintenanceSettings? _settings;

    /// <inheritdoc/>
    public void Update()
    {
        if (!string.IsNullOrEmpty(Parent?.Active?.Settings))
        {
            _settings = JsonSerializer.Deserialize<MaintenanceSettings>(Parent.Active.Settings);
            if (!string.IsNullOrEmpty(_settings?.Message))
            {
                _settings.Message = ((MarkupString)_settings.Message).ToString();
            }
        }
        StateHasChanged();
    }

    MaintenanceLocalizer? MaintenanceLocalizer;

    protected override void OnInitialized()
    {
        if (Notifier == null)
        {
            throw new ArgumentException(Properties.Resources.InvalidNotifier);
        }
        Notifier.ProgressStart();
        Notifier.ClearStatus();
        try
        {
            Notifier.On<IEnumerable<GXConfiguration>>(this, nameof(IGXHubEvents.ConfigurationSave), (configurations) =>
            {
                if (configurations != null)
                {
                    foreach (var it in configurations)
                    {
                        if (it.Name == GXConfigurations.Maintenance && !string.IsNullOrEmpty(it.Settings))
                        {
                            _settings = JsonSerializer.Deserialize<MaintenanceSettings>(it.Settings);
                            StateHasChanged();
                            break;
                        }
                    }
                }
            });
            Notifier.Clear();
            Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Save, Icon = "oi oi-pencil", OnClick = OnSave });
            Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Cancel, Icon = "oi oi-action-undo", OnClick = OnCancel });
            Notifier.UpdateButtons();
            if (string.IsNullOrEmpty(Parent?.Active?.Settings))
            {
                _settings = new MaintenanceSettings();
            }
            else
            {
                _settings = JsonSerializer.Deserialize<MaintenanceSettings>(Parent.Active.Settings);
                if (!string.IsNullOrEmpty(_settings?.Message))
                {
                    _settings.Message = ((MarkupString)_settings.Message).ToString();
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    /// <summary>
    /// Save values.
    /// </summary>
    private async void OnSave()
    {
        try
        {
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            if (Parent?.Active == null)
            {
                throw new Exception(Properties.Resources.InvalidTarget);
            }
            //This is needed to serialize special chars.
            var options = new JsonSerializerOptions
                {
                    Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping,
                    WriteIndented = true
                };
            Parent.Active.Languages = MaintenanceLocalizer.GetLocalizedTexts();
            Parent.Active.Settings = JsonSerializer.Serialize(_settings, options);
            ConfigurationUpdate arg = new ConfigurationUpdate();
            arg.Configurations = new GXConfiguration[] { Parent.Active };
            await Http.PostAsJson("api/Configuration/Update", arg);
            ClientHelpers.NavigateToLastPage(NavigationManager, Notifier);
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    /// <summary>
    /// Run the cron.
    /// </summary>
    public async void OnRun()
    {
        Notifier?.ProgressStart();
        Notifier?.ClearStatus();
        try
        {
            ConfigurationRunCron req = new ConfigurationRunCron();
            await Http.PostAsJson<ConfigurationRunCronResponse>("api/Configuration/Cron", req);
            Notifier?.ShowInformation("Cron started.");
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    /// <summary>
    /// Cancel update.
    ///</summary>
    private void OnCancel()
    {
        ClientHelpers.NavigateToLastPage(NavigationManager, Notifier);
    }

    public void Dispose()
    {
        Notifier.RemoveListener(this);
    }
}
