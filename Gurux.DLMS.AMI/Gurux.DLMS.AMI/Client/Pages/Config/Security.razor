@using Gurux.DLMS.AMI.Script
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.Rest
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Module
@using System.Globalization
@using System.Text
@using System.Text.Json
@using Gurux.DLMS.AMI.Script.Pages
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging

@namespace Gurux.DLMS.AMI.Client.Pages.Config

@attribute [Authorize(Roles = GXRoles.Admin)]
@inject NavigationManager NavigationManager
@implements IDisposable
@implements IGXConfigUpdate

@inject HttpClient Http
@inject IGXNotifier Notifier

@if (_settings != null)
{
    <EditForm Model="@_settings">
        <p>
            <h2>Password</h2>
            <div class="row">
                <div style="width:100%">
                    <div class="form-group">
                        <label>Required length</label>
                        <InputNumber id="resend" class="form-control"
                                 @bind-Value="_settings.RequiredLength" />
                    </div>
                    <div class="form-group">
                        <label>Required unique chars</label>
                        <InputNumber id="requiredUniqueChars" class="form-control"
                                 @bind-Value="_settings.RequiredUniqueChars" />
                    </div>
                    <div class="form-group">
                        <InputCheckbox id="requireNonAlphanumeric" @bind-Value="_settings.RequireNonAlphanumeric" />
                        <label>Require non alphanumeric:</label>
                    </div>
                    <div class="form-group">
                        <InputCheckbox id="requireLowercase" @bind-Value="_settings.RequireLowercase" />
                        <label>Require lowercase:</label>
                    </div>
                    <div class="form-group">
                        <InputCheckbox id="requireUppercase" @bind-Value="_settings.RequireUppercase" />
                        <label>Require uppercase:</label>
                    </div>
                    <div class="form-group">
                        <InputCheckbox id="requireDigit" @bind-Value="_settings.RequireDigit" />
                        <label>Require digit:</label>
                    </div>
                </div>
            </div>
        </p>
        <hr />
        <p>
            <h2>User</h2>
            <div class="row">
                <div style="width:100%">
                    <div class="form-group">
                        <label>Allowed user name characters</label>
                        <InputText id="allowedUserNameCharacters" class="form-control"
                               @bind-Value="_settings.AllowedUserNameCharacters" />
                    </div>
                    <div class="form-group">
                        <InputCheckbox id="requireUniqueEmail" @bind-Value="_settings.RequireUniqueEmail" />
                        <label>Require unique email:</label>
                    </div>
                </div>
            </div>
        </p>
        <hr />
        <p>
            <h2>SignIn</h2>
            <div class="row">
                <div style="width:100%">
                    <div class="form-group">
                        <InputCheckbox id="requireConfirmedEmail" @bind-Value="_settings.RequireConfirmedEmail" />
                        <label>Require confirmed email:</label>
                    </div>
                    <div class="form-group">
                        <InputCheckbox id="requireConfirmedPhoneNumber" @bind-Value="_settings.RequireConfirmedPhoneNumber" />
                        <label>Require confirmed phone number:</label>
                    </div>
                    <div class="form-group">
                        <InputCheckbox id="requireConfirmedAccount" @bind-Value="_settings.RequireConfirmedAccount" />
                        <label>Require confirmed account:</label>
                    </div>
                </div>
            </div>
        </p>
        <hr />
        <p>
            <h2>Lockout</h2>
            <div class="row">
                <div style="width:100%">
                    <div class="form-group">
                        <InputCheckbox id="allowedForNewUsers" @bind-Value="_settings.AllowedForNewUsers" />
                        <label>Allowed for new users:</label>
                    </div>
                    <div class="form-group">
                        <label>Maximum failed access attempts</label>
                        <InputNumber id="maxFailedAccessAttempts" class="form-control"
                                 @bind-Value="_settings.MaxFailedAccessAttempts" />
                    </div>
                    <div class="form-group">
                        <label>Default lockout timespan in minutes</label>
                        <InputDate Type="@InputDateType.Time" id="defaultLockoutTimeSpan" class="form-control"
                               @bind-Value="DefaultLockoutTimeSpan" />
                    </div>
                </div>
            </div>
        </p>
    </EditForm>
}

@code {

    /// <inheritdoc/>
    public void Update()
    {
        if (!string.IsNullOrEmpty(Parent?.Active?.Settings))
        {
            _settings = JsonSerializer.Deserialize<SecuritySettings>(Parent.Active.Settings);
        }
        StateHasChanged();
    }

    /// <summary>
    /// Parent component.
    /// </summary>
    [Parameter]
    public Gurux.DLMS.AMI.Client.Pages.Config.Configurations? Parent { get; set; }

    DateTime DefaultLockoutTimeSpan
    {
        get
        {
            return new DateTime(_settings.DefaultLockoutTimeSpan.Ticks);
        }
        set
        {
            _settings.DefaultLockoutTimeSpan = value.TimeOfDay;
        }
    }
    SecuritySettings? _settings;

    protected override void OnInitialized()
    {
        try
        {
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            Notifier.On<IEnumerable<GXConfiguration>>(this, nameof(IGXHubEvents.ConfigurationSave), async (configurations) =>
            {
                if (configurations != null)
                {
                    foreach (var it in configurations)
                    {
                        if (it.Name == GXConfigurations.Security && !string.IsNullOrEmpty(it.Settings))
                        {
                            _settings = JsonSerializer.Deserialize<SecuritySettings>(it.Settings);
                            StateHasChanged();
                            break;
                        }
                    }
                }
            });
            Notifier.Clear();
            Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Save, Icon = "oi oi-pencil", OnClick = OnSave });
            Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Cancel, Icon = "oi oi-action-undo", OnClick = OnCancel });
            Notifier.UpdateButtons();
            if (!string.IsNullOrEmpty(Parent?.Active?.Settings))
            {
                _settings = JsonSerializer.Deserialize<SecuritySettings>(Parent.Active.Settings);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    /// <summary>
    /// Save values.
    /// </summary>
    private async void OnSave()
    {
        try
        {
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            if (Parent?.Active == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            Parent.Active.Settings = JsonSerializer.Serialize(_settings);
            ConfigurationUpdate arg = new ConfigurationUpdate();
            arg.Configurations = new GXConfiguration[] { Parent.Active };
            await Http.PostAsJson("api/Configuration/Update", arg);
            ClientHelpers.NavigateToLastPage(NavigationManager, Notifier);
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    /// <summary>
    /// Cancel update.
    ///</summary>
    private void OnCancel()
    {
        ClientHelpers.NavigateToLastPage(NavigationManager, Notifier);
    }

    public void Dispose()
    {
        Notifier.RemoveListener(this);
    }
}
