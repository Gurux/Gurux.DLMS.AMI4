@page "/config/performance"
@using Gurux.DLMS.AMI.Script
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.Rest
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Module
@using System.Globalization
@using System.Text
@using System.Text.Json
@using Gurux.DLMS.AMI.Script.Pages
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging

@attribute [Authorize(Roles = GXRoles.Admin)]
@inject NavigationManager NavigationManager
@implements IDisposable
@inject HttpClient Http
@inject IGXNotifier Notifier

@if (_settings != null)
{
    <h2>Client notifications</h2>
    <input type="search" value="@SearchText"
       @oninput="@Search" placeholder="Search by type" />
    <EditForm Model="@_settings">
        <table class="table table-striped" width="100%">
            <thead>
                <tr>
                    <th>
                        <Tooltip Title="@ToolTip">
                            <input type="checkbox" @onchange="@((ChangeEventArgs __e) => ToggleAll(Convert.ToBoolean(__e.Value)))" />
                            </Tooltip>
                    </th>
                    <th>@Properties.Resources.Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var it in Notifications)
                {
                    <tr class=@(GetSelectedClass(it)) @onclick="@(()=>RowSelected(it))">
                        <td>
                            <input type="checkbox" checked="@GetIgnoredState(@it)" @onchange="@((ChangeEventArgs __e) => UpdateIgnoredState(@it, __e.Value))" />
                        </td>
                        <td>
                            @it
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </EditForm>
}

@code {

    protected string ToolTip
    {
        get
        {
            return _allSelected ? "Disable all notifications" : "Enable all notifications.";
        }
    }


    protected string GetSelectedClass(TargetType selected)
    {
        return selected == _active ? "table-info" : "table-striped";
    }

    protected void RowSelected(TargetType selected)
    {
        _active = selected;
    }
    private TargetType _active = TargetType.None;
    private GXConfiguration? _configuration;
    private string SubmitText = "";
    private string SearchText = "";
    PerformanceSettings? _settings;
    private bool _allSelected = false;

    IEnumerable<TargetType> Notifications = ClientHelpers.GetNotifications();

    private void ToggleAll(bool select)
    {
        _allSelected = select;
        if (_settings != null)
        {
            if (select)
            {
                foreach (var it in Notifications)
                {
                    _settings.IgnoreNotification &= ~it;
                }
            }
            else
            {
                foreach (var it in Notifications)
                {
                    _settings.IgnoreNotification |= it;
                }
            }
        }
    }

    /// <summary>
    /// Search from notifications.
    /// </summary>
    private void Search(ChangeEventArgs args)
    {
        String? value = Convert.ToString(args.Value);
        Notifications = ClientHelpers.GetNotifications();
        if (!string.IsNullOrEmpty(value))
        {
            value = value.ToLower();
            List<TargetType> tmp = new List<TargetType>();
            foreach (var it in Notifications)
            {
                if (it.ToString().ToLower().Contains(value))
                {
                    tmp.Add(it);
                }
            }
            Notifications = tmp;
        }
        StateHasChanged();
    }

    private bool GetIgnoredState(TargetType value)
    {
        return _settings != null && (_settings.IgnoreNotification & value) == 0;
    }

    private void UpdateIgnoredState(TargetType value, object? ignored)
    {
        if (_settings != null)
        {
            if (Convert.ToBoolean(ignored))
            {
                _settings.IgnoreNotification &= ~value;
            }
            else
            {
                _settings.IgnoreNotification |= value;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            //Get selected item.
            _configuration = (GXConfiguration?)Notifier.GetData(GXPages.Configurations);
            if (_configuration == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            Notifier.On<IEnumerable<GXConfiguration>>(this, nameof(IGXHubEvents.ConfigurationSave), (configurations) =>
            {
                if (configurations != null)
                {
                    foreach (var it in configurations)
                    {
                        if (it.Name == GXConfigurations.Performance)
                        {
                            _settings = JsonSerializer.Deserialize<PerformanceSettings>(it.Settings);
                            StateHasChanged();
                            break;
                        }
                    }
                }
            });
            Notifier.Clear();
            Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Save, Icon = "oi oi-pencil", OnClick = OnSave });
            Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Cancel, Icon = "oi oi-action-undo", OnClick = OnCancel });
            Notifier.UpdateButtons();
            switch (Notifier.Action)
            {
                case CrudAction.Update:
                    break;
                default:
                    ClientHelpers.NavigateTo(NavigationManager, Notifier, "/configurations");
                    return;
            }
            //Get configuration data.
            _configuration = (await Http.GetAsJsonAsync<GetConfigurationResponse>(string.Format("api/Configuration?id={0}", _configuration.Id))).Item;
            _settings = JsonSerializer.Deserialize<PerformanceSettings>(_configuration.Settings);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    /// <summary>
    /// Save values.
    /// </summary>
    private async void OnSave()
    {
        Notifier?.ProgressStart();
        Notifier?.ClearStatus();
        try
        {
            _configuration.Settings = JsonSerializer.Serialize(_settings);
            ConfigurationUpdate arg = new ConfigurationUpdate();
            arg.Configurations = new GXConfiguration[] { _configuration };
            await Http.PostAsJson("api/Configuration/Update", arg);
            ClientHelpers.NavigateTo(NavigationManager, Notifier, "/Config");
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    /// <summary>
    /// Cancel update.
    ///</summary>
    private void OnCancel()
    {
        ClientHelpers.NavigateTo(NavigationManager, Notifier, "/Config");
    }

    public void Dispose()
    {
        Notifier.RemoveListener(this);
    }
}
