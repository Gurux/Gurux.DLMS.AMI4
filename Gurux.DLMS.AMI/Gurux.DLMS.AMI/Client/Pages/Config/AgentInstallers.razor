@page "/config/agentinstallers"
@using Gurux.DLMS.AMI.Client.Helpers.ContextMenu
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Models
@using Gurux.DLMS.AMI.Shared.DTOs.Enums
@using Gurux.DLMS.AMI.Shared.Enums
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module

@attribute [Authorize(Roles = "Admin, AgentManager")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier
@inject ConfirmBase Confirm
@inject IAccessTokenProvider AccessTokenProvider
@implements IDisposable
@implements IGXComponentView

@if (Filter)
{
    <MenuControl>
        <ChildContent>
            <MenuItem Text="@Properties.Resources.Search" Icon="oi oi-magnifying-glass" OnClick="@(async () => Updated())" />
        </ChildContent>
    </MenuControl>
}
<table class="table table-striped">
    <thead>
        @if (Filter && filter.Versions != null)
        {
            <tr>
                <th>
                    <input class="form-control" type="text" placeholder="Filter by version number..."
                       @onchange="@((ChangeEventArgs __e) => filter.Versions[0].Number = Convert.ToString(__e.Value))" />
                </th>
            </tr>
        }
        <tr>
            <th>@Properties.Resources.Name</th>
            <th width="1%"></th>
        </tr>
    </thead>
    <tbody>
        <Virtualize @ref="virtualize" Context="agent" ItemsProvider="@GetItems">
            <ItemContent>
                <tr class=@(GetSelectedClass(agent)) @onclick="@(()=>RowSelected(agent))">
                    <td>@agent.Name</td>
                    @if (_active == agent)
                    {
                        <td>
                            <ContextMenuController>
                                <ChildContent>
                                    <ContextMenuItem Text="@Properties.Resources.Remove" Icon="oi oi-trash" OnClick="async () => OnRemove()"></ContextMenuItem>
                                </ChildContent>
                            </ContextMenuController>
                        </td>
                    }
                    else
                    {
                        <td>&nbsp;&nbsp;&nbsp;</td>
                    }
                </tr>
                <tr style="width:100%">
                    <table class="table table-striped" style="width:100%">
                        <thead>
                            <tr style="width:100%">
                                <th style="display:table-cell; width:40%">@Properties.Resources.Version</th>
                                <th style="display:table-cell; width:59%">@Properties.Resources.CreationTime</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var it in agent.Versions)
                            {
                                <tr>
                                    <td>@it.Number</td>
                                    <td>@it.CreationTime</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <hr />
                </tr>
            </ItemContent>
            <Placeholder>
                <p>
                    @Properties.Resources.Loading&hellip;
                </p>
            </Placeholder>
        </Virtualize>
    </tbody>
</table>
<br />
@if (_active != null)
{
    <Confirm @ref="DeleteConfirmation" ConfirmationChanged="OnDeleteConfirmation"
         ConfirmationMessage=@($"Are you sure you want to delete \"{_active.Name}\"?")>
    </Confirm>
}

@code {
    /// <inheritdoc />
    public string Name
    {
        get
        {
            return "Agent Installers";
        }
    }

    /// <inheritdoc />
    public Type? ConfigurationUI
    {
        get
        {
            return null;
        }
    }

    /// <inheritdoc cref="IGXComponentView.Icon">
    public string? Icon
    {
        get
        {
            return "oi oi-wifi";
        }
    }

    /// <summary>
    /// Amount of the devices shown on the view.
    /// </summary>
    [Parameter]
    public int Count { get; set; } = 0;

    /// <summary>
    /// Is filter shown.
    /// </summary>
    [Parameter]
    public bool Filter { get; set; } = true;

    /// <summary>
    /// Is title shown.
    /// </summary>
    [Parameter]
    public bool Title { get; set; } = true;

    internal int Total
    {
        get;
        private set;
    }


    private string? GetVersion(string? version)
    {
        if (version == null)
        {
            return Properties.Resources.CustomBuild;
        }
        return version;
    }

    private GXAgent[]? agents = null;
    private GXAgent filter = new GXAgent(null);
    //Verify that agant can be removed.
    protected ConfirmBase DeleteConfirmation;
    //Verify that agent can be updated.
    protected ConfirmBase UpdateConfirmation;
    //Verify that all agent can be updated.
    protected ConfirmBase UpdatesConfirmation;

    protected Virtualize<GXAgent>? virtualize;
    private GXAgent? _active;

    protected string GetSelectedClass(GXAgent agent)
    {
        return _active != null && agent.Id == _active.Id ? "table-info" : "table-striped";
    }

    protected async void Updated()
    {
        if (virtualize != null)
        {
            Notifier?.ClearStatus();
            await virtualize.RefreshDataAsync();
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            filter.Versions.Add(new GXAgentVersion());
            Notifier.On<IEnumerable<GXAgent>>(this, nameof(IGXHubEvents.AgentUpdate), (agents) =>
            {
                Updated();
            });
            Notifier.On<IEnumerable<GXAgent>>(this, nameof(IGXHubEvents.AgentDelete), (agents) =>
            {
                Updated();
            });
            Notifier.Clear();
            Notifier.UpdateButtons();
            Notifier.ChangePage(GXPages.Agents, _active);
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    private async ValueTask<ItemsProviderResult<GXAgent>> GetItems(ItemsProviderRequest request)
    {
        agents = null;
        //Don't clear status or error is lost.
        Notifier?.ProgressStart();
        try
        {
            ListAgents req = new ListAgents() { Index = request.StartIndex, Count = request.Count, Filter = filter };
            if (Count != 0)
            {
                req.Count = Count;
            }
            var ret = await Http.PostAsJson<ListAgentsResponse>("api/Agent/Installers", req, request.CancellationToken);
            agents = ret.Agents;
            Total = ret.Count;
            //Get only selected amount of the devices.
            if (Count != 0)
            {
                ret.Count = Count;
            }
            ItemsProviderResult<GXAgent> value = new ItemsProviderResult<GXAgent>(ret.Agents, ret.Count);
            return value;
        }
        catch (TaskCanceledException)
        {
            //Let the Virtualize component handle this
            throw;
        }
        catch (OperationCanceledException)
        {
            //Might happen when the user scrolls the list rapidly.
        }
        catch (ObjectDisposedException)
        {
            //Might happen when the user scrolls the list rapidly.
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
        return default;
    }

    /// <summary>
    /// Delete selected agent.
    /// </summary>

    public void OnRemove()
    {
        try
        {
            DeleteConfirmation.Show();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    /// <summary>
    /// Remove the agent.
    /// </summary>
    public async Task OnDeleteConfirmation(bool confirm)
    {
        try
        {
            if (confirm)
            {
                await Http.PostAsJson<RemoveAgentResponse>("api/Agent/Delete",
                    new RemoveAgent() { Ids = new Guid[] { _active.Id } });
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public void RowSelected(GXAgent selected)
    {
        _active = selected;
        Notifier.UpdateData(GXPages.Agents, _active);
    }

    public void Dispose()
    {
        Notifier.RemoveLastPage(GXPages.Agents);
        Notifier.RemoveListener(this);
    }
}
