<!--
// --------------------------------------------------------------------------
//  Gurux Ltd
//
//
//
// Filename:        $HeadURL$
//
// Version:         $Revision$,
//                  $Date$
//                  $Author$
//
// Copyright (c) Gurux Ltd
//
//---------------------------------------------------------------------------
//
//  DESCRIPTION
//
// This file is a part of Gurux Device Framework.
//
// Gurux Device Framework is Open Source software; you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2 of the License.
// Gurux Device Framework is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// This code is licensed under the GNU General Public License v2.
// Full text may be retrieved at http://www.gnu.org/licenses/gpl-2.0.txt
//---------------------------------------------------------------------------
-->

@page "/activeSystemLogs"
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Module
@using System.Diagnostics

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IGXNotifier Notifier
@implements IAmiComponent
@implements IDisposable

@attribute [Authorize(Roles = "Admin, SystemLogManager")]

@if (ActiveErrors != null)
{
    @foreach (var it in ActiveErrors)
    {
        <StatusTile Title="@GetErrorTitle(@it.Level)" OnClose="@OnClose" Target="@it" Mode="@GetTraceLevel(it)">
            @it.Message
        </StatusTile>
    }
}
<CascadingValue Value=this>
    @ChildContent
</CascadingValue>
@code {

    /// <summary>
    /// Amount of the errors shown on the view.
    /// </summary>
    [Parameter]
    public int Count { get; set; } = 5;

    TraceLevel GetTraceLevel(GXSystemLog item)
    {
        return (TraceLevel)item.Level.GetValueOrDefault();
    }

    string GetErrorTitle(int? level)
    {
        return ((TraceLevel)level.GetValueOrDefault()).ToString();
    }

    /// <inheritdoc />
    public string Name
    {
        get
        {
            return "Active system errors";
        }
    }

    /// <inheritdoc />
    public Type? ConfigurationUI
    {
        get
        {
            return null;
        }
    }

    /// <inheritdoc />
    public string? Icon
    {
        get
        {
            return "oi oi-warning";
        }
    }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    GXSystemLog[] ActiveErrors = null;

    /// <summary>
    /// Update virtualized items.
    /// </summary>
    protected async Task Updated()
    {
        try
        {
            Notifier?.ClearStatus();
            ActiveErrors = null;
            await GetActiveErrors();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            Notifier.On(this, nameof(IGXHubEvents.ClearSystemLogs), async () =>
            {
                await Updated();
            });
            Notifier.On<IEnumerable<GXSystemLog>>(this, nameof(IGXHubEvents.AddSystemLogs), async (errors) =>
            {
                await Updated();
            });
            Notifier.On<IEnumerable<GXSystemLog>>(this, nameof(IGXHubEvents.CloseSystemLogs), async (errors) =>
            {
                await Updated();
            });
            await GetActiveErrors();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    /// <summary>
    /// Get active errors.
    /// </summary>
    private async Task GetActiveErrors()
    {
        try
        {
            Notifier?.ProgressStart();
            Notifier?.ClearStatus();
            GXSystemLog filter = new GXSystemLog();
            ListSystemLogs req = new ListSystemLogs() { Filter = filter };
            req.Count = Count;
            ListSystemLogsResponse ret = await Http.PostAsJson<ListSystemLogsResponse>("api/SystemLog/List", req);
            ActiveErrors = ret.Errors;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    public void Dispose()
    {
        Notifier.RemoveListener(this);
    }

    /// <summary>
    /// Close the selected system error.
    /// </summary>
    /// <param name="error"></param>
    /// <returns></returns>
    public async Task OnClose(object sender)
    {
        try
        {
            Notifier?.ProgressStart();
            Notifier?.ClearStatus();
            CloseSystemLog arg = new CloseSystemLog();
            arg.Errors = new Guid[] { (sender as GXSystemLog).Id };
            await Http.PostAsJson<GXSystemLog>("api/SystemLog/Close", arg);
            List<GXSystemLog> list = new List<GXSystemLog>();
            list.AddRange(ActiveErrors);
            list.Remove(sender as GXSystemLog);
            ActiveErrors = list.ToArray();
            await Updated();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }


    /// <summary>
    /// Clear the system error list.
    /// </summary>

    public async Task OnClearConfirmation(bool confirm)
    {
        try
        {
            if (confirm)
            {
                Notifier?.ProgressStart();
                await Http.PostAsJson<ClearSystemLogResponse>("api/SystemLog/Clear", new ClearSystemLog());
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}
