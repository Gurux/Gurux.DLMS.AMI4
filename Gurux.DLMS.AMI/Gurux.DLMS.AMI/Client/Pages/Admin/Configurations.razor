@page "/config"
@using Gurux.DLMS.AMI.Client.Helpers.ContextMenu
@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Globalization

@attribute [Authorize(Roles = GXRoles.Admin)]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier
@implements IDisposable

<h1>@Properties.Resources.SettingsTitle</h1>
<hr />

<GXTable @ref="table"
         Context="conf"
         ItemsProvider="@GetItems"
         OnSearch="@Updated"
         ShowAllUsers="false"
         ShowRemoved="false"
         ShowAllData="true">
    <FilterContent>
        <th>
        </th>
        <th>
            <input class="form-control" type="text" placeholder="@Properties.Resources.FilterByName"
                   @onchange="@((ChangeEventArgs __e) => filter.Name = Convert.ToString(__e.Value))" />
        </th>
    </FilterContent>
    <MenuContent>
        <AuthorizeView Roles=@GXRoles.ToString(GXRoles.Admin)>
            <ContextMenuItem Text="@Properties.Resources.Edit" Icon="oi oi-pencil" OnClick="@OnEdit"></ContextMenuItem>
        </AuthorizeView>
    </MenuContent>
    <HeaderContent>
        <th width="1%"></th>
        <th width="1%" style="white-space: nowrap;">@Properties.Resources.Name</th>
        <th style="display:table-cell; width:100%">@Properties.Resources.Description</th>
    </HeaderContent>
    <ItemContent>
        <td><span class="@conf.Icon" aria-hidden="true"></span></td>
        <td><a href="@GetPath(conf)" @onclick="() => OnSelect(conf)">@conf.Name</a></td>
        <td>
            @conf.Description
        </td>
    </ItemContent>
</GXTable>


@code {
    /// <summary>
    /// Selected block ID.
    /// </summary>
    [Parameter]
    public Guid? Id { get; set; }


    private string GetPath(GXConfiguration target)
    {
        //If custom UI is used.
        if (!string.IsNullOrEmpty(target.Path))
        {
            return target.Path;
        }
        return "/Config";
    }

    private void OnSelect(GXConfiguration target)
    {
        Notifier.Title = "Edit configuration";
        Notifier.Action = CrudAction.Update;
        Notifier.UpdateData(GXPages.Configurations, target);
        if (!string.IsNullOrEmpty(target.Path))
        {
            ClientHelpers.NavigateTo(NavigationManager, Notifier, target.Path);
        }
        else
        {
            ClientHelpers.NavigateTo(NavigationManager, Notifier, "/Config");
        }
    }

    /// <summary>
    /// Configuration filter.
    /// </summary>
    /// <remarks>
    /// Don't localize the name.
    /// </remarks>
    private GXConfiguration filter = new GXConfiguration();

    /// <summary>
    /// Table reference.
    /// </summary>
    protected GXTable<GXConfiguration>? table;

    /// <summary>
    /// Update table.
    /// </summary>
    protected async Task Updated()
    {
        try
        {
            if (table != null)
            {
                Notifier?.ClearStatus();
                await table.RefreshDataAsync(true);
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    private async ValueTask<ItemsProviderResult<GXConfiguration>> GetItems(GXItemsProviderRequest request)
    {
        Notifier?.ProgressStart();
        Notifier?.ClearStatus();
        try
        {
            ListConfiguration req = new ListConfiguration()
                {
                    Index = request.StartIndex,
                    Count = request.Count,
                    Filter = filter,
                    OrderBy = request.OrderBy,
                    Descending = request.Descending
                };
            var ret = await Http.PostAsJson<ListConfigurationResponse>("api/Configuration/List", req, request.CancellationToken);
            return new ItemsProviderResult<GXConfiguration>(ret.Configurations, ret.Count);
        }
        catch (TaskCanceledException)
        {
            //Let the table component handle this.
            throw;
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
        return default;
    }

    protected override async Task OnInitializedAsync()
    {
        //Wait until table is loaded. Don't remove this or table is null and last settings are not available.
        await Task.Delay(1);
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            Notifier.On<IEnumerable<GXConfiguration>>(this, nameof(IGXHubEvents.ConfigurationSave), async (configurations) =>
            {
                await Updated();
            });
            Notifier.Clear();
            Notifier.UpdateButtons();
            if (table != null && Id != null)
            {
                //Get last selected item.
                table.Active = new GXConfiguration() { Id = Id.Value };
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    /// <summary>
    /// Edit configuration.
    /// </summary>
    public void OnEdit()
    {
        try
        {
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            if (table?.Active == null)
            {
                throw new Exception(Gurux.DLMS.AMI.Client.Properties.Resources.NoItemIsSelected);
            }
            Notifier.Title = "Edit configuration";
            Notifier.Action = CrudAction.Update;
            Notifier.UpdateData(GXPages.Configurations, table.Active);
            //If custom UI is used.
            if (!string.IsNullOrEmpty(table.Active.Path))
            {
                ClientHelpers.NavigateTo(NavigationManager, Notifier, table.Active.Path);
            }
            else
            {
                throw new Exception("Invalid configuration path.");
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    public void Dispose()
    {
        Notifier.RemoveListener(this);
    }
}