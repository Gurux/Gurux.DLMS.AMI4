@page "/objecttemplates"
@using Gurux.DLMS.AMI.Client.Helpers.ContextMenu
@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Models
@using Gurux.DLMS.Objects;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Text;

@attribute [Authorize(Roles = "Admin, TemplateManager")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier
@implements IDisposable

<table class="table table-striped">
    <thead>
        <tr>
            <th>
                <input class="form-control" placeholder="@Properties.Resources.FilterByObjectType"
                       type="search"
                       @oninput="@SearchByObjectType" />
            </th>
            <th>
                <input class="form-control" placeholder="@Properties.Resources.FilterByName"
                       type="search"
                       @oninput="@SearchByName" />
            </th>
            <th>
                <input class="form-control" placeholder="@Properties.Resources.FilterByLogicalName"
                       @oninput="@SearchByLogicalName" />
            </th>
        </tr>
        <tr>
            <th>@Properties.Resources.ObjectType</th>
            <th>@Properties.Resources.Name</th>
            <th>@Properties.Resources.LogicalName</th>
            <th>Access rights</th>
            <th>Expiration times</th>
            <th width="1%"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var template in GetTemplates())
        {
            <tr class=@(GetSelectedClass(template)) @onclick="@(()=>RowSelected(template))">
                <td>@GetObjectType(template.ObjectType)</td>
                <td><a href="@GetPath(template)" @onclick="() => OnSelect(template)">@template.Name</a></td>
                <td>@template.LogicalName</td>
                <td>@GetAccessRights(template)</td>
                <td>@GetExpirationTimes(template)</td>
                @if (_active == template)
                {
                    <td>
                        <ContextMenuController>
                            <ChildContent>
                                <ContextMenuItem Text="@Properties.Resources.Edit" Icon="oi oi-pencil" OnClick="async () => OnEdit()"></ContextMenuItem>
                                <ContextMenuItem Text="@Properties.Resources.Remove" Icon="oi oi-trash" OnClick="async () => OnRemove()"></ContextMenuItem>
                            </ChildContent>
                        </ContextMenuController>
                    </td>
                }
                else
                {
                    <td>&nbsp;&nbsp;&nbsp;</td>
                }
            </tr>
        }
    </tbody>
</table>
<br />
@code {
    /// <summary>
    /// Filter using object type.
    /// </summary>
    private string? filterByObjectType;
    /// <summary>
    /// Filter using object name.
    /// </summary>
    private string? filterByName;
    /// <summary>
    /// Filter by logical name of the object.
    /// </summary>
    private string? filterByLogicalName;

    /// <summary>
    /// User is verified before schedule is removed.
    /// </summary>
    protected ConfirmBase DeleteConfirmation;
    /// <summary>
    /// Virtualize.
    /// </summary>
    protected Virtualize<GXObjectTemplate>? virtualize;
    /// <summary>
    /// Selected item.
    /// </summary>
    private GXObjectTemplate? _active;

    //Get object template path.
    private string GetPath(GXObjectTemplate target)
    {
        return "/objectTemplate";
    }

    //The object template is selected.
    private void OnSelect(GXObjectTemplate target)
    {
        try
        {
            Notifier.ClearStatus();
            Notifier.Title = "Edit Device Template";
            Notifier.Action = CrudAction.Update;
            Notifier.UpdateData(GXPages.ObjectTemplate, target);
            Notifier.UpdateData(GXPages.ObjectTemplates, target);
            NavigationManager.NavigateTo("/objectTemplate");

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    /// <summary>
    /// Update virtualized items.
    /// </summary>
    protected async void Updated()
    {
        try
        {
            if (virtualize != null)
            {
                Notifier?.ClearStatus();
                await virtualize.RefreshDataAsync();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    //Get object type as a string.
    public string GetObjectType(int value)
    {
        return ((Gurux.DLMS.Enums.ObjectType)value).ToString();
    }

    protected string GetSelectedClass(GXObjectTemplate template)
    {
        return _active != null && template.Id == _active.Id ? "table-info" : "table-striped";
    }


    protected void RowSelected(GXObjectTemplate selected)
    {
        this._active = selected;
        Notifier.UpdateData(GXPages.ObjectTemplates, selected);
    }

    private string GetAccessRights(GXObjectTemplate template)
    {
        var obj = GXDLMSClient.CreateObject((Enums.ObjectType)template.ObjectType);
        StringBuilder sb = new StringBuilder();
        foreach (var it in template.Attributes)
        {
            if (obj is IGXDLMSBase b)
            {
                try
                {
                    sb.Append(b.GetNames()[it.Index - 1] + " is " + ((Enums.AccessMode)it.AccessLevel));
                }
                catch (Exception)
                {
                    sb.Append(it.Index + " is " + ((Enums.AccessMode)it.AccessLevel));
                }
            }
            else
            {
                sb.Append(it.Index + " is " + ((Enums.AccessMode)it.AccessLevel));
            }
            sb.Append(", ");
        }
        if (sb.Length != 0)
        {
            sb.Length -= 2;
        }
        return sb.ToString();
    }

    private string GetExpirationTimes(GXObjectTemplate template)
    {
        var obj = GXDLMSClient.CreateObject((Enums.ObjectType)template.ObjectType);
        StringBuilder sb = new StringBuilder();
        foreach (var it in template.Attributes)
        {
            if (it.ExpirationTime != null)
            {
                string str;
                if (it.ExpirationTime.Value.Year == DateTimeOffset.MaxValue.Year)
                {
                    str = "static";
                }
                else
                {
                    str = it.ExpirationTime.Value.ToString("HH:mm:ss");
                }
                if (obj is IGXDLMSBase b)
                {
                    try
                    {
                        sb.Append(b.GetNames()[it.Index - 1] + " is " + str);
                    }
                    catch (Exception)
                    {
                        sb.Append(it.Index + " is " + str);
                    }
                }
                else
                {
                    sb.Append(it.Index + " is " + str);
                }
                sb.Append(", ");
            }
        }
        if (sb.Length != 0)
        {
            sb.Length -= 2;
        }
        return sb.ToString();
    }

    protected override void OnInitialized()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            _active = (GXObjectTemplate?)Notifier.GetData(GXPages.ObjectTemplates);
            Notifier.On<GXObjectTemplate>(this, nameof(IGXHubEvents.ObjectTemplateUpdate), (objectTemplate) =>
            {
                Updated();
            });
            Notifier.On<GXObjectTemplate>(this, nameof(IGXHubEvents.ObjectTemplateDelete), (objectTemplate) =>
            {
                Updated();
            });
            Notifier.Clear();
            Notifier.ChangePage(GXPages.ObjectTemplates, _active);
            Notifier.UpdateButtons();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    List<GXObjectTemplate>? _objects = null;

    /// <summary>
    /// Search by object type.
    /// </summary>
    private void SearchByObjectType(ChangeEventArgs args)
    {
        filterByObjectType = Convert.ToString(args.Value);
        Search();
    }
    
    /// <summary>
    /// Search by name.
    /// </summary>
    private void SearchByName(ChangeEventArgs args)
    {
        filterByName = Convert.ToString(args.Value);
        Search();
    }

    /// <summary>
    /// Search by logical name.
    /// </summary>
    private void SearchByLogicalName(ChangeEventArgs args)
    {
        filterByLogicalName = Convert.ToString(args.Value);
        Search();
    }

    /// <summary>
    /// Search from object templates.
    /// </summary>
    private void Search()
    {
        //Get selected item.
        if (_objects == null)
        {
            _objects = new();
        }
        _objects.Clear();
        _objects.AddRange(((GXDeviceTemplate)Notifier.GetData(GXPages.DeviceTemplate)).Objects);

        if (!string.IsNullOrEmpty(filterByObjectType))
        {
            _objects.RemoveAll(q => ((Enums.ObjectType)q.ObjectType).ToString().ToUpper().Contains(filterByObjectType.ToUpper()) == false);
        }
        if (!string.IsNullOrEmpty(filterByName))
        {
            _objects.RemoveAll(q => q.Name.ToUpper().Contains(filterByName.ToUpper()) == false);
        }
        if (!string.IsNullOrEmpty(filterByLogicalName))
        {
            _objects.RemoveAll(q => q.LogicalName.ToUpper().Contains(filterByLogicalName.ToUpper()) == false);
        }
        StateHasChanged();
    }

    private IEnumerable<GXObjectTemplate> GetTemplates()
    {
        //Get selected item.
        if (_objects == null)
        {
            _objects = new();
            _objects.AddRange(((GXDeviceTemplate)Notifier.GetData(GXPages.DeviceTemplate)).Objects);
        }
        return _objects;
    }

    /// <summary>
    /// Edit object template.
    /// </summary>

    public void OnEdit()
    {
        Notifier?.ClearStatus();
        try
        {
            if (_active == null)
            {
                throw new Exception(Gurux.DLMS.AMI.Client.Properties.Resources.NoItemIsSelected);
            }
            OnSelect(_active);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }


    /// <summary>
    /// Remove selected object template.
    /// </summary>

    public void OnRemove()
    {
        Notifier?.ClearStatus();
        try
        {
            if (_active == null)
            {
                throw new Exception(Gurux.DLMS.AMI.Client.Properties.Resources.NoItemIsSelected);
            }
            Notifier.Title = "Remove object Template";
            Notifier.Action = CrudAction.Delete;
            Notifier.UpdateData(GXPages.ObjectTemplate, _active);
            NavigationManager.NavigateTo("/objectTemplate/");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    public void Dispose()
    {
        Notifier.RemoveLastPage(GXPages.ObjectTemplates);
        Notifier.RemoveListener(this);
    }
}

