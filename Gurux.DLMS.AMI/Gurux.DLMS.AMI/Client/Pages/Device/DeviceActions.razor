@page "/deviceActions"
@using Gurux.DLMS.AMI.Client.Helpers.ContextMenu
@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Module
@using Gurux.DLMS.AMI.Client.Helpers

@attribute [Authorize(Roles = "Admin, DeviceManager, Device")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier
@inject ConfirmBase Confirm
@implements IDisposable

@if (Title)
{
    <PageTitle>@Properties.Resources.Actions @SelectedDevice (@Properties.Resources.Total: @Total)</PageTitle>
}
<AuthorizeView Roles=@GXRoles.ToString(GXRoles.Admin, GXRoles.ComponentViewGroupManager)>
    <MenuControl RightCorner="true">
        <ChildContent>
            <MenuItem Text="@Properties.Resources.Clear" Icon="oi oi-trash" OnClick="@(async () => OnClear())" />
        </ChildContent>
    </MenuControl>
</AuthorizeView>

@if (Filter)
{
    <MenuControl>
        <ChildContent>
            <MenuItem Text="@Properties.Resources.Search" Icon="oi oi-magnifying-glass" OnClick="@(async () => Updated())" />
        </ChildContent>
    </MenuControl>
}
<table class="table table-striped" width="100%">
    <thead width="100%">
        @if (Filter)
        {
            <tr width="100%">
                <th>
                    <input class="form-control" type="text" placeholder="Filter by device name..."
                       @onchange="@((ChangeEventArgs __e) => filter.Device.Name = Convert.ToString(__e.Value))" />
                </th>
                <th>
                    <input class="form-control" placeholder="Filter by creation time..."
                       type="datetime-local"
                       @onchange="@((ChangeEventArgs __e) => filter.CreationTime = Convert.ToDateTime(__e.Value))" />
                </th>
                <th>
                    <!--Type-->
                </th>
                <th>
                    <!--Data-->
                </th>
                <th>
                    <!--Reply-->
                </th>
                <th width="1%"></th>
            </tr>
        }
        <tr width="100%">
            <th>@Properties.Resources.Name</th>
            <th>@Properties.Resources.CreationTime</th>
            <th>@Properties.Resources.Type</th>
            <th>@Properties.Resources.Data</th>
            <th>@Properties.Resources.Reply</th>
            <th width="1%"></th>
        </tr>
    </thead>
    <tbody width="100%">
        <Virtualize @ref="virtualize" Context="action" ItemsProvider="@GetItems" ItemSize="100">
            <ItemContent>
                <tr class=@(GetSelectedClass(action)) @onclick="@(()=>RowSelected(action))">
                    <td>@action.Device.Name</td>
                    <td>@action.CreationTime</td>
                    <td>@((DeviceActionType)@action.Type)</td>
                    <td>@action.Data</td>
                    <td>@action.Reply</td>
                    @if (_active == action)
                    {
                        <td>
                            <ContextMenuController>
                                <ChildContent>
                                    <ContextMenuItem Text="@Properties.Resources.Show" Icon="oi oi-eye" OnClick="async () => OnEdit()"></ContextMenuItem>
                                </ChildContent>
                            </ContextMenuController>
                        </td>
                    }
                    else
                    {
                        <td>&nbsp;</td>
                    }
                </tr>
            </ItemContent>
            <Placeholder>
                <p>
                    @Properties.Resources.Loading&hellip;
                </p>
            </Placeholder>
        </Virtualize>
    </tbody>
</table>
<br />
<Confirm @ref="ClearConfirmation" ConfirmationChanged="OnClearConfirmation" ConfirmationTitle=@($"Confirm Clear")
         OkTitle=@($"Clear") ConfirmationMessage=@($"Are you sure you want to clear devices action log?")>
</Confirm>

@code {
    /// <inheritdoc />
    public string Name
    {
        get
        {
            return Gurux.DLMS.AMI.Client.Properties.Resources.DeviceActions;
        }
    }

    /// <inheritdoc />
    public Type? ConfigurationUI
    {
        get
        {
            return null;
        }
    }

    /// <inheritdoc cref="IGXComponentView.Icon">
    public string? Icon
    {
        get
        {
            return "oi oi-warning";
        }
    }

    /// <summary>
    /// Amount of the device actions shown on the view.
    /// </summary>
    [Parameter]
    public int Count { get; set; } = 0;

    /// <summary>
    /// Is filter shown.
    /// </summary>
    [Parameter]
    public bool Filter { get; set; } = true;

    /// <summary>
    /// Is title shown.
    /// </summary>
    [Parameter]
    public bool Title { get; set; } = true;

    /// <summary>
    /// Total numbers of rows in the database.
    /// </summary>
    internal int Total
    {
        get;
        private set;
    }
    /// <summary>
    /// Device action log filter.
    /// </summary>
    private GXDeviceAction filter = new GXDeviceAction() { Device = new GXDevice() };
    /// <summary>
    /// Device is verified before system errors are cleared.
    /// </summary>
    protected ConfirmBase? ClearConfirmation;
    /// <summary>
    /// Virtualize.
    /// </summary>
    protected Virtualize<GXDeviceAction>? virtualize;

    /// <summary>
    /// Selected item.
    /// </summary>
    private GXDeviceAction? _active;

    protected string GetSelectedClass(GXDeviceAction selected)
    {
        return _active != null && selected.Id == _active.Id ? "table-info" : "table-striped";
    }

    protected void RowSelected(GXDeviceAction selected)
    {
        _active = selected;
        Notifier.UpdateData(GXPages.DeviceActions, _active);
    }

    public string SelectedDevice
    {
        get;
        private set;
    }

    /// <summary>
    /// Update virtualized items.
    /// </summary>
    protected async Task Updated()
    {
        try
        {
            if (virtualize != null)
            {
                Notifier?.ClearStatus();
                await virtualize.RefreshDataAsync();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ClearStatus();
            object? data = Notifier.GetData(GXPages.DeviceActions);
            if (Notifier != null)
            {
                _active = data as GXDeviceAction;
            }
            if (data is GXDevice device)
            {
                SelectedDevice = "for " + device.Name;
            }
            else
            {
                SelectedDevice = "for all devices";
            }
            Notifier.On<IEnumerable<GXDeviceAction>>(this, nameof(IGXHubEvents.DeviceActionAdd), (error) =>
            {
                Task.Run(Updated);
            });
            Notifier.On<IEnumerable<GXDeviceAction>>(this, nameof(IGXHubEvents.DeviceActionClear), (error) =>
            {
                Task.Run(Updated);
            });
            Notifier.ChangePage(GXPages.DeviceActions, null);
            Notifier.Clear();
            Notifier.UpdateButtons();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    private async ValueTask<ItemsProviderResult<GXDeviceAction>> GetItems(ItemsProviderRequest request)
    {
        //Don't clear status or error is lost.
        Notifier?.ProgressStart();
        try
        {
            ListDeviceAction req = new ListDeviceAction() { Index = request.StartIndex, Count = request.Count, Filter = filter };
            if (Count != 0)
            {
                req.Count = Count;
            }
            var ret = await Http.PostAsJson<ListDeviceActionResponse>("api/DeviceAction/List", req, request.CancellationToken);
            Total = ret.Count;
            //Get only selected amount of the device actions.
            if (Count != 0)
            {
                ret.Count = Count;
            }
            return new ItemsProviderResult<GXDeviceAction>(ret.Actions, ret.Count);
        }
        catch (TaskCanceledException)
        {
            //Let the Virtualize component handle this
            throw;
        }
        catch (OperationCanceledException)
        {
            //Might happen when the user scrolls the list rapidly.
        }
        catch (ObjectDisposedException)
        {
            //Might happen when the user scrolls the list rapidly.
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
        return default;
    }

    public void Dispose()
    {
        Notifier.RemoveLastPage(GXPages.DeviceActions);
        Notifier.RemoveListener(this);
    }

    /// <summary>
    /// Show device action.
    /// </summary>
    public void OnEdit()
    {
        try
        {
            Notifier?.ClearStatus();
            if (_active == null)
            {
                throw new Exception(Gurux.DLMS.AMI.Client.Properties.Resources.NoItemIsSelected);
            }
            Notifier.Title = "Device action";
            NavigationManager.NavigateTo("/deviceaction");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }


    /// <summary>
    /// Clear the device actions.
    /// </summary>

    public void OnClear()
    {
        Notifier?.ClearStatus();
        ClearConfirmation?.Show();
    }

    /// <summary>
    /// Clear the system error list.
    /// </summary>

    public async Task OnClearConfirmation(bool confirm)
    {
        try
        {
            if (confirm)
            {
                await Http.PostAsJson<ClearDeviceActionResponse>("api/DeviceAction/Clear", new ClearDeviceAction());
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }
}
