@using Gurux.DLMS.AMI.Client.Pages.Gateway;
@using Gurux.DLMS.AMI.Client.Pages.Schedule;
@using Gurux.DLMS.AMI.Client.Pages.Subtotal
@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq

@inject HttpClient Http
@inject IGXNotifier Notifier

<SelectionContainer TItem="GXDevice" @ref="@_selectionContainer">
    <SelectionList Title="Selected" @ref="_selected"
                   ShowAllUsers="false"
                   ItemsProvider="@GetSelectedItems"
                   OnAdded="OnAdded"
                   OnRemoved="@Removed">
        <DataContent>
            @context.Name
        </DataContent>
        <FilterContent>
            <Search Placeholder="@Properties.Resources.FilterByName"
                    OnClickAsync="@SearchSelectedByName" />
        </FilterContent>
        <ButtonContent>
            <div>
                <button style="float: right;" class="btn btn-outline-secondary border-left-0 border"
                        type="button" onclick="@(() => RemoveAll())">
                    &raquo;
                </button>
            </div>
        </ButtonContent>
    </SelectionList>
    <SelectionList Title="Available" @ref="_available"
                   ItemsProvider="@GetItems">
        <DataContent>
            @context.Name
        </DataContent>
        <FilterContent>
            <Search Placeholder="@Properties.Resources.FilterByName"
                    OnClickAsync="@SearchByName" />
            <Search Placeholder="@Properties.Resources.FilterByUser"
                    OnClickAsync="@SearchByUser" />
        </FilterContent>
        <ButtonContent>
            <div>
                <button style="float: left;" class="btn btn-outline-secondary border-left-0 border"
                        type="button" onclick="@(() => AddAll())">
                    &laquo;
                </button>
            </div>
        </ButtonContent>
    </SelectionList>
</SelectionContainer>

@code {
    /// <summary>
    /// Selected devices.
    /// </summary>
    [Parameter]
    public List<GXDevice>? Devices { get; set; }

    [CascadingParameter]
    private DeviceGroupTab? DeviceGropParent { get; set; }

    [CascadingParameter]
    private ScheduleTab? ScheduleParent { get; set; }

    [CascadingParameter]
    private GatewayTab? GatewayParent { get; set; }

    [CascadingParameter]
    private SubtotalTab? SubtotalParent { get; set; }

    SelectionList<GXDevice>? _selected;
    SelectionList<GXDevice>? _available;
    SelectionContainer<GXDevice>? _selectionContainer;
    /// <summary>
    /// Device filter.
    /// </summary>
    private GXDevice filter = new GXDevice(null);

    /// <summary>
    /// Selected device filter.
    /// </summary>
    private GXDevice selectedFilter = new GXDevice(null);

    /// <summary>
    /// Search selected items by name.
    /// </summary>
    /// <param name="name">Name to search.</param>
    protected async Task SearchSelectedByName(string? name)
    {
        try
        {
            if (_selected != null)
            {
                selectedFilter.Name = name;
                await _selected.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    protected async Task SearchByName(string? name)
    {
        try
        {
            if (_available != null)
            {
                filter.Name = name;
                Notifier?.ClearStatus();
                await _available.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    protected async Task SearchByUser(string? userName)
    {
        try
        {
            if (_available != null)
            {
                if (string.IsNullOrEmpty(userName))
                {
                    filter.DeviceGroups = null;
                }
                else
                {
                    GXUser user;
                    GXDeviceGroup? dg = filter.DeviceGroups?.FirstOrDefault();
                    if (dg == null)
                    {
                        dg = new GXDeviceGroup();
                        user = new();
                        GXUserGroup? ug = new GXUserGroup();
                        dg.UserGroups = new List<GXUserGroup>(new GXUserGroup[] { ug });
                        ug.Users = new List<GXUser>(new GXUser[] { user });
                        filter.DeviceGroups = new List<GXDeviceGroup>(new GXDeviceGroup[] { dg });
                    }
                    else
                    {
                        user = dg.UserGroups[0].Users[0];
                    }
                    user.UserName = userName;
                }
                Notifier?.ClearStatus();
                await _available.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    /// <summary>
    /// Add all objects to selected items.
    /// </summary>
    /// <returns></returns>
    private async Task AddAll()
    {
        int max = 0;
        //max 1000 items are added at the one time.
        if (_available != null && _available.TotalCount > 1000)
        {
            max = 1000;
        }
        var ret = await GetItems(new GXItemsProviderRequest(0, max));
        await OnAdded(ret.Items);
        if (_selected != null)
        {
            await _selected.RefreshDataAsync();
        }
        if (_available != null)
        {
            await _available.RefreshDataAsync();
        }
    }

    /// <summary>
    /// Remove all objects from selected items.
    /// </summary>
    /// <returns></returns>
    private async Task RemoveAll()
    {
        List<GXDevice> devs = GetDevices();
        devs.Clear();
        if (_selected != null)
        {
            await _selected.RefreshDataAsync();
        }
        if (_available != null)
        {
            await _available.RefreshDataAsync();
        }
    }

    /// <summary>
    /// New device is added for selection list.
    /// </summary>
    public async Task OnAdded(IEnumerable<GXDevice> items)
    {
        List<GXDevice> devs = GetDevices();
        devs.InsertRange(0, items);
        if (_selected != null)
        {
            await _selected.RefreshDataAsync();
        }
    }

    /// <summary>
    /// Device has removed from the lists.
    /// </summary>
    private async Task Removed(IEnumerable<GXDevice> items)
    {
        List<GXDevice> devs = GetDevices();
        devs.RemoveAll(w => items.Contains(w));
        if (_selected != null)
        {
            await _selected.RefreshDataAsync();
        }
    }

    private List<GXDevice>? GetDevices()
    {
        if (Devices != null)
        {
            return Devices;
        }
        if (DeviceGropParent?.Active?.Devices != null)
        {
            return DeviceGropParent.Active.Devices;
        }
        if (ScheduleParent?.Active?.Devices != null)
        {
            return ScheduleParent.Active.Devices;
        }
        if (GatewayParent?.Active.Devices != null)
        {
            return GatewayParent.Active.Devices;
        }
        return SubtotalParent.Active.Devices;
    }

    /// <summary>
    /// Filter is done when SearchSelectedByName is called.
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    private ValueTask<ItemsProviderResult<GXDevice>> GetSelectedItems(GXItemsProviderRequest request)
    {
        var devs = GetDevices();
        int total = devs.Count;
        if (!string.IsNullOrEmpty(selectedFilter.Name))
        {
            devs = devs.Where(w => w.Name.ToLower().Contains(selectedFilter.Name.ToLower())).ToList();
        }
        return new(new ItemsProviderResult<GXDevice>(
        devs.Skip(request.StartIndex).Take(request.Count), total));
    }

    private async ValueTask<ItemsProviderResult<GXDevice>> GetItems(GXItemsProviderRequest request)
    {
        //Don't clear status or error is lost.
        Notifier?.ProgressStart();
        try
        {
            ListDevices req = new ListDevices()
                {
                    Index = request.StartIndex,
                    Count = request.Count,
                    Filter = filter,
                    Descending = request.Descending,
                    AllUsers = request.ShowAllUserData,
                    Exclude = GetDevices().Select(s => s.Id).ToArray()
                };
            var ret = await Http.PostAsJson<ListDevicesResponse>("api/Device/List", req, request.CancellationToken);
            if (ret?.Devices != null && _selected != null)
            {
                return new ItemsProviderResult<GXDevice>(ret.Devices, ret.Count);
            }
        }
        catch (TaskCanceledException)
        {
            //Let the table component handle this.
            throw;
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
        return default;
    }

    protected override async Task OnInitializedAsync()
    {
        //Wait until table is loaded. Don't remove this or selector is null.
        await Task.Delay(1);
        try
        {
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            if (_selected != null)
            {
                await _selected.RefreshDataAsync();
            }
            //Read available items.
            if (_available != null)
            {
                await _available.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}

