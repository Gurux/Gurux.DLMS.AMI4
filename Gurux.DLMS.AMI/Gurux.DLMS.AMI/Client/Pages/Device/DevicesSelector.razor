@page "/devicesselector"
@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq

@attribute [Authorize(Roles = "Admin, User, DeviceManager, Device")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier
@implements IDisposable

<SelectionContainer GetName="GetName" GetDescription="GetDescription">
    <SelectionList Title="Selected" ItemList="devices" />
    <SelectionList Title="Available" ItemList="AllDevices" />
</SelectionContainer>

@code {
    List<GXDevice> AllDevices = new List<GXDevice>();
    List<GXDevice> devices = new List<GXDevice>();

    string GetName(object target)
    {
        return (target as GXDevice).Name;
    }
    string GetDescription(object target)
    {
        return (target as GXDevice).Name;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            string? page = Notifier.GetLastPage();
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            //Get selected device group.
            if (page == GXPages.DeviceManage)
            {
                GXDeviceGroup deviceGroup = (GXDeviceGroup)Notifier.GetData(GXPages.DeviceGroup);
                devices = deviceGroup.Devices;
            }
            else if (page == GXPages.ScheduleManage)
            {
                //Get selected objects.
                GXSchedule schedule = (GXSchedule)Notifier.GetData(GXPages.Schedule);
                if (schedule != null)
                {
                    devices = schedule.Devices;
                }
            }
            else
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            ListDevices req = new ListDevices()
                {
                    Filter = new GXDevice()
                };
            HttpResponseMessage response = await Http.PostAsJsonAsync("api/Device/List", req);
            ClientHelpers.ValidateStatusCode(response);
            var ret = await response.Content.ReadFromJsonAsync<ListDevicesResponse>();
            foreach (GXDevice it in ret.Devices)
            {
                if (!devices.Exists(q => q.Id == it.Id))
                {
                    AllDevices.Add(it);
                }
            }
            Notifier.ChangePage(GXPages.DevicesSelector, null);
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    public void Dispose()
    {
        Notifier.RemovePage(GXPages.DevicesSelector);
    }
}

