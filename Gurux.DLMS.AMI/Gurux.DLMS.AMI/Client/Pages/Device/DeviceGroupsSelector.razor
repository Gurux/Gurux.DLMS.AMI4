@using Gurux.DLMS.AMI.Client.Pages.Agent;
@using Gurux.DLMS.AMI.Client.Pages.Gateway;
@using Gurux.DLMS.AMI.Client.Pages.Schedule;
@using Gurux.DLMS.AMI.Client.Pages.User;
@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq

@inject HttpClient Http
@inject IGXNotifier Notifier

<SelectionContainer TItem="GXDeviceGroup" @ref="@_selectionContainer">
    <SelectionList Title="Selected" @ref="_selected"
                   ShowAllUsers="false"
                   ItemsProvider="@GetSelectedItems"
                   GetName="@GetName"
                   GetDescription="@GetDescription"
                   OnAdded="OnAdded"
                   OnRemoved="@Removed">
        <FilterContent>
            <Search Placeholder="@Properties.Resources.FilterByName"
                    OnClickAsync="@SearchSelectedByName" />
        </FilterContent>
        <ButtonContent>
            <div>
                <button style="float: right;" class="btn btn-outline-secondary border-left-0 border"
                        type="button" onclick="@(() => RemoveAll())">
                    &raquo;
                </button>
            </div>
        </ButtonContent>
    </SelectionList>
    <SelectionList Title="Available" @ref="_available"
                   ItemsProvider="@GetItems"
                   GetName="@GetName"
                   GetDescription="@GetDescription">
        <FilterContent>
            <Search Placeholder="@Properties.Resources.FilterByName"
                    OnClickAsync="@SearchByName" />
            <Search Placeholder="@Properties.Resources.FilterByUser"
                    OnClickAsync="@SearchByUser" />
        </FilterContent>
        <ButtonContent>
            <div>
                <button style="float: left;" class="btn btn-outline-secondary border-left-0 border"
                        type="button" onclick="@(() => AddAll())">
                    &laquo;
                </button>
            </div>
        </ButtonContent>
    </SelectionList>
</SelectionContainer>

@code {

    [CascadingParameter]
    private UserGroupTab? UserGroupParent { get; set; }

    [CascadingParameter]
    private DeviceTab? DeviceParent { get; set; }

    [CascadingParameter]
    private AgentGroupTab? AgentGroupParent { get; set; }

    [CascadingParameter]
    private GatewayTab? GatewayParent { get; set; }

    [CascadingParameter]
    private ScheduleTab? ScheduleParent { get; set; }


    SelectionList<GXDeviceGroup>? _selected;
    SelectionList<GXDeviceGroup>? _available;
    SelectionContainer<GXDeviceGroup>? _selectionContainer;

    /// <summary>
    /// Device group filter.
    /// </summary>
    private GXDeviceGroup filter = new GXDeviceGroup(null);
    /// <summary>
    /// Selected device group filter.
    /// </summary>
    private GXDeviceGroup selectedFilter = new GXDeviceGroup();

    public string? GetName(GXDeviceGroup target)
    {
        return target.Name;
    }

    public string? GetDescription(GXDeviceGroup target)
    {
        return target.Name;
    }

    protected async Task SearchSelectedByName(string? name)
    {
        try
        {
            if (_selected != null)
            {
                selectedFilter.Name = name;
                await _selected.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    protected async Task SearchByName(string? name)
    {
        try
        {
            if (_available != null)
            {
                filter.Name = name;
                Notifier?.ClearStatus();
                await _available.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    protected async Task SearchByUser(string? userName)
    {
        try
        {
            if (_available != null)
            {
                if (string.IsNullOrEmpty(userName))
                {
                    filter.UserGroups = null;
                }
                else
                {
                    GXUser user;
                    GXUserGroup? ug = filter.UserGroups?.FirstOrDefault();
                    if (ug == null)
                    {
                        user = new GXUser();
                        ug = new GXUserGroup();
                        filter.UserGroups = new(new GXUserGroup[] { ug });
                        ug.Users = new(new GXUser[] { user });
                    }
                    else
                    {
                        user = filter.UserGroups[0].Users[0];
                    }
                    user.UserName = userName;
                }
                Notifier?.ClearStatus();
                await _available.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    /// <summary>
    /// Add all objects to selected items.
    /// </summary>
    /// <returns></returns>
    private async Task AddAll()
    {
        int max = 0;
        //max 1000 items are added at the one time.
        if (_available != null && _available.TotalCount > 1000)
        {
            max = 1000;
        }
        var ret = await GetItems(new GXItemsProviderRequest(0, max));
        await OnAdded(ret.Items);
        if (_selected != null)
        {
            await _selected.RefreshDataAsync();
        }
        if (_available != null)
        {
            await _available.RefreshDataAsync();
        }
    }

    /// <summary>
    /// Remove all objects from selected items.
    /// </summary>
    /// <returns></returns>
    private async Task RemoveAll()
    {
        List<GXDeviceGroup> groups = GetDeviceGroups();
        groups.Clear();
        if (_selected != null)
        {
            await _selected.RefreshDataAsync();
        }
        if (_available != null)
        {
            await _available.RefreshDataAsync();
        }
    }

    /// <summary>
    /// New device is added for selection list.
    /// </summary>
    public async Task OnAdded(IEnumerable<GXDeviceGroup> items)
    {
        List<GXDeviceGroup> groups = GetDeviceGroups();
        groups.InsertRange(0, items);
        if (_selected != null)
        {
            await _selected.RefreshDataAsync();
        }
    }

    /// <summary>
    /// Device has removed from the lists.
    /// </summary>
    private async Task Removed(IEnumerable<GXDeviceGroup> items)
    {
        List<GXDeviceGroup> groups = GetDeviceGroups();
        groups.RemoveAll(w => items.Contains(w));
        if (_selected != null)
        {
            await _selected.RefreshDataAsync();
        }
    }

    private List<GXDeviceGroup> GetDeviceGroups()
    {
        if (UserGroupParent?.Active?.DeviceGroups != null)
        {
            return UserGroupParent.Active.DeviceGroups;
        }
        if (DeviceParent?.Active?.DeviceGroups != null)
        {
            return DeviceParent.Active.DeviceGroups;
        }
        if (AgentGroupParent?.Active?.DeviceGroups != null)
        {
            return AgentGroupParent.Active.DeviceGroups;
        }        
        if (ScheduleParent?.Active?.DeviceGroups != null)
        {
            return ScheduleParent.Active.DeviceGroups;
        }        
        return GatewayParent?.Active?.DeviceGroups;
    }

    /// <summary>
    /// Filter is done when SearchSelectedByName is called.
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    private ValueTask<ItemsProviderResult<GXDeviceGroup>> GetSelectedItems(GXItemsProviderRequest request)
    {
        var groups = GetDeviceGroups();
        int total = groups.Count;
        if (!string.IsNullOrEmpty(selectedFilter.Name))
        {
            groups = groups.Where(w => w.Name.ToLower().Contains(selectedFilter.Name.ToLower())).ToList();
        }
        return new(new ItemsProviderResult<GXDeviceGroup>(
        groups.Skip(request.StartIndex).Take(request.Count), total));
    }

    private async ValueTask<ItemsProviderResult<GXDeviceGroup>> GetItems(GXItemsProviderRequest request)
    {
        //Don't clear status or error is lost.
        Notifier?.ProgressStart();
        try
        {
            ListDeviceGroups req = new ListDeviceGroups()
                {
                    Index = request.StartIndex,
                    Count = request.Count,
                    Filter = filter,
                    Descending = request.Descending,
                    AllUsers = request.ShowAllUserData,
                    Exclude = GetDeviceGroups().Select(s => s.Id).ToArray()
                };
            var ret = await Http.PostAsJson<ListDeviceGroupsResponse>("api/DeviceGroup/List", req, request.CancellationToken);
            if (ret?.DeviceGroups != null && _selected != null)
            {
                return new ItemsProviderResult<GXDeviceGroup>(ret.DeviceGroups, ret.Count);
            }
        }
        catch (TaskCanceledException)
        {
            //Let the table component handle this.
            throw;
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
        return default;
    }

    protected override async Task OnInitializedAsync()
    {
        //Wait until table is loaded. Don't remove this or selector is null.
        await Task.Delay(1);
        try
        {
            if (_selectionContainer == null || _selected == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            if (_selected != null)
            {
                await _selected.RefreshDataAsync();
            }
            //Read available items.
            if (_available != null)
            {
                await _available.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}

