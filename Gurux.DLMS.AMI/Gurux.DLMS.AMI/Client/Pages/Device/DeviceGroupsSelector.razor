@using Gurux.DLMS.AMI.Client.Pages.Agent;
@using Gurux.DLMS.AMI.Client.Pages.User;
@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier

<SelectionContainer GetName="GetName" GetDescription="GetDescription">
    <SelectionList Title="Selected" ItemList="deviceGroups" />
    <SelectionList Title="Available" ItemList="AllDeviceGroups" />
</SelectionContainer>

@code {

    [CascadingParameter]
    private UserGroupTab? UserGroupParent { get; set; }

    [CascadingParameter]
    private DeviceTab? DeviceParent { get; set; }

    [CascadingParameter]
    private AgentGroupTab? AgentGroupParent { get; set; }

    List<GXDeviceGroup> AllDeviceGroups = new List<GXDeviceGroup>();
    List<GXDeviceGroup> deviceGroups = new List<GXDeviceGroup>();


    public void OnUpdated(object target)
    {

    }

    public string GetName(object target)
    {
        return (target as GXDeviceGroup).Name;
    }
    public string GetDescription(object target)
    {
        return (target as GXDeviceGroup).Name;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            ListDeviceGroups req = new ListDeviceGroups()
                {
                    Filter = new GXDeviceGroup()
                };
            if (UserGroupParent?.Active?.DeviceGroups != null)
            {
                //Get selected device groups.
                deviceGroups = UserGroupParent.Active.DeviceGroups;
            }
            else if (DeviceParent?.Active?.DeviceGroups != null)
            {
                //Get selected device groups.
                deviceGroups = DeviceParent.Active.DeviceGroups;
            }
            else if (AgentGroupParent?.Active?.DeviceGroups != null)
            {
                //Get selected device groups.
                deviceGroups = AgentGroupParent.Active.DeviceGroups;
            }
            else
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            bool addDefaultBlocks = Notifier.Action == CrudAction.Create && !deviceGroups.Any();
            Notifier.UpdateButtons();
            var ret = await Http.PostAsJson<ListDeviceGroupsResponse>("api/DeviceGroup/List", req);
            foreach (GXDeviceGroup it in ret.DeviceGroups)
            {
                //Add default groups when target is created.
                if (addDefaultBlocks && it.Default.GetValueOrDefault(false) &&
                    !deviceGroups.Where(q => q.Id == it.Id).Any())
                {
                    deviceGroups.Add(it);
                }
                if (!deviceGroups.Exists(q => q.Id == it.Id))
                {
                    AllDeviceGroups.Add(it);
                }
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}

