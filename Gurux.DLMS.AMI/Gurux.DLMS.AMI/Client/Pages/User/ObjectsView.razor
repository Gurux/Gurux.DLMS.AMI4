@page "/objectsview"
@using Gurux.DLMS.AMI.Client.Helpers.ContextMenu
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Client.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module

@attribute [Authorize(Roles = "Admin, TemplateManager")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier
@implements IDisposable

<AuthorizeView Roles=@GXRoles.ToString(GXRoles.Admin, GXRoles.TemplateManager)>
    <MenuControl RightCorner="true">
        <ChildContent>
            <MenuItem Text="@Properties.Resources.Add" Icon="oi oi-plus" OnClick="@(async () => OnAdd())" />
        </ChildContent>
    </MenuControl>
</AuthorizeView>

<MenuControl>
    <ChildContent>
        <MenuItem Text="@Properties.Resources.Search" Icon="oi oi-magnifying-glass" OnClick="@(async () => Updated())" />
    </ChildContent>
</MenuControl>

<table class="table table-striped">
    <thead>
        <tr>
            <th>
            </th>
            <th>
                <input class="form-control" placeholder="@Properties.Resources.FilterByName"
                       type="text"
                       @onchange="@((ChangeEventArgs __e) => filter.Template.Name = Convert.ToString(__e.Value))" />
            </th>
        </tr>
        <tr>
            <th>@Properties.Resources.ObjectType</th>
            <th>@Properties.Resources.Name</th>
            <th>Logical Name</th>
            <th width="1%"></th>
        </tr>
    </thead>
    <tbody>
        <Virtualize @ref="virtualize" Context="item" ItemsProvider="@GetItems">
            <ItemContent>
                <tr class=@(GetSelectedClass(item)) @onclick="@(()=>RowSelected(item))">
                    <td>@GetObjectType(item.Template.ObjectType)</td>
                    <td>@item.Template.Name</td>
                    <td>@item.Template.LogicalName</td>
                    <AuthorizeView Roles=@GXRoles.ToString(GXRoles.Admin, GXRoles.DeviceManager)>
                        @if (_active == item)
                        {
                            <td>
                                <ContextMenuController>
                                    <ChildContent>
                                        <ContextMenuItem Text="@Properties.Resources.Edit" Icon="oi oi-pencil" OnClick="async () => OnEdit()"></ContextMenuItem>
                                        <ContextMenuItem Text="@Properties.Resources.Remove" Icon="oi oi-trash" OnClick="async () => OnRemove()"></ContextMenuItem>
                                    </ChildContent>
                                </ContextMenuController>
                            </td>
                        }
                    </AuthorizeView>
                </tr>
            </ItemContent>
            <Placeholder>
                <p>
                    @Properties.Resources.Loading&hellip;
                </p>
            </Placeholder>
        </Virtualize>
    </tbody>
</table>
<br />
@code {
    /// <summary>
    /// Object filter.
    /// </summary>
    private GXObject filter = new GXObject();
    /// <summary>
    /// User is verified before schedule is removed.
    /// </summary>
    protected ConfirmBase DeleteConfirmation;
    /// <summary>
    /// Virtualize.
    /// </summary>
    protected Virtualize<GXObject>? virtualize;
    /// <summary>
    /// Selected item.
    /// </summary>
    private GXObject? _active;

    /// <summary>
    /// Update virtualized items.
    /// </summary>
    protected async void Updated()
    {
        try
        {
            if (virtualize != null)
            {
                Notifier?.ClearStatus();
                await virtualize.RefreshDataAsync();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    //Get object type as a string.
    public string GetObjectType(int value)
    {
        return ((Gurux.DLMS.Enums.ObjectType)value).ToString();
    }

    protected string GetSelectedClass(GXObject value)
    {
        return _active != null && value.Id == _active.Id ? "table-info" : "table-striped";
    }


    protected void RowSelected(GXObject selected)
    {
        this._active = selected;
        Notifier.UpdateData(GXPages.ObjectTemplates, selected);
    }

    protected override void OnInitialized()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ClearStatus();

            filter.Template = new GXObjectTemplate();
            _active = (GXObject?)Notifier.GetData(GXPages.Objects);
            if (_active == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            Notifier.On<IEnumerable<GXObject>>(this, nameof(IGXHubEvents.ObjectUpdate), (objects) =>
            {
                Updated();
            });
            Notifier.On<IEnumerable<GXObject>>(this, nameof(IGXHubEvents.ObjectDelete), (objects) =>
            {
                Updated();
            });
            Notifier.On<IEnumerable<GXAttribute>>(this, nameof(IGXHubEvents.AttributeUpdate), (attributes) =>
            {
                Updated();
            });
            Notifier.Clear();
            Notifier.ChangePage(GXPages.Objects, _active);
            Notifier.UpdateButtons();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    private async ValueTask<ItemsProviderResult<GXObject>> GetItems(ItemsProviderRequest request)
    {
        //Don't clear status or error is lost.
        Notifier?.ProgressStart();
        try
        {
            //Get selected item.
            GXDevice? device = (GXDevice?)Notifier.GetData(GXPages.Device);
            List<GXObject> list = new List<GXObject>();
            list.AddRange(device.Objects);
            if (!string.IsNullOrEmpty(filter.Template.Name))
            {
                list.RemoveAll(q => q.Template.Name.ToUpper().Contains(filter.Template.Name.ToUpper()) == false);
            }
            return new ItemsProviderResult<GXObject>(list, list.Count);
        }
        catch (TaskCanceledException)
        {
            //Let the Virtualize component handle this
            throw;
        }
        catch (OperationCanceledException)
        {
            //Might happen when the user scrolls the list rapidly.
        }
        catch (ObjectDisposedException)
        {
            //Might happen when the user scrolls the list rapidly.
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
        return default;
    }

    /// <summary>
    /// Add new object template.
    /// </summary>

    public void OnAdd()
    {
        try
        {
            Notifier?.ClearStatus();
            Notifier.Title = "New object";
            Notifier.Action = CrudAction.Create;
            NavigationManager.NavigateTo("/deviceTemplate/");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    /// <summary>
    /// Edit object template.
    /// </summary>

    public void OnEdit()
    {
        try
        {
            Notifier?.ClearStatus();
            if (_active == null)
            {
                throw new Exception(Gurux.DLMS.AMI.Client.Properties.Resources.NoItemIsSelected);
            }
            Notifier.Title = "Edit object";
            Notifier.Action = CrudAction.Update;
            Notifier.UpdateData("objecttemplates", _active);
            NavigationManager.NavigateTo("/deviceTemplate");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }


    /// <summary>
    /// Remove selected object template.
    /// </summary>

    public void OnRemove()
    {
        try
        {
            Notifier?.ClearStatus();
            if (_active == null)
            {
                throw new Exception(Gurux.DLMS.AMI.Client.Properties.Resources.NoItemIsSelected);
            }
            Notifier.Title = "Remove object";
            Notifier.Action = CrudAction.Delete;
            Notifier.UpdateData("objecttemplates", _active);
            NavigationManager.NavigateTo($"/deviceTemplate/");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    public void Dispose()
    {
        Notifier.RemoveLastPage(GXPages.Objects);
        Notifier.RemoveListener(this);
    }
}

