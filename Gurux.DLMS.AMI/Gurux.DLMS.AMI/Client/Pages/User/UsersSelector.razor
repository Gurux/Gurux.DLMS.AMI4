@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq

@attribute [Authorize(Roles = "Admin, User, UserGroupManager, UserGroup")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier

<SelectionContainer GetName="GetName" GetDescription="GetDescription">
    <SelectionList Title="Selected" ItemList="users" />
    <SelectionList Title="Available" ItemList="AllUsers" />
</SelectionContainer>

@code {
    [CascadingParameter]
    private UserGroupTab? Parent { get; set; }

    List<GXUser> AllUsers = new List<GXUser>();
    List<GXUser> users = new List<GXUser>();


    public void OnUpdated(object target)
    {

    }

    public string GetName(object target)
    {
        return (target as GXUser).UserName;
    }
    public string GetDescription(object target)
    {
        GXUser u = (target as GXUser);
        string str = u.GivenName + " " + u.Surname;
        if (string.IsNullOrEmpty(u.GivenName) && string.IsNullOrEmpty(u.Surname))
        {
            str = u.UserName;
        }
        return str;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            //Get selected user groups.
            if (Parent?.Active?.Users != null)
            {
                users = Parent.Active.Users;
            }
            else
            {
                throw new Exception(Properties.Resources.InvalidTarget);
            }
            ListUsers req = new ListUsers()
                {
                    Filter = new GXUser()
                };
            var ret = await Http.PostAsJson<ListUsersResponse>("api/User/List", req);
            foreach (GXUser it in ret.Users)
            {
                if (!users.Exists(q => q.Id == it.Id))
                {
                    AllUsers.Add(it);
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}

