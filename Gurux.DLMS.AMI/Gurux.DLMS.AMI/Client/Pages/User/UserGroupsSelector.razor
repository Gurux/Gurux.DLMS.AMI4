@using Gurux.DLMS.AMI.Client.Pages.Agent;
@using Gurux.DLMS.AMI.Client.Pages.Block;
@using Gurux.DLMS.AMI.Client.Pages.ComponentView;
@using Gurux.DLMS.AMI.Client.Pages.Device;
@using Gurux.DLMS.AMI.Client.Pages.DeviceTemplate;
@using Gurux.DLMS.AMI.Client.Pages.Module;
@using Gurux.DLMS.AMI.Client.Pages.Schedule;
@using Gurux.DLMS.AMI.Client.Pages.Script;
@using Gurux.DLMS.AMI.Client.Pages.Trigger;
@using Gurux.DLMS.AMI.Client.Pages.Workflow;
@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq

@attribute [Authorize(Roles = "Admin, User, UserGroupManager, UserGroup")]
@inject HttpClient Http
@inject IGXNotifier Notifier

<SelectionContainer GetName="GetName" GetDescription="GetDescription">
    <SelectionList Title="Selected" ItemList="userGroups" />
    <SelectionList Title="Available" ItemList="AllUserGroups" />
</SelectionContainer>

@code {

    [CascadingParameter]
    private UserTab? UserParent { get; set; }
    [CascadingParameter]
    private DeviceGroupTab? DeviceGroupParent { get; set; }
    [CascadingParameter]
    private AgentGroupTab? AgentGroupParent { get; set; }
    [CascadingParameter]
    private ModuleGroupTab? ModuleGroupParent { get; set; }
    [CascadingParameter]
    private WorkflowGroupTab? WorkflowGroupParent { get; set; }

    [CascadingParameter]
    private TriggerGroupTab? TriggerGroupParent { get; set; }
    [CascadingParameter]
    private BlockGroupTab? BlockGroupParent { get; set; }

    [CascadingParameter]
    private ComponentViewGroupTab? ComponentViewGroupParent { get; set; }
    [CascadingParameter]
    private ScriptGroupTab? ScriptGroupParent { get; set; }
    [CascadingParameter]
    private DeviceTemplateGroupTab? DeviceTemplateParent { get; set; }

    [CascadingParameter]
    private ScheduleGroupTab? ScheduleGroupParent { get; set; }

    List<GXUserGroup> AllUserGroups = new List<GXUserGroup>();
    List<GXUserGroup> userGroups = new List<GXUserGroup>();


    public void OnUpdated(object target)
    {

    }

    public string GetName(object target)
    {
        return (target as GXUserGroup).Name;
    }
    public string GetDescription(object target)
    {
        string str = (target as GXUserGroup).Description;
        if (string.IsNullOrEmpty(str))
        {
            str = (target as GXUserGroup).Name;
        }
        return str;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Notifier?.ProgressStart();
            Notifier?.ClearStatus();
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            ListUserGroups req = new ListUserGroups()
                {
                    Filter = new GXUserGroup()
                };
            //Get selected user groups.
            if (ScheduleGroupParent?.Active?.UserGroups != null)
            {
                userGroups = ScheduleGroupParent.Active.UserGroups;
            }
            else if (DeviceTemplateParent?.Active?.UserGroups != null)
            {
                userGroups = DeviceTemplateParent.Active.UserGroups;
            }
            else if (DeviceGroupParent?.Active?.UserGroups != null)
            {
                userGroups = DeviceGroupParent.Active.UserGroups;
            }
            else if (AgentGroupParent?.Active?.UserGroups != null)
            {
                userGroups = AgentGroupParent.Active.UserGroups;
            }
            else if (ModuleGroupParent?.Active?.UserGroups != null)
            {
                userGroups = ModuleGroupParent.Active.UserGroups;
            }
            else if (WorkflowGroupParent?.Active?.UserGroups != null)
            {
                userGroups = WorkflowGroupParent.Active.UserGroups;
            }
            else if (TriggerGroupParent?.Active?.UserGroups != null)
            {
                userGroups = TriggerGroupParent.Active.UserGroups;
            }
            else if (BlockGroupParent?.Active?.UserGroups != null)
            {
                userGroups = BlockGroupParent.Active.UserGroups;
            }
            else if (ComponentViewGroupParent?.Active?.UserGroups != null)
            {
                userGroups = ComponentViewGroupParent.Active.UserGroups;
            }
            else if (ScriptGroupParent?.Active?.UserGroups != null)
            {
                userGroups = ScriptGroupParent.Active.UserGroups;
            }
            else if (UserParent?.Active?.UserGroups != null)
            {
                userGroups = UserParent.Active.UserGroups;
            }
            else
            {
                throw new Exception(Properties.Resources.InvalidTarget);
            }
            bool addDefaultBlocks = Notifier.Action == CrudAction.Create && !userGroups.Any();
            var ret = await Http.PostAsJson<ListUserGroupsResponse>("api/UserGroup/List", req);
            foreach (GXUserGroup it in ret.UserGroups)
            {
                //Add default groups when new object is created.
                if (addDefaultBlocks && it.Default.HasValue && it.Default.Value &&
                    !userGroups.Where(q => q.Id == it.Id).Any())
                {
                    userGroups.Add(it);
                }
                if (!userGroups.Exists(q => q.Id == it.Id))
                {
                    AllUserGroups.Add(it);
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}

