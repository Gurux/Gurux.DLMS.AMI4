@using Gurux.DLMS.AMI.Client.Pages.Script;
@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq

@inject HttpClient Http
@inject IGXNotifier Notifier

<SelectionContainer GetName="GetName" GetDescription="GetDescription">
    <SelectionList Title="Selected" ItemList="workflows" />
    <SelectionList Title="Available" ItemList="AllWorkflows" />
</SelectionContainer>

@code {
    [CascadingParameter]
    private ScriptTab? ScriptParent { get; set; }
    [CascadingParameter]
    private WorkflowGroupTab? WorkflowGroupParent { get; set; }


    List<GXWorkflow> AllWorkflows = new List<GXWorkflow>();
    List<GXWorkflow> workflows = new List<GXWorkflow>();

    string GetName(object target)
    {
        return (target as GXWorkflow).Name;
    }
    string GetDescription(object target)
    {
        return (target as GXWorkflow).Name;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ClearStatus();
            Notifier.ProgressStart();
            //Add selected workflow groups.
            if (ScriptParent?.Active?.Workflows != null)
            {
                workflows = ScriptParent.Active.Workflows;
            }
            else if (WorkflowGroupParent?.Active?.Workflows != null)
            {
                workflows = WorkflowGroupParent.Active.Workflows;
            }
            else
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            ListWorkflows req = new ListWorkflows()
                {
                    Filter = new GXWorkflow()
                };
            var ret = await Http.PostAsJson<ListWorkflowsResponse>("api/Workflow/List", req);
            foreach (GXWorkflow it in ret.Workflows)
            {
                if (!workflows.Exists(q => q.Id == it.Id))
                {
                    AllWorkflows.Add(it);
                }
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier.ProgressEnd();
        }
    }
}

