@page "/config/Workflow/{Id:guid?}"
@page "/config/Workflow/{Action}/{Id:guid?}"
@using Gurux.DLMS.AMI.Client.Pages.Script
@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Rest;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Shared.DTOs;
    using Gurux.DLMS.AMI.Shared.DTOs.Workflow

@attribute [Authorize(Roles = GXRoles.Admin + "," + GXRoles.WorkflowManager)]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier

<h1>
    @Title
</h1>
<CascadingValue Value="this">
    <TabControl>
        <TabTextTemplate>
            <span class=@context.Icon aria-hidden="true"></span>
            @context.Text
        </TabTextTemplate>
        <ChildContent>
            <AuthorizeView Roles=@GXRoles.ToString(GXRoles.Admin, GXRoles.WorkflowGroupManager)>
                <TabPage Text=@Properties.Resources.GeneralInformation Icon="oi oi-fork">
                    <div style="position: relative; width: 100%; ">
                        <Workflow Action="@Action"></Workflow>
                    </div>
                </TabPage>
            </AuthorizeView>
            <AuthorizeView Roles=@GXRoles.ToString(GXRoles.Admin, GXRoles.UserGroupManager)>
                <TabPage Text=@Properties.Resources.WorkflowGroups Icon="oi oi-timer">
                    <div style="position: relative; width: 100%; ">
                        <WorkflowGroupsSelector></WorkflowGroupsSelector>
                    </div>
                </TabPage>
            </AuthorizeView>
            <AuthorizeView Roles=@GXRoles.ToString(GXRoles.Admin, GXRoles.UserGroupManager)>
                <TabPage Text="@Properties.Resources.ScriptMethods" Icon="oi oi-script">
                    <div style="position: relative; width: 100%; ">
                        <ScriptMethodsSelector></ScriptMethodsSelector>
                    </div>
                </TabPage>
            </AuthorizeView>
        </ChildContent>
    </TabControl>
</CascadingValue>
<br />
@code {
    /// <summary>
    /// Action.
    /// </summary>
    [Parameter]
    public string? Action { get; set; }

    /// <summary>
    /// Active page.
    /// </summary>
    [Parameter]
    public string? Page { get; set; }

    /// <summary>
    /// Target ID.
    /// </summary>
    [Parameter]
    public Guid? Id { get; set; }

    /// <summary>
    /// Page title.
    /// </summary>
    private string? Title;

    /// <summary>
    /// Active item.
    /// </summary>
    public GXWorkflow Active = new GXWorkflow(null)
        {
            Active = true
        };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            switch (Action)
            {
                case "Add":
                    Title = Properties.Resources.Add;
                    break;
                case "Edit":
                    Title = Properties.Resources.Edit;
                    break;
                case "Remove":
                    Title = Properties.Resources.Remove;
                    break;
                default:
                    ClientHelpers.NavigateToLastPage(NavigationManager, Notifier);
                    return;
            }
            Title += " " + Properties.Resources.Workflow;
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            if (string.Compare(Action, "Add", true) != 0)
            {
                //Get workflow data.
                var tmp = (await Http.GetAsJsonAsync<GetWorkflowResponse>("api/Workflow?id=" + Id));
                if (tmp?.Item != null)
                {
                    Active = tmp.Item;
                    StateHasChanged();
                }
                else
                {
                    NavigationManager.NavigateTo("404");
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}

