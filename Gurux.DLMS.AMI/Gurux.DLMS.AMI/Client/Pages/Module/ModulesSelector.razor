@page "/modulesselector"
@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq

@attribute [Authorize(Roles = "Admin, User, ModuleGroupManager, ModuleGroup")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier
@implements IDisposable

<SelectionContainer GetName="GetName" GetDescription="GetDescription">
    <SelectionList Title="Selected" ItemList="modules" />
    <SelectionList Title="Available" ItemList="AllModules" />
</SelectionContainer>

@code {
    List<GXModule> AllModules = new List<GXModule>();
    List<GXModule> modules = new List<GXModule>();

    string GetName(object target)
    {
        return (target as GXModule).Id;
    }
    string GetDescription(object target)
    {
        return (target as GXModule).Id;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            Notifier.ChangePage(GXPages.ModulesSelector, null);
            //Add selected user groups.
            GXModuleGroup? userGroup = (GXModuleGroup?)Notifier.GetData(GXPages.ModuleGroup);
            if (userGroup == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            modules = userGroup.Modules;
            ListModules req = new ListModules()
                {
                    Filter = new GXModule()
                };
            var ret = await Http.PostAsJson<ListModulesResponse>("api/Module/List", req);
            foreach (GXModule it in ret.Modules)
            {
                if (!modules.Exists(q => q.Id == it.Id))
                {
                    AllModules.Add(it);
                }
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    public void Dispose()
    {
        Notifier.RemovePage(GXPages.ModulesSelector);
    }
}

