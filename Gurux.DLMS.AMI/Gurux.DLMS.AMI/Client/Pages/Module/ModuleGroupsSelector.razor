@using Gurux.DLMS.AMI.Client.Pages.User;
@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier

<SelectionContainer GetName="GetName" GetDescription="GetDescription">
    <SelectionList Title="Selected" ItemList="moduleGroups" />
    <SelectionList Title="Available" ItemList="AllModuleGroups" />
</SelectionContainer>

@code {
    [CascadingParameter]
    private UserGroupTab? UserGroupParent { get; set; }
    [CascadingParameter]
    private ModuleTab? ModuleParent { get; set; }

    List<GXModuleGroup> AllModuleGroups = new List<GXModuleGroup>();
    List<GXModuleGroup> moduleGroups = new List<GXModuleGroup>();


    public void OnUpdated(object target)
    {

    }

    public string GetName(object target)
    {
        return (target as GXModuleGroup).Name;
    }
    public string GetDescription(object target)
    {
        return (target as GXModuleGroup).Name;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            ListModuleGroups req = new ListModuleGroups()
                {
                    Filter = new GXModuleGroup()
                };
            if (UserGroupParent?.Active?.ModuleGroups != null)
            {
                //Add selected module.
                moduleGroups = UserGroupParent.Active.ModuleGroups;
            }
            else if (ModuleParent?.Active?.ModuleGroups != null)
            {
                //Add selected module.
                moduleGroups = ModuleParent.Active.ModuleGroups;
            }
            else
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            bool addDefaultBlocks = Notifier.Action == CrudAction.Create && !moduleGroups.Any();
            var ret = await Http.PostAsJson<ListModuleGroupsResponse>("api/ModuleGroup/List", req);
            foreach (GXModuleGroup it in ret.ModuleGroups)
            {
                //Add default groups when new module is created.
                if (addDefaultBlocks && it.Default.HasValue && it.Default.Value &&
                    !moduleGroups.Where(q => q.Id == it.Id).Any())
                {
                    moduleGroups.Add(it);
                }
                if (!moduleGroups.Exists(q => q.Id == it.Id))
                {
                    AllModuleGroups.Add(it);
                }
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}

