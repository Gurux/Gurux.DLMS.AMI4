<!--
// --------------------------------------------------------------------------
//  Gurux Ltd
//
//
//
// Filename:        $HeadURL$
//
// Version:         $Revision$,
//                  $Date$
//                  $Author$
//
// Copyright (c) Gurux Ltd
//
//---------------------------------------------------------------------------
//
//  DESCRIPTION
//
// This file is a part of Gurux Device Framework.
//
// Gurux Device Framework is Open Source software; you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2 of the License.
// Gurux Device Framework is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// This code is licensed under the GNU General Public License v2.
// Full text may be retrieved at http://www.gnu.org/licenses/gpl-2.0.txt
//---------------------------------------------------------------------------
-->
@page "/reports"
@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.DTOs.Report
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Text.Json
@using System.Text.Encodings.Web
@using System.Text.Json.Serialization

@attribute [Authorize(Roles = "Admin, ReportManager")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier
@inject IJSRuntime JSRuntime
@implements IDisposable

@inject IGXCookieStorage cookieStorage
@inject ILogger<Reports> Logger

<AuthorizeView Roles=@GXRoles.ToString(GXRoles.Admin, GXRoles.ReportManager)>
    <MenuControl RightCorner="true">
        <ChildContent>
            <MenuItem Text="@Properties.Resources.Report" Icon="oi oi-flash" OnClick="@(async () => await OnMakeReport())" />
            <MenuItem Text="@Properties.Resources.Add" Icon="oi oi-plus" OnClick="@OnAdd" />
            <MenuItem Text="@Properties.Resources.Remove" Icon="oi oi-trash" OnClick="@OnRemove" />
        </ChildContent>
    </MenuControl>
</AuthorizeView>

<GXTable @ref="table"
         Context="report"
         ItemsProvider="@GetItems"
         SelectionMode="SelectionMode.Multiple"
         Filter="@Filter"
         ShowAllUsers="@Header"
         ShowRemoved="@Header"
         Columns="@Columns"
         CanEdit="@CanEdit"
         OnSearch="@Updated">
    <FilterContent>
        <Fh Id="Name">
            <input class="form-control" type="text" placeholder="@Properties.Resources.FilterByName"
                   @onchange="@((ChangeEventArgs __e) => filter.Name = Convert.ToString(__e.Value))" />
        </Fh>
        <Fh Id="Develivery">
            <!--Develivery.-->
        </Fh>
        <Fh Id="Last">
            <!--Last.-->
        </Fh>
        <Fh Id="Next">
            <!--Next.-->
        </Fh>
        <Fh Id="Status">
            <!--Status.-->
        </Fh>
        <Fh Id="Type">
            <!--Type.-->
        </Fh>
        <Fh Id="Operation">
            <!--Operation.-->
        </Fh>
        <Fh Id="Interval">
            <!--Interval.-->
        </Fh>
        <Fh Id="Description">
            <!--Description.-->
        </Fh>
    </FilterContent>
    <MenuContent>
        <AuthorizeView Roles=@GXRoles.ToString(GXRoles.Admin, GXRoles.ReportManager)>
            <ContextMenuItem Text="@Properties.Resources.Report" Icon="oi oi-flash" OnClick="@(async () => await OnMakeReport())"></ContextMenuItem>
            <ContextMenuItem Text="@Properties.Resources.Edit" Icon="oi oi-pencil" OnClick="@OnEdit"></ContextMenuItem>
            <ContextMenuItem Text="@Properties.Resources.Remove" Icon="oi oi-trash" OnClick="@OnRemove"></ContextMenuItem>
        </AuthorizeView>
    </MenuContent>
    <HeaderContent>
        <Th Id="Name">@Properties.Resources.Name</Th>
        <Th Id="Delivery">@Properties.Resources.Delivery</Th>
        <Th Id="Last">@Properties.Resources.LastDevelivery</Th>
        <Th Id="Last">@Properties.Resources.NextDevelivery</Th>
        <Th Id="Status">@Properties.Resources.Status</Th>
        <Th Id="Type">@Properties.Resources.Type</Th>
        <Th Id="Operation">@Properties.Resources.Operation</Th>
        <Th Id="Interval">@Properties.Resources.Interval</Th>
        <Th Id="Description">@Properties.Resources.Description</Th>
    </HeaderContent>
    <ItemContent>
        <Td Id="Name" Link="@("config/Report/Edit/" + report.Id)"><span class=@(ClientHelpers.GetActiveDot(report.Active))></span>@report.Name</Td>
        <Td Id="Delivery">@report.Delivery</Td>
        <Td Id="Last">@report.Last?.DateTime</Td>
        <Td Id="Next">@report.Next?.DateTime</Td>
        <Td Id="Status">@report.Status</Td>
        <Td Id="Type">@((ReportType)report.Type)</Td>
        <Td Id="Operation">@((ReportOperation)report.Operation)</Td>
        <Td Id="Interval">@(TimeSpan.FromSeconds(report.Interval))</Td>
        <Td Id="Description">@report.Description</Td>
    </ItemContent>
</GXTable>
<br />

<!--Show report generation-->
@if (_make != null)
{
    <Dialog OnOk="@(async () => await OnGenerateReports())"
            Title="Make report"
            OkButtonTitle="@Properties.Resources.Report"
            OnCancel="OnCancel"
            CancelButtonTitle="@Properties.Resources.Close">
        <div class="row">
            <div style="width:100%">
                <div class="form-group">
                    <label>From</label>
                    <InputDate Type="@InputDateType.DateTimeLocal" id="from" class="form-control"
                               @bind-Value="_make.From" />
                </div>
                <div class="form-group">
                    <label>To</label>
                    <InputDate Type="@InputDateType.DateTimeLocal" id="to" class="form-control"
                               @bind-Value="_make.To" />
                </div>
                <div class="form-group">
                    <label>Count</label>
                    <GXInputNumber Id="Reports.Count"
                                   @bind-Value="_make.Count"
                                   class="form-control" />
                </div>
            </div>
        </div>
    </Dialog>
}

<!--Confirm delete-->
<Confirm @ref="DeleteConfirmation" ConfirmationChanged="OnDeleteConfirmation"
         OkTitle="@Properties.Resources.Remove" ConfirmationMessage=""
         ConfirmationTitle="@Properties.Resources.AreYouSureYouWantToDeleteSelectedItems">
</Confirm>

@code {

    /// <summary>
    /// Report make.
    /// </summary>
    private GXReport? _make;


    /// <summary>
    /// Hide make report dialog.
    /// </summary>
    public void OnCancel()
    {
        _make = null;
        StateHasChanged();
    }

    /// <summary>
    /// Selected report ID.
    /// </summary>
    [Parameter]
    public Guid? Id { get; set; }

    /// <inheritdoc />
    public string Name
    {
        get
        {
            return Gurux.DLMS.AMI.Client.Properties.Resources.Reports;
        }
    }

    /// <inheritdoc />
    public Type? ConfigurationUI
    {
        get
        {
            return null;
        }
    }

    /// <inheritdoc />
    public string? Icon
    {
        get
        {
            return "oi oi-calculator";
        }
    }

    /// <summary>
    /// Amount of the reports shown on the view.
    /// </summary>
    [Parameter]
    public int Count { get; set; } = 0;

    /// <summary>
    /// Is filter shown.
    /// </summary>
    [Parameter]
    public bool Filter { get; set; } = true;

    /// <summary>
    /// Is header shown.
    /// </summary>
    [Parameter]
    public bool Header { get; set; } = true;

    /// <summary>
    /// Is edit allowed.
    /// </summary>
    [Parameter]
    public bool CanEdit { get; set; } = true;

    /// <summary>
    /// Available columns.
    /// </summary>
    [Parameter]
    public string[]? Columns { get; set; }

    /// <summary>
    /// Is title shown.
    /// </summary>
    [Parameter]
    public bool Title { get; set; } = true;

    /// <summary>
    /// Report filter.
    /// </summary>
    private GXReport filter = new GXReport();
    /// <summary>
    /// User is verified before report is removed.
    /// </summary>
    protected ConfirmBase? DeleteConfirmation;
    /// <summary>
    /// Table reference.
    /// </summary>
    protected GXTable<GXReport>? table;

    /// <summary>
    /// Update table.
    /// </summary>
    protected async Task Updated()
    {
        try
        {
            if (table != null)
            {
                Notifier?.ClearStatus();
                await table.RefreshDataAsync(true);
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //Wait until table is loaded. Don't remove this or table is null and last settings are not available.
        await Task.Delay(1);
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            Notifier.On<IEnumerable<GXReport>>(this, nameof(IGXHubEvents.ReportUpdate), async (reports) =>
            {
                await Updated();
            });
            Notifier.On<IEnumerable<GXReport>>(this, nameof(IGXHubEvents.ReportDelete), async (reports) =>
            {
                await Updated();
            });
            Notifier.Clear();
            Notifier.UpdateButtons();
            if (table != null && Id != null)
            {
                //Get last selected item.
                table.Active = new GXReport() { Id = Id.Value };
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    private async ValueTask<ItemsProviderResult<GXReport>> GetItems(GXItemsProviderRequest request)
    {
        //Don't clear status or error is lost.
        Notifier?.ProgressStart();
        try
        {
            if (request.Removed)
            {
                filter.Removed = DateTimeOffset.MaxValue;
            }
            else
            {
                filter.Removed = null;
            }
            ListReports req = new ListReports()
                {
                    Index = request.StartIndex,
                    Count = request.Count,
                    Filter = filter,
                    OrderBy = request.OrderBy,
                    Descending = request.Descending,
                    AllUsers = request.ShowAllUserData
                };
            if (Count != 0)
            {
                req.Count = Count;
            }
            var ret = await Http.PostAsJson<ListReportsResponse>("api/Report/List", req, request.CancellationToken);
            return new ItemsProviderResult<GXReport>(ret.Reports, ret.Count);
        }
        catch (TaskCanceledException)
        {
            //Let the table component handle this.
            throw;
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
        return default;
    }

    /// <summary>
    /// Add new report.
    /// </summary>
    public void OnAdd()
    {
        try
        {
            ClientHelpers.NavigateTo(NavigationManager, Notifier, "config/Report/Add");
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    /// <summary>
    /// Edit report.
    /// </summary>
    public void OnEdit()
    {
        try
        {
            Notifier.ClearStatus();
            if (table?.Active == null)
            {
                throw new Exception(Gurux.DLMS.AMI.Client.Properties.Resources.NoItemIsSelected);
            }
            ClientHelpers.NavigateTo(NavigationManager, Notifier, "config/Report/Edit/" + table?.Active.Id);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    /// <summary>
    /// Make selected report.
    /// </summary>
    public async Task OnMakeReport()
    {
        _make = new GXReport()
            {
                From = DateTime.Now.Date,
                To = DateTime.Now
            };
        if (_make?.From != null && _make?.To != null)
        {
            string? str = await cookieStorage.GetValueAsync("Reports.Range");
            if (!string.IsNullOrEmpty(str))
            {
                if (int.TryParse(str, out int value))
                {
                    _make.From = DateTime.Now.Date.AddDays(value);
                }
            }
        }
        StateHasChanged();
    }

    /// <summary>
    /// Make selected reports.
    /// </summary>
    public async Task OnGenerateReports()
    {
        try
        {
            Notifier.ClearStatus();
            Notifier.ProgressStart();
            SendReport req = new SendReport();
            List<GXReport> reports = new List<GXReport>();
            if (table != null && table.SelectedItems.Any())
            {
                foreach (var it in table.SelectedItems)
                {
                    reports.Add(new GXReport()
                        {
                            Id = it.Id,
                            Delivery = AMI.Shared.DTOs.Enums.ReportDelivery.Caller,
                            Operation = (byte)ReportOperation.Instant,
                            From = _make?.From,
                            To = _make?.To,
                            Count = _make?.Count
                        });
                }
            }
            else if (table?.Active != null)
            {
                reports.Add(new GXReport()
                    {
                        Id = table.Active.Id,
                        Delivery = AMI.Shared.DTOs.Enums.ReportDelivery.Caller,
                        Operation = (byte)ReportOperation.Instant,
                        From = _make?.From,
                        To = _make?.To,
                        Count = _make?.Count
                    });
            }
            else
            {
                throw new Exception(Gurux.DLMS.AMI.Client.Properties.Resources.NoItemIsSelected);
            }
            if (_make?.From != null && _make?.To != null)
            {
                await cookieStorage.SetValueAsync("Reports.Range",
                (_make.From - _make.To).Value.Days.ToString());
            }
            req.Reports = reports.ToArray();
            var ret = await Http.PostAsJson<SendReportResponse>("api/Report/Send", req);
            IJSObjectReference download = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./download.js");
            if (ret.Reports != null)
            {
                JsonSerializerOptions options = new JsonSerializerOptions()
                    {
                        Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping,
                        WriteIndented = true,
                        DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault
                    };
                foreach (var it in ret.Reports)
                {
                    string data = JsonSerializer.Serialize(ret.Reports, options);
                    await download.InvokeVoidAsync("loadFile", it.Name + "_" + it.Last + ".json", data);
                }
            }
            _make = null;
            StateHasChanged();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier.ProcessError(ex);
        }
        finally
        {
            Notifier.ProgressEnd();
        }
    }

    /// <summary>
    /// Remove selected report.
    /// </summary>
    public void OnRemove()
    {
        try
        {
            if (table == null || !table.SingleOrDefault().Any())
            {
                throw new Exception(Gurux.DLMS.AMI.Client.Properties.Resources.NoItemIsSelected);
            }
            DeleteConfirmation?.Show(table?.SingleOrDefault()?.Select(s => s.Name).ToArray());
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    /// <summary>
    /// Delete the selected reports.
    /// </summary>
    public async Task OnDeleteConfirmation(ConfirmArgs args)
    {
        try
        {
            if (table != null && args.Confirm)
            {
                RemoveReport req = new RemoveReport()
                    {
                        Delete = args.Delete,
                        Ids = table.SingleOrDefault().Select(w => w.Id).ToArray()
                    };
                await Http.PostAsJson<RemoveReportResponse>("api/Report/Delete", req);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    public void Dispose()
    {
        Notifier.RemoveListener(this);
    }
}

