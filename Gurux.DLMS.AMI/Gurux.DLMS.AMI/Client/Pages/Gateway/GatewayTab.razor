@page "/Gateway/{Id:guid?}"
@page "/Gateway/{Action}/{Id:guid?}"

@using Gurux.DLMS.AMI.Client.Pages.Device
@using Gurux.DLMS.AMI.Client.Pages.Objects
@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Rest;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Shared.DTOs
@using System.Globalization;

@attribute [Authorize(Roles = GXRoles.Admin + "," + GXRoles.GatewayManager + "," + GXRoles.GatewayGroupManager)]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier

<CascadingValue Value="this">
    <TabControl>
        <TabTextTemplate>
            <span class=@context.Icon aria-hidden="true"></span>
            @context.Text
        </TabTextTemplate>
        <ChildContent>
            <AuthorizeView Roles=@GXRoles.ToString(GXRoles.Admin, GXRoles.GatewayManager)>
                <TabPage Text=@Properties.Resources.GeneralInformation Icon="oi oi-cloud-download">
                    <div style="position: relative; width: 100%; ">
                        <Gateway Action="@Action"></Gateway>
                    </div>
                </TabPage>
            </AuthorizeView>
            <AuthorizeView Roles=@GXRoles.ToString(GXRoles.Admin, GXRoles.UserGroupManager)>
                <TabPage Text=@Properties.Resources.GatewayGroups Icon="oi oi-cloud-download">
                    <div style="position: relative; width: 100%; ">
                        <GatewayGroupsSelector></GatewayGroupsSelector>
                    </div>
                </TabPage>
            </AuthorizeView>
            <AuthorizeView Roles=@GXRoles.ToString(GXRoles.Admin, GXRoles.DeviceGroupManager)>
                <TabPage Text=@Properties.Resources.DeviceGroups Icon="oi oi-cloud-download">
                    <div style="position: relative; width: 100%; ">
                        <DeviceGroupsSelector></DeviceGroupsSelector>
                    </div>
                </TabPage>
            </AuthorizeView>          
            <AuthorizeView Roles=@GXRoles.ToString(GXRoles.Admin, GXRoles.DeviceManager)>
                <TabPage Text=@Properties.Resources.Devices Icon="oi oi-cloud-download">
                    <div style="position: relative; width: 100%; ">
                        <DevicesSelector></DevicesSelector>
                    </div>
                </TabPage>
            </AuthorizeView>
        </ChildContent>
    </TabControl>
</CascadingValue>
<br />
@code {
    [Parameter]
    public string? Action { get; set; }

    /// <summary>
    /// Active page.
    /// </summary>
    [Parameter]
    public string? Page { get; set; }

    [Parameter]
    public Guid? Id { get; set; }

    private string? Title;

    /// <summary>
    /// Active item.
    /// </summary>
    public GXGateway Active = new GXGateway(null);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            switch (Action)
            {
                case "Add":
                    Title = Properties.Resources.Add;
                    break;
                case "Edit":
                    Title = Properties.Resources.Edit;
                    break;
                case "Remove":
                    Title = Properties.Resources.Remove;
                    break;
                default:
                    ClientHelpers.NavigateToLastPage(NavigationManager, Notifier);
                    return;
            }
            Title += " " + Properties.Resources.Gateway;
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            if (string.Compare(Action, "Add", true) != 0)
            {
                //Get gateway data.
                var tmp = (await Http.GetAsJsonAsync<GetGatewayResponse>(string.Format("api/Gateway?id={0}", Id)));
                if (tmp?.Item != null)
                {
                    Active = tmp.Item;
                    StateHasChanged();
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}

