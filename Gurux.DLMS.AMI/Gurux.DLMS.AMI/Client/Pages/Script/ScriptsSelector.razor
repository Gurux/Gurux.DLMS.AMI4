@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq

@inject HttpClient Http
@inject IGXNotifier Notifier

<SelectionContainer GetName="GetName" GetDescription="GetDescription">
    <SelectionList Title="Selected" ItemList="scripts" />
    <SelectionList Title="Available" ItemList="AllScripts" />
</SelectionContainer>

@code {
    [CascadingParameter]
    private ScriptGroupTab? Parent { get; set; }

    List<GXScript> AllScripts = new List<GXScript>();
    List<GXScript> scripts = new List<GXScript>();

    string GetName(object target)
    {
        return (target as GXScript).Description;
    }
    string GetDescription(object target)
    {
        return (target as GXScript).Name;
    }

    protected override async Task OnInitializedAsync()
    {
        Notifier?.ProgressStart();
        Notifier?.ClearStatus();
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            if (Parent?.Active?.Scripts != null)
            {
                scripts = Parent.Active.Scripts;
            }
            else
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            ListScripts req = new ListScripts()
                {
                    Filter = new GXScript()
                };

            var ret = await Http.PostAsJson<ListScriptsResponse>("api/Script/List", req);
            foreach (GXScript it in ret.Scripts)
            {
                if (!scripts.Exists(q => q.Id == it.Id))
                {
                    AllScripts.Add(it);
                }
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }

        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}

