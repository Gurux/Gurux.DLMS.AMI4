@using Gurux.DLMS.AMI.Client.Pages.Workflow;
@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq

@inject HttpClient Http
@inject IGXNotifier Notifier

<SelectionContainer GetName="GetName" GetDescription="GetDescription">
    <SelectionList Title="Selected" ItemList="scriptMethods" />
    <SelectionList Title="Available" ItemList="AllScriptMethods" />
</SelectionContainer>

@code {
    [CascadingParameter]
    private WorkflowTab? Parent { get; set; }

    List<GXScriptMethod> AllScriptMethods = new List<GXScriptMethod>();
    List<GXScriptMethod> scriptMethods = new List<GXScriptMethod>();

    string GetName(object target)
    {
        GXScriptMethod sm = target as GXScriptMethod;
        return sm.Description;
    }
    string GetDescription(object target)
    {
        GXScriptMethod sm = target as GXScriptMethod;
        return sm.Script.Name + "." + sm.Name;
    }

    protected override async Task OnInitializedAsync()
    {
        Notifier?.ProgressStart();
        Notifier?.ClearStatus();
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            if (Parent?.Active?.ScriptMethods != null)
            {
                //Get scripts from selected script group.
                scriptMethods = Parent.Active.ScriptMethods;
            }
            else
            {
                throw new Exception(Properties.Resources.InvalidTarget);
            }
            ListScripts req = new ListScripts();
            var ret = await Http.PostAsJson<ListScriptsResponse>("api/Script/List", req);
            foreach (GXScript script in ret.Scripts)
            {
                foreach (GXScriptMethod method in script.Methods)
                {
                    //Update parent.
                    method.Script = script;
                    if (!scriptMethods.Exists(q => q.Id == method.Id))
                    {
                        AllScriptMethods.Add(method);
                    }
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}

