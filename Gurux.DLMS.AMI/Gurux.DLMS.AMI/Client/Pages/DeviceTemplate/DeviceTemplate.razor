@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.Rest
@using Gurux.DLMS
@using Gurux.DLMS.ManufacturerSettings
@using Gurux.DLMS.Objects
@using System.Xml.Linq
@using System.IO
@using System.Xml
@using System.Xml.Serialization
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Text.Json
@using System.Web;

@attribute [Authorize(Roles = "Admin, TemplateManager")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier
@inject ILogger<DeviceTemplate> Logger

@if (Active != null)
{
    <EditForm Model="@Active">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <table>
            <tr>
                <th>
                    @if (isLoading)
                    {
                        <p>Loading @fileName...</p>
                    }
                    else
                    {
                        @if (IsAdding)
                        {
                            <p><InputFile OnChange="@LoadFile" /></p>
                        }
                        @if (IsAdding && templates != null && templates.Any())
                        {
                        <th>Type:</th>
                        <InputSelect id="type" @bind-Value="TemplateType" placeholder="Device Active type">
                                @foreach (var it in templates)
                                {
                                <option value="@it.Type">@it.Type</option>
                                }
                        </InputSelect>
                        }
                    }
                </th>
            </tr>
            <tr>
                <th>
                    Name:
                </th>
                <th>
                    <InputText id="name" disabled="@IsDeleting"
                           @bind-Value="TemplateName"
                               placeholder="Device Active name" />
                </th>
            </tr>
            <tr>
                <th>
                    Wait time:
                </th>
                <th>
                    <InputNumber id="waitTime" disabled="@IsDeleting"
                             @bind-Value="Active.WaitTime" />
                </th>
            </tr>
            <tr>
                <th>
                    Resend count:
                </th>
                <th>
                    <InputNumber id="resendCount" disabled="@IsDeleting"
                             @bind-Value="Active.ResendCount" />
                </th>
            </tr>
            @if (Active.Updated != null)
            {
                <div class="form-group">
                    <label>@Properties.Resources.Updated</label>
                    <InputDate Type="@InputDateType.DateTimeLocal" id="generation" readonly="readonly" class="form-control"
                       @bind-Value="Active.Updated" />
                </div>
            }
            @if (Active.Removed != null)
            {
                <div class="form-group">
                    <label>@Properties.Resources.Remove</label>
                    <InputDate Type="@InputDateType.DateTimeLocal" id="remove" class="form-control"
                       @bind-Value="Active.Removed" />
                </div>
            }
            @if (action == CrudAction.Delete)
            {
                <hr />
                <p>
                </p>
                <div class="form-group">
                    <InputRadioGroup @bind-Value="DeleteTarget">
                        <InputRadio Value="false">
                        </InputRadio>
                        <label>@Properties.Resources.TargetDisableQuestion</label><br>
                        <InputRadio Value="true">
                        </InputRadio>
                        <label>@Properties.Resources.TargetDeleteQuestion</label>
                    </InputRadioGroup>
                    <br />
                </div>
            }
        </table>
    </EditForm>
}
@code {

    [CascadingParameter]
    private DeviceTemplateTab? Parent { get; set; }
    private GXDeviceTemplate? _active;

    private GXDeviceTemplate? Active
    {
        get
        {
            if (_active != null)
            {
                return _active;
            }
            return Parent?.Active;
        }
    }

    /// <summary>
    /// User action.
    /// </summary>
    [Parameter]
    public string? Action { get; set; }

    private CrudAction action;
    /// <summary>
    /// Selected item.
    /// </summary>
    [Parameter]
    public Guid? Id { get; set; }

    private bool DeleteTarget;
    private bool isLoading;
    List<GXDeviceTemplate> templates = new List<GXDeviceTemplate>();
    private string? fileName = null;

    public string? IsDeleting
    {
        get
        {
            if (action != CrudAction.Delete)
            {
                return null;
            }
            return "disabled";
        }
    }

    //User changes name of the Active.
    string? TemplateName
    {
        get
        {
            if (Active == null)
            {
                return null;
            }
            return Active.Name;
        }
        set
        {
            if (Active != null)
            {
                Active.Name = value;
            }
        }
    }

    public bool IsAdding
    {
        get
        {
            return action == CrudAction.Create;
        }
    }

    internal class Password
    {
        //Don't change this.
        public static string Key = "Gurux Ltd.";
    }

    private string? TemplateType
    {
        get
        {
            return Active?.Type;
        }
        set
        {
            foreach (GXDeviceTemplate it in templates)
            {
                if (Parent != null && it.Type == value)
                {
                    _active = it;
                    break;
                }
            }
        }
    }

    /// <summary>
    /// Copy meter settings.
    /// </summary>
    /// <param name="target"></param>
    /// <param name="source"></param>
    public static void Copy(GXDeviceTemplate target, GXDLMSDevice source)
    {
        target.WaitTime = source.WaitTime;
        target.ResendCount = source.ResendCount;
        target.Type = source.Name;
        target.MediaType = source.MediaType;
        target.MediaSettings = source.MediaSettings;
        var settings = new Gurux.DLMS.AMI.Shared.DTOs.GXDLMSSettings();
        settings.MaximumBaudRate = source.MaximumBaudRate;
        settings.Authentication = (byte)source.Authentication;
        settings.AuthenticationName = source.AuthenticationName;
        settings.Standard = (byte)source.Standard;
        settings.Password = source.Password;
        settings.HexPassword = source.HexPassword;
        settings.Security = (byte)source.Security;
        settings.ClientSystemTitle = source.SystemTitle;
        settings.DeviceSystemTitle = source.ServerSystemTitle;
        settings.DedicatedKey = source.DedicatedKey;
        settings.PreEstablished = source.PreEstablished;
        settings.BlockCipherKey = source.BlockCipherKey;
        settings.AuthenticationKey = source.AuthenticationKey;
        settings.InvocationCounter = source.InvocationCounter;
        settings.FrameCounter = source.FrameCounter;
        settings.Challenge = source.Challenge;
        settings.PhysicalAddress = source.PhysicalAddress;
        settings.LogicalAddress = source.LogicalAddress;
        settings.UtcTimeZone = source.UtcTimeZone;
        settings.ClientAddress = source.ClientAddress;
        settings.UseRemoteSerial = source.UseRemoteSerial;
        settings.InterfaceType = (int)source.InterfaceType;
        settings.MaxInfoTX = source.MaxInfoTX;
        settings.MaxInfoRX = source.MaxInfoRX;
        settings.WindowSizeTX = source.WindowSizeTX;
        settings.WindowSizeRX = source.WindowSizeRX;
        settings.PduSize = source.PduSize;
        settings.UserId = source.UserId;
        settings.NetworkId = source.NetworkId;
        settings.InactivityTimeout = source.InactivityTimeout;
        settings.ServiceClass = (byte)source.ServiceClass;
        settings.Priority = (byte)source.Priority;
        settings.ServerAddressSize = source.ServerAddressSize;
        settings.Conformance = source.Conformance;
        settings.Manufacturer = source.Manufacturer;
        settings.HDLCAddressing = (int)source.HDLCAddressing;
        settings.UseLogicalNameReferencing = source.UseLogicalNameReferencing;
        settings.UseProtectedRelease = source.UseProtectedRelease;
        target.Settings = JsonSerializer.Serialize(settings);
    }

    /// <summary>
    /// Get device templates from the XML.
    /// </summary>
    /// <param name="xml"></param>
    private void UpdateDeviceTemplates(string xml)
    {
        try
        {
            Notifier.ClearStatus();
            Notifier.ProgressStart();
            isLoading = true;
            StateHasChanged();
            templates = ClientHelpers.ConvertToTemplates(Logger, xml);
            if (Parent != null && templates.Any())
            {
                _active = templates[0];
            }
        }
        catch (Exception ex)
        {
            fileName = null;
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier.ProgressEnd();
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadFile(InputFileChangeEventArgs e)
    {
        fileName = e.File.Name;
        try
        {
            templates.Clear();
            Notifier?.ClearStatus();
            string xml;
            using (StreamReader reader = new StreamReader(e.File.OpenReadStream(8000000)))
            {
                xml = await reader.ReadToEndAsync();
            }
            await Task.Run(() => UpdateDeviceTemplates(xml));
        }
        catch (Exception ex)
        {
            fileName = null;
            Notifier?.ProcessError(ex);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            Notifier.Clear();
            if (Active == null && Id != null)
            {
                //Get device template data.
                var tmp = (await Http.GetAsJsonAsync<GetDeviceTemplateResponse>(string.Format("api/DeviceTemplate?id={0}", Id)));
                if (tmp?.Item != null)
                {
                    _active = tmp.Item;
                }
            }
            if (Active == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            action = ClientHelpers.GetAction(Action);
            if (action != CrudAction.Create)
            {
                templates.Add(Active);
            }
            if (action == CrudAction.Delete)
            {
                Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Remove, Icon = "oi oi-trash", OnClick = OnSave });
            }
            else
            {
                Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Save, Icon = "oi oi-pencil", OnClick = OnSave });
            }
            Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Cancel, Icon = "oi oi-action-undo", OnClick = OnCancel });
            Notifier.UpdateButtons();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    /// <summary>
    /// Save device Active.
    /// </summary>
    public async void OnSave()
    {
        try
        {
            if (Active == null)
            {
                throw new Exception(Properties.Resources.InvalidTarget);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            if (action == CrudAction.Delete)
            {
                await Http.PostAsJson<RemoveDeviceTemplateResponse>("api/DeviceTemplate/Delete", new RemoveDeviceTemplate()
                    {
                        Ids = new Guid[] { Active.Id },
                        Delete = DeleteTarget
                    });
            }
            else if (action == CrudAction.Create)
            {
                await Http.PostAsJson<UpdateDeviceTemplateResponse>("api/DeviceTemplate/Add", new UpdateDeviceTemplate()
                    {
                        Templates = new GXDeviceTemplate[] { Active }
                    });
            }
            else if (action == CrudAction.Update)
            {
                await Http.PostAsJson<UpdateDeviceTemplateResponse>("api/DeviceTemplate/Update", new UpdateDeviceTemplate()
                    {
                        Templates = new GXDeviceTemplate[] { Active }
                    });
            }
            else
            {
                throw new Exception(Properties.Resources.InvalidTarget);
            }
            ClientHelpers.NavigateToLastPage(NavigationManager, Notifier);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    /// <summary>
    /// Cancel update.
    /// </summary>
    private void OnCancel()
    {
        ClientHelpers.NavigateToLastPage(NavigationManager, Notifier);
    }
}
