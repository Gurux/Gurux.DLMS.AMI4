@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq

@attribute [Authorize(Roles = "Admin, User, BlockGroupManager, BlockGroup")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier

<SelectionContainer GetName="GetName" GetDescription="GetDescription">
    <SelectionList Title="Selected" ItemList="blocks" />
    <SelectionList Title="Available" ItemList="AllBlocks" />
</SelectionContainer>

@code {
    [CascadingParameter]
    private BlockGroupTab? Parent { get; set; }

    List<GXBlock> AllBlocks = new List<GXBlock>();
    List<GXBlock> blocks = new List<GXBlock>();

    string GetName(object target)
    {
        return (target as GXBlock).Title;
    }
    string GetDescription(object target)
    {
        return (target as GXBlock).Title;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            if (Parent?.Active?.Blocks != null)
            {
                //Add selected blocks.
                blocks = Parent.Active.Blocks;
            }
            else
            {
                throw new Exception(Properties.Resources.InvalidTarget);
            }
            ListBlocks req = new ListBlocks();
            var ret = await Http.PostAsJson<ListBlocksResponse>("api/Block/List", req);
            foreach (GXBlock it in ret.Blocks)
            {
                if (!blocks.Exists(q => q.Id == it.Id))
                {
                    AllBlocks.Add(it);
                }
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}

