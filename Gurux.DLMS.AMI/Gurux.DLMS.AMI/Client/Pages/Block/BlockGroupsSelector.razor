@using Gurux.DLMS.AMI.Client.Pages.User;
@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq

@attribute [Authorize(Roles = "Admin, BlockGroup, BlockGroupManager, UserGroup")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier

<SelectionContainer GetName="GetName" GetDescription="GetDescription">
    <SelectionList Title="Selected" ItemList="blockGroups" />
    <SelectionList Title="Available" ItemList="AllBlockGroups" />
</SelectionContainer>

@code {
    [CascadingParameter]
    private UserGroupTab? UserGroupParent { get; set; }

    [CascadingParameter]
    private BlockTab? BlockParent { get; set; }

    List<GXBlockGroup> AllBlockGroups = new List<GXBlockGroup>();
    List<GXBlockGroup> blockGroups = new List<GXBlockGroup>();


    public void OnUpdated(object target)
    {

    }

    public string GetName(object target)
    {
        return (target as GXBlockGroup).Name;
    }
    public string GetDescription(object target)
    {
        return (target as GXBlockGroup).Name;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            ListBlockGroups req = new ListBlockGroups()
                {
                    Filter = new GXBlockGroup()
                };
            if (UserGroupParent?.Active?.BlockGroups != null)
            {
                //Add selected block groups.
                blockGroups = UserGroupParent.Active.BlockGroups;
            }
            else if (BlockParent?.Active?.BlockGroups != null)
            {
                //Add selected block groups.
                blockGroups = BlockParent.Active.BlockGroups;
            }
            else
            {
                //It's ok if block doesn't belong to any group.
            }
            bool addDefaultBlocks = Notifier.Action == CrudAction.Create && !blockGroups.Any();
            var ret = await Http.PostAsJson<ListBlockGroupsResponse>("api/BlockGroup/List", req);
            foreach (GXBlockGroup it in ret.BlockGroups)
            {
                //Add default groups when new block is created.
                if (addDefaultBlocks && it.Default.GetValueOrDefault(false) &&
                    !blockGroups.Where(q => q.Id == it.Id).Any())
                {
                    blockGroups.Add(it);
                }
                if (!blockGroups.Exists(q => q.Id == it.Id))
                {
                    AllBlockGroups.Add(it);
                }
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}

