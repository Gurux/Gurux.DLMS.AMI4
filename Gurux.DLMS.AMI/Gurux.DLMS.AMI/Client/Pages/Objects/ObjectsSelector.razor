@using Gurux.DLMS.AMI.Client.Pages.Schedule;
@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq

@attribute [Authorize(Roles = "Admin, Object, ObjectManager, UserGroup")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier

<SelectionContainer GetName="GetName" GetDescription="GetDescription">
    <SelectionList Title="Selected" ItemList="objects" />
    <SelectionList Title="Available" ItemList="AllObjects" />
</SelectionContainer>

@code {
    [CascadingParameter]
    private ScheduleTab? ScheduleParent { get; set; }

    List<GXObject> AllObjects = new List<GXObject>();
    List<GXObject> objects = new List<GXObject>();


    public void OnUpdated(object target)
    {

    }

    public string GetName(object target)
    {
        return (target as GXObject).Template.Name;
    }
    public string GetDescription(object target)
    {
        return (target as GXObject).Template.Name;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            ListObjects req = new ListObjects()
                {
                    Filter = new GXObject()
                };
            if (ScheduleParent != null && ScheduleParent.Active != null && ScheduleParent.Active.Objects != null)
            {
                //Get selected objects.
                objects = ScheduleParent.Active.Objects;
            }
            else
            {
                throw new ArgumentOutOfRangeException();
            }
            var ret = await Http.PostAsJson<ListObjectsResponse>("api/Object/List", req);
            foreach (GXObject it in ret.Objects)
            {
                if (!objects.Exists(q => q.Id == it.Id))
                {
                    AllObjects.Add(it);
                }
            }
            Notifier.UpdateButtons();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}

