<!--
// --------------------------------------------------------------------------
//  Gurux Ltd
//
//
//
// Filename:        $HeadURL$
//
// Version:         $Revision$,
//                  $Date$
//                  $Author$
//
// Copyright (c) Gurux Ltd
//
//---------------------------------------------------------------------------
//
//  DESCRIPTION
//
// This file is a part of Gurux Device Framework.
//
// Gurux Device Framework is Open Source software; you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2 of the License.
// Gurux Device Framework is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// This code is licensed under the GNU General Public License v2.
// Full text may be retrieved at http://www.gnu.org/licenses/gpl-2.0.txt
//---------------------------------------------------------------------------
-->

@using Gurux.DLMS.AMI.Client.Pages.Schedule
@using Gurux.DLMS.AMI.Client.Pages.Report
@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq
@using System.Text;

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier

<SelectionContainer TItem="GXObject" @ref="@_selectionContainer">
    <SelectionList Title="Selected" @ref="_selected"
                   ShowAllUsers="false"
                   ItemsProvider="@GetSelectedItems"
                   OnAdded="OnAdded"
                   OnRemoved="@Removed">
        <DataContent>
            @(context.Template?.LogicalName + " " + context.Template?.Name)
        </DataContent>
        <FilterContent>
            <Search Placeholder="@Properties.Resources.FilterByName"
                    OnClickAsync="@SearchSelectedByName" />
        </FilterContent>
        <ButtonContent>
            <div>
                <button style="float: right;" class="btn btn-outline-secondary border-left-0 border"
                        type="button" onclick="@(() => RemoveAll())">
                    &raquo;
                </button>
            </div>
        </ButtonContent>
    </SelectionList>
    <SelectionList Title="Available" @ref="_available"
                   ItemsProvider="@GetItems">
        <DataContent>
            @(context.Template?.LogicalName + " " + context.Template?.Name)
        </DataContent>
        <FilterContent>
            <Search Placeholder="@Properties.Resources.FilterByName"
                    OnClickAsync="@SearchByName" />
            <Search Placeholder="@Properties.Resources.FilterByDevice"
                    OnClickAsync="@SearchByDevice" />
            <Search Placeholder="@Properties.Resources.FilterByDeviceType"
                    OnClickAsync="@SearchByDeviceType" />
            <Search Placeholder="@Properties.Resources.FilterByUser"
                    OnClickAsync="@SearchByUser" />
        </FilterContent>
        <ButtonContent>
            <div>
                <button style="float: left;" class="btn btn-outline-secondary border-left-0 border"
                        type="button" onclick="@(() => AddAll())">
                    &laquo;
                </button>
            </div>
        </ButtonContent>
    </SelectionList>
</SelectionContainer>


@code {
    [CascadingParameter]
    private ScheduleTab? ScheduleParent { get; set; }

    SelectionList<GXObject>? _selected;
    SelectionList<GXObject>? _available;
    SelectionContainer<GXObject>? _selectionContainer;
    /// <summary>
    /// Object filter.
    /// </summary>
    private GXObject filter = new GXObject(null);
    /// <summary>
    /// Selected object filter.
    /// </summary>
    private string? selectedNameFilter;

    protected async Task SearchSelectedByName(string? name)
    {
        try
        {
            if (_selected != null)
            {
                selectedNameFilter = name;
                await _selected.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    protected async Task SearchByName(string? name)
    {
        try
        {
            if (_available != null)
            {
                if (filter.Template == null)
                {
                    filter.Template = new GXObjectTemplate();
                }
                filter.Template.Name = name;
                Notifier?.ClearStatus();
                await _available.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    protected async Task SearchByUser(string? userName)
    {
        try
        {
            if (_available != null)
            {
                if (string.IsNullOrEmpty(userName))
                {
                    filter.Device = null;
                }
                else
                {
                    GXUser user = new GXUser();
                    user.UserName = userName;
                    GXDeviceGroup dg = new GXDeviceGroup();
                    GXUserGroup ug = new GXUserGroup();
                    dg.UserGroups = new List<GXUserGroup>(new GXUserGroup[] { ug });
                    ug.Users = new List<GXUser>(new GXUser[] { user });
                    filter.Device = new GXDevice();
                    filter.Device.DeviceGroups = new List<GXDeviceGroup>(new GXDeviceGroup[] { dg });
                }
                Notifier?.ClearStatus();
                await _available.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    protected async Task SearchByDevice(string? deviceName)
    {
        try
        {
            if (_available != null)
            {
                if (string.IsNullOrEmpty(deviceName))
                {
                    filter.Device = null;
                }
                else
                {
                    filter.Device = new GXDevice()
                        {
                            Name = deviceName
                        };
                }
                Notifier?.ClearStatus();
                await _available.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    protected async Task SearchByDeviceType(string? deviceType)
    {
        try
        {
            if (_available != null)
            {
                if (string.IsNullOrEmpty(deviceType))
                {
                    filter.Device.Template = null;
                }
                else
                {
                    if (filter.Device == null)
                    {
                        filter.Device = new GXDevice();
                    }
                    filter.Device.Template = new GXDeviceTemplate()
                        {
                            Name = deviceType
                        };
                }
                Notifier?.ClearStatus();
                await _available.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    /// <summary>
    /// Add all objects to selected items.
    /// </summary>
    /// <returns></returns>
    private async Task AddAll()
    {
        int max = 0;
        //max 1000 items are added at the one time.
        if (_available != null && _available.TotalCount > 1000)
        {
            max = 1000;
        }
        var ret = await GetItems(new GXItemsProviderRequest(0, max));
        await OnAdded(ret.Items);
        if (_selected != null)
        {
            await _selected.RefreshDataAsync();
        }
        if (_available != null)
        {
            await _available.RefreshDataAsync();
        }
    }

    private List<GXObject> GetObjects()
    {
        return ScheduleParent.Active.Objects;
    }

    /// <summary>
    /// Remove all objects from selected items.
    /// </summary>
    /// <returns></returns>
    private async Task RemoveAll()
    {
        List<GXObject> objects = GetObjects();
        objects.Clear();
        if (_selected != null)
        {
            await _selected.RefreshDataAsync();
        }
        if (_available != null)
        {
            await _available.RefreshDataAsync();
        }
    }

    /// <summary>
    /// New object is added for selection list.
    /// </summary>
    public async Task OnAdded(IEnumerable<GXObject> items)
    {
        List<GXObject> objects = GetObjects();
        objects.InsertRange(0, items);
        if (_selected != null)
        {
            await _selected.RefreshDataAsync();
        }
    }

    /// <summary>
    /// Item has removed from the lists.
    /// </summary>
    private async Task Removed(IEnumerable<GXObject> items)
    {
        List<GXObject> objects = GetObjects();
        objects.RemoveAll(w => items.Contains(w));
        if (_selected != null)
        {
            await _selected.RefreshDataAsync();
        }
    }

    /// <summary>
    /// Filter is done when SearchSelectedByName is called.
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    private ValueTask<ItemsProviderResult<GXObject>> GetSelectedItems(GXItemsProviderRequest request)
    {
        List<GXObject> objects = GetObjects();
        int total = objects.Count;
        if (!string.IsNullOrEmpty(selectedNameFilter))
        {
            objects = objects.Where(w => w.Template.Name.ToLower().Contains(selectedNameFilter.ToLower())).ToList();
        }
        return new(new ItemsProviderResult<GXObject>(objects.Skip(request.StartIndex).Take(request.Count), total));
    }

    private async ValueTask<ItemsProviderResult<GXObject>> GetItems(GXItemsProviderRequest request)
    {
        //Don't clear status or error is lost.
        Notifier?.ProgressStart();
        try
        {
            ListObjects req = new ListObjects()
                {
                    Index = (UInt64)request.StartIndex,
                    Count = (UInt64)request.Count,
                    Filter = filter,
                    Descending = request.Descending,
                    AllUsers = request.ShowAllUserData,
                    Select = new string[] { "Device" },
                    Exclude = GetObjects().Select(s => s.Id).ToArray()
                };
            var ret = await Http.PostAsJson<ListObjectsResponse>("api/Object/List", req, request.CancellationToken);
            if (ret?.Objects != null && _selected != null)
            {
                return new ItemsProviderResult<GXObject>(ret.Objects, ret.Count);
            }
        }
        catch (TaskCanceledException)
        {
            //Let the table component handle this.
            throw;
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
        return default;
    }

    protected override async Task OnInitializedAsync()
    {
        //Wait until table is loaded. Don't remove this or selector is null.
        await Task.Delay(1);
        try
        {
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            if (_selected == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            if (GetObjects() == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            //Read available items.
            if (_available != null)
            {
                await _available.RefreshDataAsync();
            }
            if (_selected != null)
            {
                await _selected.RefreshDataAsync();
            }
            Notifier.UpdateButtons();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}

