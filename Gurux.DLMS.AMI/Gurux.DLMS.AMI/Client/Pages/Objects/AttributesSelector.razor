@using Gurux.DLMS.AMI.Client.Pages.Schedule
@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq
@using System.Text;

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier

<SelectionContainer TItem="GXAttribute" @ref="@_selectionContainer">
    <SelectionList Title="Selected" @ref="_selected"
                   ShowAllUsers="false"
                   ItemsProvider="@GetSelectedItems"
                   GetName="@GetName"
                   GetDescription="@GetDescription"
                   OnAdded="OnAdded"
                   OnRemoved="@Removed">
        <FilterContent>
            <Search Placeholder="@Properties.Resources.FilterByName"
                    OnClickAsync="@SearchSelectedByName" />
        </FilterContent>
        <ButtonContent>
            <div>
                <button style="float: right;" class="btn btn-outline-secondary border-left-0 border"
                        type="button" onclick="@(() => RemoveAll())">
                    &raquo;
                </button>
            </div>
        </ButtonContent>
    </SelectionList>
    <SelectionList Title="Available" @ref="_available"
                   ItemsProvider="@GetItems"
                   GetName="@GetName"
                   GetDescription="@GetDescription">
        <FilterContent>
            <Search Placeholder="@Properties.Resources.FilterByName"
                    OnClickAsync="@SearchByName" />
            <Search Placeholder="@Properties.Resources.FilterByLogicalName"
                    OnClickAsync="@SearchByObjectLogicalName" />
            <Search Placeholder="@Properties.Resources.FilterByObject"
                    OnClickAsync="@SearchByObject" />
            <Search Placeholder="@Properties.Resources.FilterByDevice"
                    OnClickAsync="@SearchByDevice" />
            <Search Placeholder="@Properties.Resources.FilterByDeviceType"
                    OnClickAsync="@SearchByDeviceType" />
            <Search Placeholder="@Properties.Resources.FilterByAttributeIndex"
                    OnClickAsync="@SearchByAttributeIndex" />
        </FilterContent>
        <ButtonContent>
            <div>
                <button style="float: left;" class="btn btn-outline-secondary border-left-0 border"
                        type="button" onclick="@(() => AddAll())">
                    &laquo;
                </button>
            </div>
        </ButtonContent>
    </SelectionList>
</SelectionContainer>


@code {
    [CascadingParameter]
    private ScheduleTab? ScheduleParent { get; set; }

    SelectionList<GXAttribute>? _selected;
    SelectionList<GXAttribute>? _available;
    SelectionContainer<GXAttribute>? _selectionContainer;
    /// <summary>
    /// Attribute filter.
    /// </summary>
    private readonly GXAttribute filter = new GXAttribute(null)
        {
            Template = new GXAttributeTemplate(),
            Object = new GXObject()
            {
                Template = new GXObjectTemplate(),
                Device = new GXDevice()
                {
                    Template = new GXDeviceTemplate()
                }
            }
        };

    /// <summary>
    /// Selected attribute filter.
    /// </summary>
    private string? selectedNameFilter;


    string? GetName(GXAttribute target)
    {
        return target.Template?.Name;
    }

    string? GetDescription(GXAttribute target)
    {
        StringBuilder sb = new StringBuilder();
        if (target?.Object?.Device?.Name != null)
        {
            sb.Append(target.Object.Device.Name);
            sb.Append(' ');
        }
        if (target?.Object?.Template?.LogicalName != null)
        {
            sb.Append(target.Object.Template.LogicalName);
            sb.Append(' ');
        }
        if (target?.Object?.Template?.Name != null)
        {
            sb.Append(target.Object.Template.Name);
            sb.Append(' ');
        }
        sb.Append(target?.Template?.Name);
        if (target?.Template != null)
        {
            sb.Append(':');
            sb.Append(target?.Template.Index);
        }
        return sb.ToString();
    }

    protected async Task SearchSelectedByName(string? name)
    {
        try
        {
            if (_selected != null)
            {
                selectedNameFilter = name;
                await _selected.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    protected async Task SearchByName(string? name)
    {
        try
        {
            if (_available != null && filter.Template != null)
            {
                if (string.IsNullOrEmpty(name))
                {
                    filter.Template.Name = null;
                }
                else
                {
                    filter.Template.Name = name;
                }
                Notifier?.ClearStatus();
                await _available.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    protected async Task SearchByAttributeIndex(string? index)
    {
        try
        {
            if (_available != null && filter.Template != null)
            {
                if (string.IsNullOrEmpty(index))
                {
                    filter.Template.Index = 0;
                }
                else
                {
                    filter.Template.Index = int.Parse(index);
                }
                Notifier?.ClearStatus();
                await _available.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }



    protected async Task SearchByUser(string? userName)
    {
        try
        {
            if (_available != null)
            {
                if (string.IsNullOrEmpty(userName))
                {
                    if (filter.Object?.Device != null)
                    {
                        filter.Object.Device.DeviceGroups = null;
                    }
                }
                else
                {
                    GXUser user = new GXUser();
                    user.UserName = userName;
                    GXDeviceGroup dg = new GXDeviceGroup();
                    GXUserGroup ug = new GXUserGroup();
                    dg.UserGroups = new List<GXUserGroup>(new GXUserGroup[] { ug });
                    ug.Users = new List<GXUser>(new GXUser[] { user });
                    if (filter.Object?.Device != null)
                    {
                        filter.Object.Device.DeviceGroups = new List<GXDeviceGroup>(new GXDeviceGroup[] { dg });
                    }
                }
                Notifier?.ClearStatus();
                await _available.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    protected async Task SearchByObjectLogicalName(string? logicalName)
    {
        try
        {
            if (_available != null && filter.Object?.Template != null)
            {
                if (string.IsNullOrEmpty(logicalName))
                {
                    filter.Object.Template.LogicalName = null;
                }
                else
                {
                    filter.Object.Template.LogicalName = logicalName;
                }
                Notifier?.ClearStatus();
                await _available.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    protected async Task SearchByObject(string? objectName)
    {
        try
        {
            if (_available != null && filter.Object?.Template != null)
            {
                if (string.IsNullOrEmpty(objectName))
                {
                    filter.Object.Template.Name = null;
                }
                else
                {
                    filter.Object.Template.Name = objectName;
                }
                Notifier?.ClearStatus();
                await _available.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    protected async Task SearchByDevice(string? deviceName)
    {
        try
        {
            if (_available != null && filter.Object?.Device != null)
            {
                if (string.IsNullOrEmpty(deviceName))
                {
                    filter.Object.Device.Name = null;
                }
                else
                {
                    filter.Object.Device.Name = deviceName;
                }
                Notifier?.ClearStatus();
                await _available.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    protected async Task SearchByDeviceType(string? deviceType)
    {
        try
        {
            if (_available != null && filter.Object?.Device?.Template != null)
            {
                if (string.IsNullOrEmpty(deviceType))
                {
                    filter.Object.Device.Template.Name = null;
                }
                else
                {
                    filter.Object.Device.Template.Name = deviceType;
                }
                Notifier?.ClearStatus();
                await _available.RefreshDataAsync();
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    /// <summary>
    /// Add all objects to selected items.
    /// </summary>
    /// <returns></returns>
    private async Task AddAll()
    {
        int max = 0;
        //max 1000 items are added at the one time.
        if (_available != null && _available.TotalCount > 1000)
        {
            max = 1000;
        }
        var ret = await GetItems(new GXItemsProviderRequest(0, max));
        await OnAdded(ret.Items);
        if (_selected != null)
        {
            await _selected.RefreshDataAsync();
        }
        if (_available != null)
        {
            await _available.RefreshDataAsync();
        }
    }

    /// <summary>
    /// Remove all objects from selected items.
    /// </summary>
    /// <returns></returns>
    private async Task RemoveAll()
    {
        if (ScheduleParent?.Active.Attributes != null)
        {
            ScheduleParent.Active.Attributes.Clear();
        }
        if (_selected != null)
        {
            await _selected.RefreshDataAsync();
        }
        if (_available != null)
        {
            await _available.RefreshDataAsync();
        }
    }

    /// <summary>
    /// New attribute is added for selection list.
    /// </summary>
    public async Task OnAdded(IEnumerable<GXAttribute> items)
    {
        if (ScheduleParent?.Active?.Attributes != null)
        {
            ScheduleParent.Active.Attributes.InsertRange(0, items);
        }
        if (_selected != null)
        {
            await _selected.RefreshDataAsync();
        }
    }

    /// <summary>
    /// Item has removed from the lists.
    /// </summary>
    private async Task Removed(IEnumerable<GXAttribute> items)
    {
        if (ScheduleParent?.Active?.Attributes != null)
        {
            ScheduleParent.Active.Attributes.RemoveAll(w => items.Contains(w));
        }
        if (_selected != null)
        {
            await _selected.RefreshDataAsync();
        }
    }

    /// <summary>
    /// Filter is done when SearchSelectedByName is called.
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    private ValueTask<ItemsProviderResult<GXAttribute>> GetSelectedItems(GXItemsProviderRequest request)
    {
        var objects = ScheduleParent.Active.Attributes;
        int total = ScheduleParent.Active.Attributes.Count;
        if (!string.IsNullOrEmpty(selectedNameFilter))
        {
            objects = objects.Where(w => w.Template.Name.ToLower().Contains(selectedNameFilter.ToLower())).ToList();
        }
        return new(new ItemsProviderResult<GXAttribute>(objects.Skip(request.StartIndex).Take(request.Count), total));
    }

    private async ValueTask<ItemsProviderResult<GXAttribute>> GetItems(GXItemsProviderRequest request)
    {
        //Don't clear status or error is lost.
        Notifier?.ProgressStart();
        try
        {
            ListAttributes req = new ListAttributes()
                {
                    Index = (UInt64)request.StartIndex,
                    Count = (UInt64)request.Count,
                    Filter = filter,
                    Descending = request.Descending,
                    AllUsers = request.ShowAllUserData,
                    Select = TargetType.Device,
                    Exclude = _selected?.Items?.Select(s => s.Id).ToArray()
                };
            var ret = await Http.PostAsJson<ListAttributesResponse>("api/Attribute/List", req, request.CancellationToken);
            if (ret?.Attributes != null && _selected != null)
            {
                return new ItemsProviderResult<GXAttribute>(ret.Attributes, ret.Count);
            }
        }
        catch (TaskCanceledException)
        {
            //Let the table component handle this.
            throw;
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
        return default;
    }

    protected override async Task OnInitializedAsync()
    {
        //Wait until table is loaded. Don't remove this or selector is null.
        await Task.Delay(1);
        try
        {
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            if (_selected == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            if (ScheduleParent?.Active?.Attributes == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            //Read available items.
            if (_available != null)
            {
                await _available.RefreshDataAsync();
            }
            if (_selected != null)
            {
                await _selected.RefreshDataAsync();
            }
            Notifier.UpdateButtons();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}

