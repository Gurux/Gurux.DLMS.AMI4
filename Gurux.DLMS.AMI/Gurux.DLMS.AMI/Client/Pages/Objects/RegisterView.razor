<!--
// --------------------------------------------------------------------------
//  Gurux Ltd
//
//
//
// Filename:        $HeadURL$
//
// Version:         $Revision$,
//                  $Date$
//                  $Author$
//
// Copyright (c) Gurux Ltd
//
//---------------------------------------------------------------------------
//
//  DESCRIPTION
//
// This file is a part of Gurux Device Framework.
//
// Gurux Device Framework is Open Source software; you can redistribute it
// and/or modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2 of the License.
// Gurux Device Framework is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// This code is licensed under the GNU General Public License v2.
// Full text may be retrieved at http://www.gnu.org/licenses/gpl-2.0.txt
//---------------------------------------------------------------------------
-->
@using Gurux.DLMS.AMI.Shared.DIs;
@using Gurux.DLMS.AMI.Shared.DTOs
@using System.Globalization
@using Gurux.DLMS.Enums
@using Gurux.DLMS.Objects;

@inject IGXNotifier Notifier
@if (Target?.Attributes != null && Target.Template != null && Target.Attributes.Any())
{
    <CascadingValue Value="this">
        <!--Attribute #1 and description is not shown for the object template.-->
        @if (Parent?.Template == null)
        {
            <AttributeTile Index="0" Name="@Properties.Resources.Description" Value="@Target.Template.Name"></AttributeTile>
            <AttributeTile Index="1" Name="@Properties.Resources.LogicalName" Value="@Target.Template.LogicalName"></AttributeTile>
        }
        <AttributeTile Index="2" Attributes="@Target.Attributes"></AttributeTile>
        <AttributeTile Index="3" Name="Scaler" @bind-Value="@Scaler" Attributes="@Target.Attributes" Updated="@(e => Scaler = Convert.ToString(e))"></AttributeTile>
        <AttributeTile Index="3" Name="Unit" @bind-Value="@Unit" Values="@Units" Attributes="@Target.Attributes" Updated="@(e => Unit = Convert.ToString(e))"></AttributeTile>
        @ChildContent
    </CascadingValue>
}

@code {
    private GXDLMSRegister _register = new GXDLMSRegister();

    [CascadingParameter]
    private ObjectView? Parent { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    string[]? Units;

    /// <summary>
    /// Target COSEM object.
    ///</summary>
    [Parameter]
    public GXObject? Target { get; set; }

    void Reset()
    {
        Parent?.OnAction(1, (sbyte)0);
    }

    /// <summary>
    /// Register scaler.
    /// </summary>
    public string Scaler
    {
        get
        {
            return _register.Scaler.ToString();
        }
        set
        {
            _register.Scaler = double.Parse(value, CultureInfo.CurrentUICulture);
            Parent?.SetValue(Target, _register, 3);
        }
    }

    /// <summary>
    /// Register unit.
    /// </summary>
    public string Unit
    {
        get
        {
            return _register.Unit.ToString();
        }
        set
        {
            _register.Unit = Enum.Parse<Enums.Unit>(value);
            Parent?.SetValue(Target, _register, 3);
        }
    }

    /// <summary>
    /// Add action buttons.
    /// </summary>
    protected override void OnInitialized()
    {
        try
        {
            if (Parent == null)
            {
                throw new ArgumentNullException(nameof(Parent),
                    "View must exist within a Object view");
            }
            Units = Enum.GetNames(typeof(Gurux.DLMS.Enums.Unit));
            //Update read value.
            Parent.GetValue(Target, _register, 3);
            if (Parent.Template == null)
            {
                Parent.MenuItems.Add(MenuItem.Create(@Properties.Resources.Reset,
                    "oi oi-flash",
                    Reset,
                    !Parent.CanInvokeAction(1)));
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }
}