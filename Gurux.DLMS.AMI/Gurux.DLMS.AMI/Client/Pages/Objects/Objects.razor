@page "/objects"
@using Gurux.DLMS.AMI.Client.Helpers.ContextMenu
@using Gurux.DLMS.AMI.Client.Helpers.Table;
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module

@attribute [Authorize(Roles = "Admin, TemplateManager")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier
@implements IDisposable

<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }
</style>

@if (!string.IsNullOrEmpty(DeviceName))
{
    <p>
        <div class="oi oi-tablet" style="display: inline;">
            <h2 style="display: inline;">@DeviceName</h2>
        </div>
    </p>
    <hr />
}

<table class="table table-striped">
    <thead>
        @if (Filter && filter != null && filter.Template != null)
        {
            <tr>
                <th></th>
                <th>
                    <input class="form-control" placeholder="@Properties.Resources.FilterByName"
                           type="search"
                       @oninput="@SearchByName" />
                </th>
                <th>
                    <input class="form-control" placeholder="@Properties.Resources.FilterByLogicalName"
                       @oninput="@SearchByLogicalName" />
                </th>
                <th>
                    <input class="form-control" placeholder="@Properties.Resources.FilterByObjectType"
                           type="search"
                       @oninput="@SearchByObjectType" />
                </th>
            </tr>
        }
        <tr>
            <th width="1%">
                <input type="checkbox"
                       @onchange="@((ChangeEventArgs __e) => Toggle(@StatusTile.ToBoolean(__e.Value)))"
                       id="selectAll" />
            </th>
            <th class="sort-th" @onclick="@(() => SortTable(SortColumn.Name))">@Properties.Resources.Name<span class="@(GetSortIcon(SortColumn.Name))"></span></th>
            <th class="sort-th" @onclick="@(() => SortTable(SortColumn.LogicalName))">@Properties.Resources.LogicalName<span class="@(GetSortIcon(SortColumn.LogicalName))"></span></th>
            <th class="sort-th" @onclick="@(() => SortTable(SortColumn.ObjectType))">@Properties.Resources.ObjectType<span class="@(GetSortIcon(SortColumn.ObjectType))"></span></th>
            <th class="sort-th" @onclick="@(() => SortTable(SortColumn.LastError))">@Properties.Resources.LastError<span class="@(GetSortIcon(SortColumn.LastError))"></span></th>
            <th class="sort-th" @onclick="@(() => SortTable(SortColumn.LastErrorMessage))">@Properties.Resources.Error<span class="@(GetSortIcon(SortColumn.LastErrorMessage))"></span></th>
            <th class="sort-th" @onclick="@(() => SortTable(SortColumn.LastRead))">@Properties.Resources.LastRead<span class="@(GetSortIcon(SortColumn.LastRead))"></span></th>
            <th class="sort-th" @onclick="@(() => SortTable(SortColumn.LastWrite))">@Properties.Resources.LastWrite<span class="@(GetSortIcon(SortColumn.LastWrite))"></span></th>
            <th width="1%"></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in GetObjects())
        {
            <tr class=@(GetSelectedClass(item)) @onclick="@(()=>RowSelected(item))">
                <td>
                    <input type="checkbox" checked="@IsChecked(item)"
                       @onchange="@((ChangeEventArgs __e) => Select(item , @StatusTile.ToBoolean(__e.Value)))"
                           id="@item.Id" />
                </td>
                <td><a href="@GetPath(item)" @onclick="() => OnSelect(item)">@item.Template?.Name</a></td>
                <td>@item.Template?.LogicalName</td>
                <td>@GetObjectType(item.Template.ObjectType)</td>
                <td>@item.LastError</td>
                <td>@item.LastErrorMessage</td>
                <td>@item.LastRead</td>
                <td>@item.LastWrite</td>
                @if (_active == item)
                {
                    <td>
                        <ContextMenuController>
                            <ChildContent>
                                <ContextMenuItem Text="@Properties.Resources.Read" Icon="oi oi-account-logout" OnClick="async () => OnRead()"></ContextMenuItem>
                                <ContextMenuItem Text="@Properties.Resources.Show" Icon="oi oi-zoom-in" OnClick="async () => OnShow()"></ContextMenuItem>
                                <ContextMenuItem Text="@Properties.Resources.Clear" Icon="oi oi-trash" OnClick="async () => OnClear()"></ContextMenuItem>
                            </ChildContent>
                        </ContextMenuController>
                    </td>
                }
                else
                {
                    <td>&nbsp;&nbsp;&nbsp;</td>
                }
            </tr>
        }
    </tbody>
</table>
<br />
<Confirm @ref="ClearConfirmation" ConfirmationChanged="OnClearConfirmation" OkTitle="@Properties.Resources.Clear"
         ConfirmationMessage="">
</Confirm>

@code {

    public enum SortColumn : int
    {
        None,
        Name,
        LogicalName,
        ObjectType,
        LastError,
        LastErrorMessage,
        LastRead,
        LastWrite
    };

    private SortMode _sort = SortMode.None;
    private SortColumn _activeSortColumn = SortColumn.None;

    //Verify that history is clear.
    protected ConfirmBase ClearConfirmation;

    private void SortTable(SortColumn column)
    {
        if (column != _activeSortColumn)
        {
            _sort = SortMode.Ascending;
            _activeSortColumn = column;
        }
        else
        {
            _sort = (SortMode)(((int)++_sort) % 3);
        }
        StateHasChanged();
    }
    private string GetSortIcon(SortColumn column)
    {
        if (_activeSortColumn == column)
        {
            switch (_sort)
            {
                case SortMode.Ascending:
                    return "fa oi oi-sort-ascending";
                case SortMode.Descending:
                    return "fa oi oi-sort-descending";
            }
        }
        return "";
    }

    /// <inheritdoc />
    public string Name
    {
        get
        {
            return Gurux.DLMS.AMI.Client.Properties.Resources.Objects;
        }
    }

    /// <inheritdoc />
    public Type? ConfigurationUI
    {
        get
        {
            return null;
        }
    }

    /// <inheritdoc cref="IGXComponentView.Icon">
    public string? Icon
    {
        get
        {
            return "oi oi-tablet";
        }
    }

    /// <summary>
    /// Amount of the objects to shown on the view.
    /// </summary>
    [Parameter]
    public int Count { get; set; } = 0;

    /// <summary>
    /// Is filter shown.
    /// </summary>
    [Parameter]
    public bool Filter { get; set; } = true;

    /// <summary>
    /// Is title shown.
    /// </summary>
    [Parameter]
    public bool Title { get; set; } = true;

    //Get device path.
    private string GetPath(GXObject target)
    {
        return "/objectview";
    }

    /// <summary>
    /// Filter using object type.
    /// </summary>
    private string? filterByObjectType;
    /// <summary>
    /// Filter using object name.
    /// </summary>
    private string? filterByName;
    /// <summary>
    /// Filter by logical name of the object.
    /// </summary>
    private string? filterByLogicalName;


    private string? IsChecked(GXObject target)
    {
        if (SelectedItems.Contains(target))
        {
            return "checked";
        }
        return null;
    }

    private void Toggle(bool select)
    {
        SelectedItems.Clear();
        if (select)
        {
            GXDevice? device = (GXDevice?)Notifier.GetData(GXPages.Device);
            if (device != null)
            {
                SelectedItems.AddRange(device.Objects);
            }
        }
    }

    /// <summary>
    /// tasks to be performed;
    /// </summary>
    private List<Guid> PerformedTask = new();

    private List<GXObject> SelectedItems = new();

    private void Select(GXObject target, bool select)
    {
        if (select)
        {
            SelectedItems.Add(target);
        }
        else if (SelectedItems.Contains(target))
        {
            SelectedItems.Remove(target);
        }
    }

    //Device is selected.
    private void OnSelect(GXObject target)
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            if (target == null || target.Template == null)
            {
                throw new Exception(Gurux.DLMS.AMI.Client.Properties.Resources.NoItemIsSelected);
            }
            Notifier.ClearStatus();
            Notifier.Title = "Edit object";
            Notifier.Action = CrudAction.Update;
            Notifier.UpdateData(GXPages.Objects, target);
            Notifier.UpdateData(GXPages.Object, target);
            NavigationManager.NavigateTo("/objectview");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    /// <summary>
    /// Object filter.
    /// </summary>
    private GXObject filter = new GXObject();
    /// <summary>
    /// User is verified before schedule is removed.
    /// </summary>
    protected ConfirmBase DeleteConfirmation;
    /// <summary>
    /// Virtualize.
    /// </summary>
    protected Virtualize<GXObject>? virtualize;
    /// <summary>
    /// Selected item.
    /// </summary>
    private GXObject? _active;

    /// <summary>
    /// Device name.
    /// </summary>
    private string? DeviceName;

    //Get object type as a string.
    public string GetObjectType(int value)
    {
        return ((Gurux.DLMS.Enums.ObjectType)value).ToString();
    }

    protected string GetSelectedClass(GXObject value)
    {
        return _active != null && value.Id == _active.Id ? "table-info" : "table-striped";
    }


    protected void RowSelected(GXObject selected)
    {
        this._active = selected;
        Notifier.UpdateData(GXPages.Objects, selected);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            filter.Template = new GXObjectTemplate();
            GXDevice? device = (GXDevice?)Notifier.GetData(GXPages.Device);
            if (device == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            DeviceName = device.Name;
            _active = (GXObject?)Notifier.GetData(GXPages.Objects);
            Notifier.On<IEnumerable<GXObject>>(this, nameof(IGXHubEvents.ObjectUpdate), (objects) =>
            {
                //Update is not call when reading is on progress.
                if (device != null)
                {
                    foreach (var it in objects)
                    {
                        if (device.Objects.Select(s => s.Id).Contains(it.Id))
                        {
                            var obj = device.Objects.Where(s => s.Id == it.Id).SingleOrDefault();
                            //Update property.
                            obj.LastRead = it.LastRead;
                            obj.LastWrite = it.LastWrite;
                            obj.LastError = it.LastError;
                            obj.LastErrorMessage = it.LastErrorMessage;
                            Console.WriteLine("Property updated " + it.Id);
                            StateHasChanged();
                        }
                    }
                }
            });
            Notifier.On<IEnumerable<GXTask>>(this, nameof(IGXHubEvents.TaskAdd), (tasks) =>
           {
               //Notify user when read starts.
               if (device != null)
               {
                   foreach (var it in tasks)
                   {
                       if (it.Object != null && device.Objects.Select(s => s.Id).Contains(it.Object.Id))
                       {
                           Console.WriteLine("Reading... " + it.Id);
                           //Show progress when the first task is added.
                           if (!PerformedTask.Any())
                           {
                               Notifier.ShowInformation("Reading....", true);
                               Notifier.ProgressStart();
                               StateHasChanged();
                           }
                           PerformedTask.Add(it.Id);
                       }
                   }
               }
           });
            Notifier.On<IEnumerable<GXTask>>(this, nameof(IGXHubEvents.TaskUpdate), (tasks) =>
           {
               //Notify user when read ends.
               if (device != null)
               {
                   foreach (var it in tasks)
                   {
                       if (it.Ready != null && PerformedTask.Contains(it.Id))
                       {
                           Console.WriteLine("Reading end " + it.Id);
                           PerformedTask.Remove(it.Id);
                           //Hide progress when the lask task is removed.
                           if (!PerformedTask.Any())
                           {
                               Notifier.ClearStatus();
                               Notifier.ProgressEnd();
                               StateHasChanged();
                           }
                       }
                   }
               }
           });
            Notifier.Clear();
            Notifier.ChangePage(GXPages.Objects, _active);
            Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Read, Icon = "oi oi-account-logout", OnClick = OnReadSelected });
            Notifier.UpdateButtons();
            if (device.Objects == null || !device.Objects.Any())
            {
                ListObjects req = new ListObjects();
                req.Filter = new GXObject()
                    {
                        Device = new GXDevice() { Id = device.Id }
                    };
                var ret = await Http.PostAsJson<ListObjectsResponse>("api/Object/List", req);
                if (device.Objects == null)
                {
                    device.Objects = new();
                }
                else
                {
                    device.Objects.Clear();
                }
                device.Objects.AddRange(ret.Objects);
            }
            _objects.AddRange(device.Objects);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    List<GXObject> _objects = new List<GXObject>();

    /// <summary>
    /// Search by object type.
    /// </summary>
    private void SearchByObjectType(ChangeEventArgs args)
    {
        filterByObjectType = Convert.ToString(args.Value);
        Search();
    }

    /// <summary>
    /// Search by name.
    /// </summary>
    private void SearchByName(ChangeEventArgs args)
    {
        filterByName = Convert.ToString(args.Value);
        Search();
    }

    /// <summary>
    /// Search by logical name.
    /// </summary>
    private void SearchByLogicalName(ChangeEventArgs args)
    {
        filterByLogicalName = Convert.ToString(args.Value);
        Search();
    }

    /// <summary>
    /// Search from object templates.
    /// </summary>
    private void Search()
    {
        _objects.Clear();
        GXDevice? device = (GXDevice?)Notifier.GetData(GXPages.Device);
        if (device == null)
        {
            throw new ArgumentException(Properties.Resources.InvalidTarget);
        }
        _objects.AddRange(device.Objects);

        if (!string.IsNullOrEmpty(filterByObjectType))
        {
            _objects.RemoveAll(q => ((Enums.ObjectType)q.Template.ObjectType).ToString().ToUpper().Contains(filterByObjectType.ToUpper()) == false);
        }
        if (!string.IsNullOrEmpty(filterByName))
        {
            _objects.RemoveAll(q => q.Template.Name.ToUpper().Contains(filterByName.ToUpper()) == false);
        }
        if (!string.IsNullOrEmpty(filterByLogicalName))
        {
            _objects.RemoveAll(q => q.Template.LogicalName.ToUpper().Contains(filterByLogicalName.ToUpper()) == false);
        }
        StateHasChanged();
    }

    private IEnumerable<GXObject> GetObjects()
    {
        if (_activeSortColumn != SortColumn.None)
        {
            if (_sort == SortMode.Ascending)
            {
                switch (_activeSortColumn)
                {
                    case SortColumn.Name:
                        return _objects.OrderBy(s => s.Template.Name);
                    case SortColumn.LogicalName:
                        return _objects.OrderBy(s => s.Template.LogicalName);
                    case SortColumn.ObjectType:
                        return _objects.OrderBy(s => s.Template.ObjectType);
                    case SortColumn.LastError:
                        return _objects.OrderBy(s => s.LastError);
                    case SortColumn.LastErrorMessage:
                        return _objects.OrderBy(s => s.LastErrorMessage);
                    case SortColumn.LastRead:
                        return _objects.OrderBy(s => s.LastRead);
                    case SortColumn.LastWrite:
                        return _objects.OrderBy(s => s.LastWrite);
                }
            }
            else if (_sort == SortMode.Descending)
            {
                switch (_activeSortColumn)
                {
                    case SortColumn.Name:
                        return _objects.OrderByDescending(s => s.Template.Name);
                    case SortColumn.LogicalName:
                        return _objects.OrderByDescending(s => s.Template.LogicalName);
                    case SortColumn.ObjectType:
                        return _objects.OrderByDescending(s => s.Template.ObjectType);
                    case SortColumn.LastError:
                        return _objects.OrderByDescending(s => s.LastError);
                    case SortColumn.LastErrorMessage:
                        return _objects.OrderByDescending(s => s.LastErrorMessage);
                    case SortColumn.LastRead:
                        return _objects.OrderByDescending(s => s.LastRead);
                    case SortColumn.LastWrite:
                        return _objects.OrderByDescending(s => s.LastWrite);
                }
            }
        }
        return _objects;
    }

    /// <summary>
    /// Read selected object.
    /// </summary>
    public async void OnRead()
    {
        try
        {
            Notifier?.ClearStatus();
            if (_active == null || _active.Template == null)
            {
                throw new Exception(Gurux.DLMS.AMI.Client.Properties.Resources.NoItemIsSelected);
            }
            GXTask task = new GXTask();
            task.Object = new() { Id = _active.Id };
            task.TaskType = TaskType.Read;
            AddTask req = new AddTask();
            req.Tasks = new GXTask[] { task };
            await Http.PostAsJson<AddTaskResponse>("api/Task/Add", req);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }

    }

    /// <summary>
    /// Read all selected objects.
    /// </summary>
    public async void OnReadSelected()
    {
        try
        {
            Notifier?.ClearStatus();
            if (!SelectedItems.Any())
            {
                throw new Exception(Gurux.DLMS.AMI.Client.Properties.Resources.NoItemIsSelected);
            }
            Guid? batch = null;
            if (SelectedItems.Count != 1)
            {
                batch = Guid.NewGuid();
            }
            List<GXTask> tasks = new();
            foreach (var it in SelectedItems)
            {
                GXTask task = new GXTask()
                    {
                        Object = new() { Id = it.Id },
                        TaskType = TaskType.Read,
                        Batch = batch,
                    };
                tasks.Add(task);
                task.Order = tasks.Count;
            }
            AddTask req = new AddTask();
            req.Tasks = tasks.ToArray();
            await Http.PostAsJson<AddTaskResponse>("api/Task/Add", req);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }

    }

    /// <summary>
    /// Show selected object.
    /// </summary>
    public async void OnShow()
    {
        try
        {
            Notifier.ClearStatus();
            if (_active == null || _active.Template == null)
            {
                throw new Exception(Gurux.DLMS.AMI.Client.Properties.Resources.NoItemIsSelected);
            }
            //If object attributes are not read yet.
            if (_active.Attributes == null || !_active.Attributes.Any())
            {
                HttpResponseMessage response = await Http.GetAsync(string.Format("api/Object?id={0}", _active.Id));
                ClientHelpers.ValidateStatusCode(response);
                _active = (await response.Content.ReadFromJsonAsync<GetObjectResponse>())?.Item;
                Notifier.UpdateData(GXPages.Objects, _active);
            }

            Notifier.UpdateData(GXPages.Object, _active);
            NavigationManager.NavigateTo("/objectview");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    /// <summary>
    /// Clear history.
    /// </summary>
    public void OnClear()
    {
        try
        {
            ClearConfirmation.Show(null, string.Format("Are you sure you want to clear object {0} history? This action cannot be undone.", _active?.Template?.Name));
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    /// <summary>
    /// Clear history.
    /// </summary>
    public async Task OnClearConfirmation(ConfirmArgs args)
    {
        try
        {
            if (args.Confirm)
            {
                ClearValue arg = new ClearValue()
                    {
                        Objects = new GXObject[] { new GXObject() { Id = _active.Id } }
                    };
                await Http.PostAsJson<ClearValueResponse>("api/Value/Clear", arg);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    public void Dispose()
    {
        Notifier.RemoveLastPage(GXPages.Objects);
        Notifier.RemoveListener(this);
    }
}

