@page "/triggergroupsselector"
@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq

@attribute [Authorize(Roles = "Admin, TriggerGroup, TriggerGroupManager, UserGroup")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier
@implements IDisposable

<SelectionContainer GetName="GetName" GetDescription="GetDescription">
    <SelectionList Title="Selected" ItemList="triggerGroups" />
    <SelectionList Title="Available" ItemList="AllTriggerGroups" />
</SelectionContainer>

@code {
    List<GXTriggerGroup> AllTriggerGroups = new List<GXTriggerGroup>();
    List<GXTriggerGroup> triggerGroups = new List<GXTriggerGroup>();


    public void OnUpdated(object target)
    {

    }

    public string GetName(object target)
    {
        return (target as GXTriggerGroup).Name;
    }
    public string GetDescription(object target)
    {
        return (target as GXTriggerGroup).Name;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier?.ProgressStart();
            Notifier?.ClearStatus();
            string? page = Notifier.GetLastPage();
            ListTriggerGroups req = new ListTriggerGroups()
                {
                    Filter = new GXTriggerGroup()
                };
            if (page == GXPages.UserManage)
            {
                //Add selected trigger.
                GXUserGroup? userGroup = (GXUserGroup?)Notifier.GetData(GXPages.UserGroup);
                if (userGroup != null)
                {
                    triggerGroups = userGroup.TriggerGroups;
                }
            }
            else
            {
                //Add selected trigger.
                GXTrigger? trigger = (GXTrigger?)Notifier.GetData(GXPages.Trigger);
                if (trigger != null)
                {
                    triggerGroups = trigger.TriggerGroups;
                }
            }
            bool addDefaultBlocks = Notifier.Action == CrudAction.Create && !triggerGroups.Any();
            Notifier.ChangePage(GXPages.TriggerGroupsSelector, null);
            var ret = await Http.PostAsJson<ListTriggerGroupsResponse>("api/TriggerGroup/List", req);
            foreach (GXTriggerGroup it in ret.TriggerGroups)
            {
                //Add default groups when new trigger is created.
                if (addDefaultBlocks && it.Default && !triggerGroups.Where(q => q.Id == it.Id).Any())
                {
                    triggerGroups.Add(it);
                }
                if (!triggerGroups.Exists(q => q.Id == it.Id))
                {
                    AllTriggerGroups.Add(it);
                }
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }

        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    public void Dispose()
    {
        Notifier.RemoveLastPage(GXPages.TriggerGroupsSelector);
    }
}

