@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq

@attribute [Authorize(Roles = "Admin, User, TriggerGroupManager, TriggerGroup")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier

<SelectionContainer GetName="GetName" GetDescription="GetDescription">
    <SelectionList Title="Selected" ItemList="triggers" />
    <SelectionList Title="Available" ItemList="AllTriggers" />
</SelectionContainer>

@code {
    [CascadingParameter]
    private TriggerGroupTab? Parent { get; set; }


    List<GXTrigger> AllTriggers = new List<GXTrigger>();
    List<GXTrigger> triggers = new List<GXTrigger>();

    string GetName(object target)
    {
        return (target as GXTrigger).Name;
    }
    string GetDescription(object target)
    {
        return (target as GXTrigger).Name;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            if (Parent != null && Parent.Active != null && Parent.Active.Triggers != null)
            {
                //Add selected triggers.
                triggers = Parent.Active.Triggers;
            }
            else
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            ListTriggers req = new ListTriggers()
                {
                    Filter = new GXTrigger()
                };
            var ret = await Http.PostAsJson<ListTriggersResponse>("api/Trigger/List", req);
            foreach (GXTrigger it in ret.Triggers)
            {
                if (!triggers.Exists(q => q.Id == it.Id))
                {
                    AllTriggers.Add(it);
                }
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}

