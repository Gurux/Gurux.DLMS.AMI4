@using Gurux.DLMS.AMI.Client.Pages.Admin
@using Gurux.DLMS.AMI.Client.Pages.Media;
@using Gurux.DLMS.AMI.Client.Pages.Script
@using Gurux.DLMS.AMI.Components.Enums;
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.Enums
@using Gurux.Net;
@using Gurux.Serial;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.Rest
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Diagnostics
@using Gurux.DLMS.AMI.Client.Pages.DeviceTemplate

@inject HttpClient Http

@if (Settings != null)
{
    <EditForm Model="@Settings">
        <DataAnnotationsValidator />
        <GXValidator @ref="_validator" OnValidate="OnValidate" />
        <div class="row">
            <div style="width:100%">
                <div class="form-group">
                    <InputSwitch Text="@Properties.Resources.Active" @bind-Value="Settings.Active" />
                    <br />
                </div>
                <fieldset disabled="@(!Settings.Active)">
                    @if (!IsSerialPort())
                    {
                        <NetworkSettings IsServer="true" @bind-Settings="@Settings.MediaSettings"
                                         @ref=networkSettings></NetworkSettings>
                    }
                    else
                    {
                        <SerialSettings @bind-Settings="@Settings.MediaSettings"
                                        @ref=serialSettings></SerialSettings>
                    }
                    <div class="form-group">
                        <label style="margin:auto">Interface</label>
                        <select class="form-select" @bind="@Settings.Interface">
                            @foreach (var it in InterfaceList)
                            {
                                <option value="@Convert.ToInt32(it)">@it</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <InputSwitch Text="@Properties.Resources.UseLogicalNameReferencing"
                                     @bind-Value="Settings.UseLogicalNameReferencing" />
                        <br />
                    </div>
                    <div class="form-group">
                        <label>@Properties.Resources.ClientAddress</label>
                        <InputNumber id="threads" class="form-control"
                                     @bind-Value="Settings.ClientAddress" />
                    </div>
                    <div class="form-group">
                        <label>@Properties.Resources.ServerAddress</label>
                        <InputNumber id="threads" class="form-control"
                                     @bind-Value="Settings.ServerAddress" />
                    </div>
                    <div class="form-group">
                        <label style="margin:auto">Authentication</label>
                        <select class="form-select" @bind="@Settings.Authentication">
                            @foreach (var it in Authentications)
                            {
                                <option value="@Convert.ToInt32(it)">@it</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>@Properties.Resources.Password</label>
                        <InputText id="name" class="form-control"
                                   @bind-Value="Settings.Password" />
                    </div>
                    <div class="form-group">
                        <label style="margin:auto">@Properties.Resources.Security</label>
                        <select class="form-select" @bind="@Settings.Security">
                            @foreach (var it in Securities)
                            {
                                <option value="@Convert.ToInt32(it)">@it</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>@Properties.Resources.InvocationCounter</label>
                        <InputText id="name" class="form-control"
                                   @bind-Value="Settings.InvocationCounter" />
                    </div>
                    <div class="form-group">
                        <label>@Properties.Resources.TraceLevels</label>
                        <select class="form-select" @bind="Settings.TraceLevel">
                            @foreach (var it in TraceLevels)
                            {
                                <option value="@it">@it</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label>@Properties.Resources.IdentifyWaitTime</label>
                        <InputIntegerTimeSpan id="identifyWaitTime" class="form-control"
                                              @bind-Value="Settings.IdentifyWaitTime" />
                        <ValidationMessage For="@(() => Settings.IdentifyWaitTime)" />
                    </div>
                    <div class="form-group">
                        <InputSwitch Text="@Properties.Resources.PreEstablishedConnection"
                                     @bind-Value="Settings.PreEstablished" />
                        <br />
                    </div>
                    <div class="form-group row">
                        <label>@Properties.Resources.ConnectionUpTime</label>
                        <InputNullableIntegerTimeSpan id="connectionUpTime" class="form-control"
                                                      @bind-Value="Settings.ConnectionUpTime" />
                        <ValidationMessage For="@(() => Settings.ConnectionUpTime)" />
                    </div>
                    <div class="form-group row">
                        <ScriptMethodSelector Title="@Properties.Resources.AutoConnectIdentificationScript"
                                              Scripts="@Scripts"
                                              SelectionChanged="@ConnectionIdentifierSelectionChanged"
                                              ScriptMethod="@Settings.ScriptMethod"></ScriptMethodSelector>
                    </div>
                    <div class="form-group row">
                        <div class="form-group">
                            <label>@Properties.Resources.DefaultDeviceTemplate</label>
                            <DeviceTemplateSelector @bind-Value="@DefaultDeviceTemplate"></DeviceTemplateSelector>
                        </div>
                    </div>
                    <div class="form-group row">
                        <ScriptMethodSelector Title="@Properties.Resources.GatewayIdentificationScript"
                                              Scripts="@Scripts"
                                              SelectionChanged="@GatewayIdentificationSelectionChanged"
                                              ScriptMethod="@Settings.GatewayScriptMethod"></ScriptMethodSelector>
                    </div>
                </fieldset>
            </div>
        </div>
    </EditForm>
}

@code {
    //Available scripts.
    [Parameter]
    public GXScript[]? Scripts { get; set; }

    [Parameter]
    public ListenerSettings? Settings { get; set; }

    private GXValidator? _validator;
    GXDeviceTemplate _defaultDeviceTemplate = new GXDeviceTemplate(Properties.Resources.Nothing);
    private GXDeviceTemplate? DefaultDeviceTemplate
    {
        get
        {
            return _defaultDeviceTemplate;
        }
        set
        {
            _defaultDeviceTemplate = value;
            if (Settings != null)
            {
                if (value.Id == Guid.Empty)
                {
                    Settings.DefaultDeviceTemplate = null;
                }
                else
                {
                    Settings.DefaultDeviceTemplate = value.Id;
                }
            }
        }
    }

    InterfaceType[] InterfaceList = new InterfaceType[]
    {
        InterfaceType.HDLC,
        InterfaceType.WRAPPER
    };

    Enums.Authentication[] Authentications = new Enums.Authentication[]
    {
        Enums.Authentication.None,
        Enums.Authentication.Low,
        Enums.Authentication.High,
        Enums.Authentication.HighGMAC
    };

    Enums.Security[] Securities = new Enums.Security[]
    {
        Enums.Security.None,
        Enums.Security.Encryption,
        Enums.Security.Authentication,
        Enums.Security.AuthenticationEncryption
    };

    TraceLevel[] TraceLevels = new TraceLevel[]
    {
        TraceLevel.Off,
        TraceLevel.Error,
        TraceLevel.Warning,
        TraceLevel.Info,
        TraceLevel.Verbose
    };

    private string? _serialPort;

    /// <summary>
    /// The serial port of the auto connect.
    /// </summary>
    [Parameter]
    public string? SerialPort
    {
        get => _serialPort;
        set
        {
            if (_serialPort != value)
            {
                _serialPort = value;
                SerialPortChanged.InvokeAsync(value);
            }
        }
    }

    /// <summary>
    /// Is serial port used.
    /// </summary>
    /// <returns></returns>
    private bool IsSerialPort()
    {
        return !string.IsNullOrEmpty(_serialPort);
    }

    /// <summary>
    /// Notified when settings are updated.
    /// </summary>
    [Parameter]
    public EventCallback<string?> SerialPortChanged { get; set; }

    NetworkSettings? networkSettings { get; set; }
    SerialSettings? serialSettings { get; set; }

    ///<summary>
    ///Connection identifier script method has been changed.
    ///</summary>
    private void ConnectionIdentifierSelectionChanged(Guid? guid)
    {
        if (Settings != null)
        {
            Settings.ScriptMethod = guid;
        }
    }

    ///<summary>
    ///Gateway identification script method has been changed.
    ///</summary>
    private void GatewayIdentificationSelectionChanged(Guid? guid)
    {
        if (Settings != null)
        {
            Settings.GatewayScriptMethod = guid;
        }
    }

    public void Validate(GXValidator sender)
    {
        OnValidate(sender);
        _validator?.Validate();
    }

    public void OnValidate(GXValidator sender)
    {
        @if (Settings != null && Settings.Active)
        {
            if (Settings.ExpirationTime < 0)
            {
                sender.AddError(() => Settings.ExpirationTime, "Invalid expiration time.");
            }
            if (Settings?.MediaType == typeof(GXNet).FullName)
            {
                networkSettings?.Validate(sender);
            }
            else if (Settings?.MediaType == typeof(GXSerial).FullName)
            {
                serialSettings?.Validate(sender);
            }
        }
    }

    protected override void OnInitialized()
    {
        if (string.IsNullOrEmpty(Settings?.MediaType) && Settings != null)
        {
            Settings.MediaType = typeof(GXNet).FullName;
        }
        if (Settings != null && Settings?.DefaultDeviceTemplate != null &&
            Settings?.DefaultDeviceTemplate.Value != Guid.Empty)
        {
            _defaultDeviceTemplate = new GXDeviceTemplate()
                {
                    Id = Settings.DefaultDeviceTemplate.Value,
                    Name = Properties.Resources.Nothing
                };
        }
    }
}
