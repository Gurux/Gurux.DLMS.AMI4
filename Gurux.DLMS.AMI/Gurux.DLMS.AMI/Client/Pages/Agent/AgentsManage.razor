@page "/agentsmanage"
@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Models
@using Gurux.DLMS.AMI.Shared.DTOs.Enums
@using Gurux.DLMS.AMI.Shared.Enums
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module

@attribute [Authorize(Roles = "Admin, AgentManager")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier
@inject ConfirmBase Confirm
@implements IDisposable
@implements IGXComponentView


<AuthorizeView Roles=@GXRoles.ToString(GXRoles.Admin, GXRoles.WorkflowGroup)>
    <MenuControl RightCorner="true">
        <ChildContent>
            <MenuItem Text="@Properties.Resources.Update" Icon="oi oi-plus" OnClick="@OnUpdateVersion" />
            <MenuItem Text="@Properties.Resources.Remove" Icon="oi oi-trash" OnClick="@OnRemove" />
        </ChildContent>
    </MenuControl>
</AuthorizeView>

<GXTable @ref="table" Context="agent" ItemsProvider="@GetItems" SelectionMode="SelectionMode.Multiple" Filter="@Filter" OnSearch="@Updated">
    <FilterContent>
        <th>
            <input class="form-control" type="text" placeholder="@Properties.Resources.FilterByName"
                   @onchange="@((ChangeEventArgs __e) => filter.Name = Convert.ToString(__e.Value))" />
        </th>
        <th>
            <input class="form-control" placeholder="Filter by generation..."
                   type="datetime-local"
                   @onchange="@((ChangeEventArgs __e) => filter.CreationTime = Convert.ToDateTime(__e.Value))" />
        </th>
        <th>
            <input class="form-control" placeholder="Filter by detected..."
                   type="datetime-local"
                   @onchange="@((ChangeEventArgs __e) => filter.Detected = Convert.ToDateTime(__e.Value))" />
        </th>
        <th>
        </th>
        <th>
            <input class="form-control" placeholder="Filter by available version..."
                   type="datetime-local"
                   @onchange="@((ChangeEventArgs __e) => filter.AvailableVersion = Convert.ToString(__e.Value))" />
        </th>
        <th>
            <input class="form-control" placeholder="Filter by update version..."
                   type="datetime-local"
                   @onchange="@((ChangeEventArgs __e) => filter.UpdateVersion = Convert.ToString(__e.Value))" />
        </th>
        <th>
            <input class="form-control" placeholder="Filter by version..."
                   type="datetime-local"
                   @onchange="@((ChangeEventArgs __e) => filter.Version = Convert.ToString(__e.Value))" />
        </th>
    </FilterContent>
    <MenuContent>
        <AuthorizeView Roles=@GXRoles.ToString(GXRoles.Admin, GXRoles.AgentManager)>
            <ContextMenuItem Text="@Properties.Resources.Update" Icon="oi oi-plus" OnClick="OnUpdateVersion"></ContextMenuItem>
            <ContextMenuItem Text="@Properties.Resources.Remove" Icon="oi oi-trash" OnClick="OnRemove"></ContextMenuItem>
        </AuthorizeView>
    </MenuContent>
    <HeaderContent>
        <Th Id="Name">@Properties.Resources.Name</Th>
        <Th Id="CreationTime" SortMode="SortMode.Descending">@Properties.Resources.CreationTime</Th>
        <Th Id="Detected">@Properties.Resources.Detected</Th>
        <Th Id="Status">@Properties.Resources.Status</Th>
        <Th Id="AvailableVersion">@Properties.Resources.AvailableVersion</Th>
        <Th Id="UpdateVersion">@Properties.Resources.UpdateVersion</Th>
        <Th Id="Version">@Properties.Resources.Version</Th>
    </HeaderContent>
    <ItemContent>
        <td><span class=@(GetDot(agent))></span>@agent.Name</td>
        <td>@agent.CreationTime</td>
        <td>@agent.Detected</td>
        <td>@agent.Status</td>
        <td>@agent.AvailableVersion</td>
        <td>@agent.UpdateVersion</td>
        <td>@GetVersion(agent.Version)</td>
    </ItemContent>
</GXTable>
<br />
<Confirm @ref="DeleteConfirmation"
         ConfirmationChanged="OnDeleteConfirmation"
         OkTitle="@Properties.Resources.Remove"
         ConfirmationMessage=""
         ConfirmationTitle="@Properties.Resources.AreYouSureYouWantToDeleteSelectedItems">
</Confirm>
<Confirm @ref="UpdateConfirmation"
         ConfirmationChanged="OnUpdateConfirmation"
         OkTitle="@Properties.Resources.Update"
         AllowDelete="false"
         ConfirmationTitle="@Properties.Resources.ConfirmUpdate"
         ConfirmationMessage="">
</Confirm>

@code {
    /// <inheritdoc />
    public string Name
    {
        get
        {
            return "Agent updates";
        }
    }

    /// <inheritdoc />
    public Type? ConfigurationUI
    {
        get
        {
            return null;
        }
    }

    /// <inheritdoc cref="IGXComponentView.Icon">
    public string? Icon
    {
        get
        {
            return "oi oi-tablet";
        }
    }

    /// <summary>
    /// Amount of the devices shown on the view.
    /// </summary>
    [Parameter]
    public int Count { get; set; } = 0;

    /// <summary>
    /// Is filter shown.
    /// </summary>
    [Parameter]
    public bool Filter { get; set; } = true;

    /// <summary>
    /// Is title shown.
    /// </summary>
    [Parameter]
    public bool Title { get; set; } = true;

    //Green dot is shown if agent is update and yellow if there is a new version available.
    protected string GetDot(GXAgent agent)
    {
        if (!string.IsNullOrEmpty(agent.UpdateVersion))
        {
            return "green-dot";
        }
        if (!string.IsNullOrEmpty(agent.AvailableVersion) && agent.AvailableVersion != agent.Version)
        {
            return "yellow-dot";
        }
        return "";
    }

    private string? GetVersion(string? version)
    {
        if (version == null)
        {
            return Properties.Resources.CustomBuild;
        }
        return version;
    }

    private GXAgent filter = new GXAgent() { Template = true };
    //Verify that agant can be removed.
    protected ConfirmBase? DeleteConfirmation;
    //Verify that agent can be updated.
    protected ConfirmBase? UpdateConfirmation;

    /// <summary>
    /// Table reference.
    /// </summary>
    protected GXTable<GXAgent>? table;

    /// <summary>
    /// Update table.
    /// </summary>
    protected async Task Updated()
    {
        try
        {
            if (table != null)
            {
                Notifier?.ClearStatus();
                await table.RefreshDataAsync(true);
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    /// <summary>
    /// Agent status has changed.
    /// </summary>
    /// <param name="list">Changed agents.</param>
    protected void StateChanged(IEnumerable<GXAgent> list)
    {
        try
        {
            if (table?.Items != null)
            {
                foreach (var agent in list)
                {
                    foreach (var it in table.Items)
                    {
                        if (it.Id == agent.Id)
                        {
                            it.Status = agent.Status;
                            if (agent.Detected != null)
                            {
                                it.Detected = agent.Detected;
                            }
                            if (agent.AvailableVersion != null)
                            {
                                it.AvailableVersion = agent.AvailableVersion;
                            }
                            break;
                        }
                    }
                }
                StateHasChanged();
            }
        }
        catch (Exception)
        {
        }
    }

    protected override void OnInitialized()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            Notifier.On<IEnumerable<GXAgent>>(this, nameof(IGXHubEvents.AgentUpdate), async (agents) =>
            {
                await Updated();
            });
            Notifier.On<IEnumerable<GXAgent>>(this, nameof(IGXHubEvents.AgentDelete), async (agents) =>
            {
                await Updated();
            });
            Notifier.On<IEnumerable<GXAgent>>(this, nameof(IGXHubEvents.AgentStatusChange), (agents) =>
            {
                StateChanged(agents);
            });
            Notifier.Clear();
            Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Update, Icon = "oi oi-trash", OnClick = OnUpdateVersion });
            Notifier.UpdateButtons();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }

        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    private async ValueTask<ItemsProviderResult<GXAgent>> GetItems(GXItemsProviderRequest request)
    {
        //Don't clear status or error is lost.
        Notifier?.ProgressStart();
        try
        {
            ListAgents req = new ListAgents()
                {
                    Index = request.StartIndex,
                    Count = request.Count,
                    Filter = filter,
                    OrderBy = request.OrderBy,
                    Descending = request.Descending
                };
            if (Count != 0)
            {
                req.Count = Count;
            }
            var ret = await Http.PostAsJson<ListAgentsResponse>("api/Agent/List", req, request.CancellationToken);
            ItemsProviderResult<GXAgent> value = new ItemsProviderResult<GXAgent>(ret.Agents, ret.Count);
            return value;
        }
        catch (TaskCanceledException)
        {
            //Let the table component handle this.
            throw;
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
        return default;
    }

    /// <summary>
    /// Update the selected agents to the new version.
    /// </summary>
    public void OnUpdateVersion()
    {
        try
        {
            if (table == null || !table.SingleOrDefault().Any())
            {
                throw new Exception(Gurux.DLMS.AMI.Client.Properties.Resources.NoItemIsSelected);
            }
            UpdateConfirmation?.Show(table?.SingleOrDefault()?.Select(s => s.Name).ToArray(), Properties.Resources.AgentUpdates);
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    /// <summary>
    /// Remove selected agents.
    /// </summary>
    public void OnRemove()
    {
        try
        {
            if (table == null || !table.SingleOrDefault().Any())
            {
                throw new Exception(Gurux.DLMS.AMI.Client.Properties.Resources.NoItemIsSelected);
            }
            DeleteConfirmation?.Show(table?.SingleOrDefault()?.Select(s => s.Name).ToArray());
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    /// <summary>
    /// Remove the agents.
    /// </summary>
    public async Task OnDeleteConfirmation(ConfirmArgs args)
    {
        try
        {
            if (table != null && args.Confirm)
            {
                RemoveAgent req = new RemoveAgent()
                    {
                        Delete = args.Delete,
                        Ids = table.SingleOrDefault().Select(w => w.Id).ToArray()
                    };
                await Http.PostAsJson<RemoveAgentResponse>("api/Agent/Delete", req);
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
    }

    /// <summary>
    /// Update the agent.
    /// </summary>
    public async Task OnUpdateConfirmation(ConfirmArgs args)
    {
        if (args.Confirm)
        {
            Notifier?.ProgressStart();
            Notifier?.ClearStatus();
            try
            {
                if (table?.Active == null)
                {
                    throw new Exception(Gurux.DLMS.AMI.Client.Properties.Resources.NoItemIsSelected);
                }
                if (table.Active.Version == table.Active.AvailableVersion)
                {
                    throw new Exception("Version is already used.");
                }
                table.Active.UpdateVersion = table.Active.AvailableVersion;
                UpdateAgent req = new UpdateAgent() { Agents = new GXAgent[] { table.Active } };
                await Http.PostAsJson<UpdateAgentResponse>("api/agent/Update", req);
            }
            catch (AccessTokenNotAvailableException exception)
            {
                exception.Redirect();
            }
            catch (Exception ex)
            {
                Notifier?.ProcessError(ex);
            }
            finally
            {
                Notifier?.ProgressEnd();
            }
        }
    }

    public void Dispose()
    {
        Notifier.RemoveLastPage(GXPages.Agents);
        Notifier.RemoveListener(this);
    }
}
