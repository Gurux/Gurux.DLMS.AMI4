@page "/agentgroup"
@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.Rest
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module

@attribute [Authorize(Roles = "Admin, AgentGroupManager")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier
@implements IDisposable

<EditForm Model="@_active">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div style="width:100%">
            <div class="form-group">
                <label>@Properties.Resources.Name</label>
                <InputText id="name" disabled="@IsDeleting" class="form-control"
                           @bind-Value="_active.Name" />
            </div>
            <div class="form-group">
                <InputNullableCheckbox @bind-Value="_active.Default" />
                <label>@Properties.Resources.DefaultGroup</label>
                <br />
            </div>
            <div class="form-group">
                <label>@Properties.Resources.Description</label>
                <InputText id="name" disabled="@IsDeleting" class="form-control"
                           @bind-Value="_active.Description" />
            </div>
            <div class="form-group">
                <label>@Properties.Resources.CreationTime</label>
                <InputDate Type="@InputDateType.DateTimeLocal" id="generation" readonly="readonly" class="form-control"
                           @bind-Value="_active.CreationTime" />
            </div>
            @if (_active.CreationTime != DateTime.MinValue)
            {
                <div class="form-group">
                    <label>@Properties.Resources.CreationTime</label>
                    <InputDate Type="@InputDateType.DateTimeLocal" id="generation" readonly="readonly" class="form-control"
                           @bind-Value="_active.CreationTime" />
                </div>
            }
            @if (_active.Updated != null)
            {
                <div class="form-group">
                    <label>@Properties.Resources.Updated</label>
                    <InputDate Type="@InputDateType.DateTimeLocal" id="generation" readonly="readonly" class="form-control"
                           @bind-Value="_active.Updated" />
                </div>
            }
            @if (_active.Removed != null)
            {
                <div class="form-group">
                    <label>@Properties.Resources.Removed</label>
                    <InputDate Type="@InputDateType.DateTimeLocal" id="removed" class="form-control"
                           @bind-Value="_active.Removed" />
                </div>
            }
            @if (Notifier.Action == CrudAction.Delete)
            {
                <hr />
                <p>
                </p>
                <div class="form-group">
                    <InputRadioGroup @bind-Value="DeleteTarget">
                        <InputRadio Value="false">
                        </InputRadio>
                        <label>@Properties.Resources.TargetDisableQuestion</label><br>
                        <InputRadio Value="true">
                        </InputRadio>
                        <label>@Properties.Resources.TargetDeleteQuestion</label>
                    </InputRadioGroup>
                    <br />
                </div>
            }
        </div>
    </div>
</EditForm>
@code {
    private bool DeleteTarget;
    public string? IsDeleting
    {
        get
        {
            if (Notifier.Action != CrudAction.Delete)
            {
                return null;
            }
            return "disabled";
        }
    }
    private GXAgentGroup _active;
    private string SubmitText;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            //Get selected item.
            _active = (GXAgentGroup)Notifier.GetData(GXPages.AgentGroups);
            if (_active == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            switch (Notifier.Action)
            {
                case CrudAction.Create:
                    SubmitText = Properties.Resources.Add;
                    break;
                case CrudAction.Update:
                    SubmitText = Properties.Resources.Edit;
                    break;
                case CrudAction.Delete:
                    SubmitText = Properties.Resources.Remove;
                    break;
                default:
                    NavigationManager.NavigateTo(Notifier.GetLastPage());
                    return;
            }
            Notifier.Clear();
            if (Notifier.Action == CrudAction.Delete)
            {
                Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Remove, Icon = "oi oi-trash", OnClick = OnSave });
            }
            else
            {
                Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Save, Icon = "oi oi-pencil", OnClick = OnSave });
            }
            Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Cancel, Icon = "oi oi-action-undo", OnClick = OnCancel });
            Notifier.UpdateButtons();
            if (!_active.Modified &&
                (Notifier.Action == CrudAction.Update || Notifier.Action == CrudAction.Delete))
            {
                //Get agent data.
                _active = (await Http.GetAsJsonAsync<GetAgentGroupResponse>(string.Format("api/AgentGroup?id={0}", _active.Id))).Item;
                Notifier.UpdateData(GXPages.AgentGroups, _active);
                _active.Modified = true;
            }
            Notifier.ChangePage(GXPages.AgentGroup, _active);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    /// <summary>
    /// Save agent.
    /// </summary>
    public async void OnSave()
    {
        try
        {
            Notifier?.ProgressStart();
            Notifier?.ClearStatus();
            if (Notifier.Action == CrudAction.Delete)
            {
                await Http.PostAsJson<RemoveAgentGroupResponse>("api/AgentGroup/Delete", new RemoveAgentGroup()
                    {
                        Ids = new Guid[] { _active.Id },
                        Delete = DeleteTarget
                    });
            }
            else
            {
                string address;
                if (Notifier.Action == CrudAction.Create)
                {
                    address = "api/AgentGroup/Add";
                }
                else
                {
                    address = "api/AgentGroup/Update";
                }
                await Http.PostAsJson<AddAgentGroupResponse>(address, new AddAgentGroup() { AgentGroups = new GXAgentGroup[] { _active } });
            }
            Notifier.RemoveLastPage();
            NavigationManager.NavigateTo(Notifier.GetLastPage());
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    /// <summary>
    /// Cancel update.
    /// </summary>
    private void OnCancel()
    {
        Notifier.RemoveLastPage();
        NavigationManager.NavigateTo(Notifier.GetLastPage());
    }

    public void Dispose()
    {
        Notifier.RemoveLastPage(GXPages.AgentGroup);
    }
}
