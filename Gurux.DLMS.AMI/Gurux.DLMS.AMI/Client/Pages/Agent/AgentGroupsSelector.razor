@using Gurux.DLMS.AMI.Client.Pages.Device;
@using Gurux.DLMS.AMI.Shared.DIs
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.DTOs.Authentication
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.Enums
@using Gurux.DLMS.AMI.Client.Helpers
@using Gurux.DLMS.AMI.Module
@using System.Linq

@attribute [Authorize(Roles = "Admin, AgentGroup, AgentGroupManager, UserGroup")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier

<SelectionContainer GetName="GetName" GetDescription="GetDescription">
    <SelectionList Title="Selected" ItemList="agentGroups" />
    <SelectionList Title="Available" ItemList="AllAgentGroups" />
</SelectionContainer>

@code {
    [CascadingParameter]
    private DeviceGroupTab? DeviceGroupParent { get; set; }

    [CascadingParameter]
    private AgentTab? AgentParent { get; set; }

    List<GXAgentGroup> AllAgentGroups = new List<GXAgentGroup>();
    List<GXAgentGroup> agentGroups = new List<GXAgentGroup>();


    public void OnUpdated(object target)
    {

    }

    public string GetName(object target)
    {
        return (target as GXAgentGroup).Name;
    }
    public string GetDescription(object target)
    {
        return (target as GXAgentGroup).Name;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            ListAgentGroups req = new ListAgentGroups()
                {
                    Filter = new GXAgentGroup()
                };
            if (DeviceGroupParent?.Active?.AgentGroups != null)
            {
                //Get selected agent groups.
                agentGroups = DeviceGroupParent.Active.AgentGroups;
            }
            else if (AgentParent?.Active?.AgentGroups != null)
            {
                //Get selected agent groups.
                agentGroups = AgentParent.Active.AgentGroups;
            }
            else
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }
            bool addDefaultBlocks = Notifier.Action == CrudAction.Create && !agentGroups.Any();
            Notifier.UpdateButtons();
            var ret = await Http.PostAsJson<ListAgentGroupsResponse>("api/AgentGroup/List", req);
            foreach (GXAgentGroup it in ret.AgentGroups)
            {
                //Add default groups when new workflow is created.
                if (addDefaultBlocks && it.Default.HasValue && it.Default.Value &&
                    !agentGroups.Where(q => q.Id == it.Id).Any())
                {
                    agentGroups.Add(it);
                }
                if (!agentGroups.Exists(q => q.Id == it.Id))
                {
                    AllAgentGroups.Add(it);
                }
            }
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }
}

