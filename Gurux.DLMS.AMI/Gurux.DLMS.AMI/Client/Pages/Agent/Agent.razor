@page "/agent"
@using Gurux.DLMS.AMI.Module
@using Gurux.DLMS.AMI.Shared
@using Gurux.DLMS.AMI.Shared.DIs
@using Gurux.DLMS.AMI.Shared.Models
@using Gurux.DLMS.AMI.Shared.Enums
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Gurux.DLMS.AMI.Shared.DTOs
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.AspNetCore.SignalR.Client
@using Gurux.DLMS.AMI.Client.Pages.Agent
@using System.Text.Json

@attribute [Authorize(Roles = "Admin, AgentManager")]
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IGXNotifier Notifier
@implements IDisposable

@if (_active != null)
{
    <EditForm Model="@_active">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row">
            <div style="width:100%">
                <div class="form-group">
                    <label>@Properties.Resources.Name</label>
                    <InputText id="name" disabled="@IsDeleting" class="form-control"
                           @bind-Value="_active.Name" />
                </div>
                <div class="form-group">
                    <label>@Properties.Resources.Version</label>
                    @if (string.IsNullOrEmpty(_active.Version))
                    {
                        <input class="form-control" type="text" readonly="readonly" value="@Properties.Resources.CustomBuild" />
                    }
                    else
                    {
                        <input class="form-control" type="text" readonly="readonly" value="@_active.Version" />
                    }
                </div>
                @if (_active.Detected != null)
                {
                    <div class="form-group">
                        <label>@Properties.Resources.Detected</label>
                        <InputDate Type="@InputDateType.DateTimeLocal" id="detected" readonly="readonly" class="form-control"
                           @bind-Value="_active.Detected" />
                    </div>
                }
                <div class="form-group">
                    <label>@Properties.Resources.CreationTime</label>
                    <InputDate Type="@InputDateType.DateTimeLocal" id="creationTime" readonly="readonly" class="form-control"
                           @bind-Value="_active.CreationTime" />
                </div>
                @if (_active.Updated != null)
                {
                    <div class="form-group">
                        <label>@Properties.Resources.Updated</label>
                        <InputDate Type="@InputDateType.DateTimeLocal" id="updated" readonly="readonly" class="form-control"
                           @bind-Value="_active.Updated" />
                    </div>
                }
                @if (_active.Removed != null)
                {
                    <div class="form-group">
                        <label>@Properties.Resources.Remove</label>
                        <InputDate Type="@InputDateType.DateTimeLocal" id="remove" class="form-control"
                           @bind-Value="_active.Removed" />
                    </div>
                }
            </div>
        </div>
    </EditForm>
    <TabControl>
        <TabTextTemplate>
            @context.Text
        </TabTextTemplate>
        <ChildContent>
            <TabPage Text="Reader" Icon="oi oi-browser">
                <div style="position: relative; width: 100%; ">
                    <ReaderOptions Settings="@ReaderSettings"></ReaderOptions>
                </div>
            </TabPage>
            <TabPage Text="Push events" Icon="oi oi-browser">
                <div style="position: relative; width: 100%; ">
                    <NotifyOptions Settings="@NotifySettings" Scripts="@scripts"></NotifyOptions>
                </div>
            </TabPage>
            <TabPage Text="Auto connect" Icon="oi oi-browser">
                <div style="position: relative; width: 100%; ">
                    <AutoConnectOptions Settings="@ListenerSettings" Scripts="@scripts"></AutoConnectOptions>
                </div>
            </TabPage>
        </ChildContent>
    </TabControl>
}
@code {

    public string? IsDeleting
    {
        get
        {
            if (Notifier.Action != CrudAction.Delete)
            {
                return null;
            }
            return "disabled";
        }
    }

    private GXAgent? _active;


    ReaderSettings? ReaderSettings { get; set; }
    NotifySettings? NotifySettings { get; set; }
    ListenerSettings? ListenerSettings { get; set; }

    //Available scripts.
    private GXScript[]? scripts;

    private string SubmitText;

    private List<GXScript> Scripts = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Notifier == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidNotifier);
            }
            Notifier.ProgressStart();
            Notifier.ClearStatus();
            //Get selected item.
            _active = (GXAgent?)Notifier.GetData(GXPages.Agents);
            if (_active == null)
            {
                throw new ArgumentException(Properties.Resources.InvalidTarget);
            }

            switch (Notifier.Action)
            {
                case CrudAction.Create:
                    SubmitText = Properties.Resources.Add;
                    break;
                case CrudAction.Update:
                    SubmitText = Properties.Resources.Edit;
                    break;
                case CrudAction.Delete:
                    SubmitText = Properties.Resources.Remove;
                    break;
                default:
                    NavigationManager.NavigateTo(Notifier.GetLastPage());
                    return;
            }
            Notifier.Clear();
            if (Notifier.Action == CrudAction.Delete)
            {
                Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Remove, Icon = "oi oi-trash", OnClick = OnSave });
            }
            else
            {
                Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Save, Icon = "oi oi-pencil", OnClick = OnSave });
            }
            Notifier.AddMenuItem(new GXMenuItem() { Text = Properties.Resources.Cancel, Icon = "oi oi-action-undo", OnClick = OnCancel });
            Notifier.UpdateButtons();
            if (!_active.Modified &&
                (Notifier.Action == CrudAction.Update || Notifier.Action == CrudAction.Delete))
            {
                //Get agent data.
                _active = await Http.GetFromJsonAsync<GXAgent>(string.Format("api/Agent?id={0}", _active.Id));
                Notifier.UpdateData(GXPages.Agents, _active);
                _active.Modified = true;
            }
            ListScripts req = new ListScripts();
            HttpResponseMessage response = await Http.PostAsJsonAsync("api/Script/List", req);
            ClientHelpers.ValidateStatusCode(response);
            var ret = await response.Content.ReadFromJsonAsync<ListScriptsResponse>();
            scripts = ret.Scripts;

            if (!string.IsNullOrEmpty(_active.ReaderSettings))
            {
                ReaderSettings = JsonSerializer.Deserialize<ReaderSettings>(_active.ReaderSettings);
            }
            else
            {
                ReaderSettings = new ReaderSettings();
            }
            if (!string.IsNullOrEmpty(_active.NotifySettings))
            {
                NotifySettings = JsonSerializer.Deserialize<NotifySettings>(_active.NotifySettings);
            }
            else
            {
                NotifySettings = new NotifySettings();
            }
            if (!string.IsNullOrEmpty(_active.ListenerSettings))
            {
                ListenerSettings = JsonSerializer.Deserialize<ListenerSettings>(_active.ListenerSettings);
            }
            else
            {
                ListenerSettings = new ListenerSettings();
            }
            Notifier.ChangePage(GXPages.Agent, _active);
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    /// <summary>
    /// Save agent.
    /// </summary>
    public async void OnSave()
    {
        try
        {
            Notifier?.ProgressStart();
            Notifier?.ClearStatus();
            if (Notifier.Action == CrudAction.Delete)
            {
                HttpResponseMessage response = await Http.PostAsJsonAsync("api/Agent/Delete", new AgentDelete() { Ids = new Guid[] { _active.Id } });
                ClientHelpers.ValidateStatusCode(response);
                var ret = await response.Content.ReadFromJsonAsync<AgentDeleteResponse>();
            }
            else
            {
                _active.ReaderSettings = JsonSerializer.Serialize(ReaderSettings);
                _active.NotifySettings = JsonSerializer.Serialize(NotifySettings);
                _active.ListenerSettings = JsonSerializer.Serialize(ListenerSettings);
                string address;
                if (Notifier.Action == CrudAction.Create)
                {
                    address = "api/Agent/Add";
                }
                else
                {
                    address = "api/Agent/Update";
                }
                HttpResponseMessage response = await Http.PostAsJsonAsync(address, new UpdateAgent() { Agents = new GXAgent[] { _active } });
                ClientHelpers.ValidateStatusCode(response);
                var ret = await response.Content.ReadFromJsonAsync<UpdateAgentResponse>();
            }
            Notifier.RemoveLastPage();
            NavigationManager.NavigateTo(Notifier.GetLastPage());
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception ex)
        {
            Notifier?.ProcessError(ex);
        }
        finally
        {
            Notifier?.ProgressEnd();
        }
    }

    /// <summary>
    /// Cancel update.
    /// </summary>
    private void OnCancel()
    {
        Notifier.RemoveLastPage();
        NavigationManager.NavigateTo(Notifier.GetLastPage());
    }

    public void Dispose()
    {
        Notifier.RemoveLastPage(GXPages.Agent);
    }
}
