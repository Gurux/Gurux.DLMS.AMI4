@if (Parent.ActivePage == this)
{
    @ChildContent
}

@code {
    [CascadingParameter]
    private TabControl? Parent { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    ///<summary>
    ///Tab page path.
    ///</summary>
    [Parameter]
    public string? Path { get; set; }

    ///<summary>
    ///Tab page header text.
    ///</summary>
    [Parameter]
    public string Text { get; set; } = "";

    ///<summary>
    ///Icon class
    ///</summary>
    [Parameter]
    public string? Icon { get; set; }

    ///<summary>
    ///Icon ligature.
    ///</summary>
    [Parameter]
    public string? IconLigature { get; set; }

    [Parameter]
    public bool Active { get; set; }

    /// <summary>
    /// Page index number.
    /// </summary>
    /// <remarks>
    /// This is for internal use.
    /// </remarks>
    internal int Index { get; set; }

    protected override void OnInitialized()
    {
        if (Parent == null)
        {
            throw new ArgumentNullException(nameof(Parent), "TabPage must exist within a TabControl");
        }
        base.OnInitialized();
        Parent.AddPage(this);
        if (Active)
        {
            Parent.ActivePage = this;
        }
    }

}