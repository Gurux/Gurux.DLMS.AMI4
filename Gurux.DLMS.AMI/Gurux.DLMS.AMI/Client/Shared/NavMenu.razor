@using Gurux.DLMS.AMI.Module
@using Gurux.DLMS.AMI.Shared.Rest
@using Microsoft.Extensions.Logging

@inject GXModuleService modules
@inject IHttpClientFactory HttpClientFactory
@inject HttpClient Http
@inject ILogger<App> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Gurux.DLMS.AMI</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span>@Properties.Resources.Home
            </NavLink>
        </li>
        <AuthorizeView Roles="Admin, DeviceManager, DeviceGroupManager">
            <li class="nav-item">
                <NavLink class="nav-link" href="Device">
                    <span class="oi oi-tablet" aria-hidden="true"></span>@Properties.Resources.Devices
                </NavLink>
            </li>
        </AuthorizeView>
        <AuthorizeView Roles="Admin, ScheduleManager">
            <li class="nav-item">
                <NavLink class="nav-link" href="Schedule">
                    <span class="oi oi-timer" aria-hidden="true"></span>@Properties.Resources.SchedulesTitle
                </NavLink>
            </li>
        </AuthorizeView>
        <AuthorizeView Roles="Admin, TemplateManager">
            <li class="nav-item">
                <NavLink class="nav-link" href="DeviceTemplate">
                    <span class="oi oi-file" aria-hidden="true"></span>@Properties.Resources.DeviceTemplates
                </NavLink>
            </li>
        </AuthorizeView>
        <AuthorizeView Roles="Admin, UserManager, UserGroupManager">
            <li class="nav-item">
                <NavLink class="nav-link" href="User">
                    <span class="oi oi-people" aria-hidden="true"></span>&nbsp; @Properties.Resources.UserManagement
                </NavLink>
            </li>
        </AuthorizeView>
        <AuthorizeView Roles="Admin, AgentManager">
            <li class="nav-item">
                <NavLink class="nav-link" href="Agent">
                    <span class="oi oi-wifi" aria-hidden="true"></span>@Properties.Resources.Agents
                </NavLink>
            </li>
        </AuthorizeView>
        <AuthorizeView Roles="Admin, GatewayManager">
            <li class="nav-item">
                <NavLink class="nav-link" href="Gateway">
                    <span class="oi oi-cloud-download" aria-hidden="true"></span>@Properties.Resources.Gateways
                </NavLink>
            </li>
        </AuthorizeView>
        <AuthorizeView Roles="Admin, LogManager">
            <li class="nav-item">
                <NavLink class="nav-link" href="logs">
                    <span class="oi oi-info" aria-hidden="true"></span> @Properties.Resources.Logs
                </NavLink>
            </li>
        </AuthorizeView>
        <AuthorizeView Roles="Admin">
            <li class="nav-item">
                <NavLink class="nav-link" href="Config">
                    <span class="oi oi-cog" aria-hidden="true"></span>@Properties.Resources.Configuration
                </NavLink>
            </li>
        </AuthorizeView>
        @foreach (var comp in navItems)
        {
            @foreach (Gurux.DLMS.AMI.Module.AmiNavItem item in comp.Value)
            {
                <li class="nav-item">
                    <NavLink class="nav-link" href="@("Module/" + comp.Key + "/" + item.Component.Name)">
                        <span class="@item.Icon" aria-hidden="true"></span> @item.Name
                    </NavLink>
                </li>
            }
        }
        <AuthorizeView>
            <li class="nav-item">
                <NavLink class="nav-link" href="Favorites">
                    <span class="oi oi-star" aria-hidden="true"></span>@Properties.Resources.Favorites
                </NavLink>
            </li>
        </AuthorizeView>
    </ul>
</div>

@code {

    //Language has changed.
    public void LanguageUpdated()
    {
        StateHasChanged();
    }

    //Module navigation items.
    List<KeyValuePair<string, Gurux.DLMS.AMI.Module.AmiNavItem[]>> navItems = new();

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity != null && authState.User.Identity.IsAuthenticated)
            {
                if (!modules.Assemblies.Any())
                {
                    Logger.LogInformation("Loading assemblies.");
                    await modules.LoadModules(Http);
                }
                else
                {
                    Logger.LogInformation("Assemblies already loaded.");
                }
                if (modules.Assemblies != null)
                {
                    foreach (var asm in modules.Assemblies)
                    {
                        string? name = null;
                        List<AmiNavItem> items = new List<AmiNavItem>();
                        foreach (var type in asm.GetExportedTypes())
                        {
                            if (type.IsAbstract || !type.IsClass || type.FullName == null)
                            {
                                continue;
                            }
                            if (type.GetInterfaces().Contains(typeof(IAmiModule)))
                            {
                                IAmiModule? tmp = (IAmiModule?)asm.CreateInstance(type.FullName);
                                name = tmp?.Name;
                            }
                            else if (type.GetInterfaces().Contains(typeof(IAMINavigation)))
                            {
                                IAMINavigation? tmp = (IAMINavigation?)asm.CreateInstance(type.FullName);
                                if (tmp?.NavItems != null && tmp.NavItems.Any())
                                {
                                    items.AddRange(tmp.NavItems);
                                }
                            }
                        }
                        if (!string.IsNullOrEmpty(name) && items.Any())
                        {
                            navItems.Add(new KeyValuePair<string, AmiNavItem[]>(name, items.ToArray()));
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "An error occurred.");
        }
    }
}
